{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/userinfo.email": {
          "description": "View your email address"
        }
      }
    }
  },
  "basePath": "/_ah/api/lumsites/v1/",
  "baseUrl": "",
  "batchPath": "batch",
  "description": "LumApps API",
  "discoveryVersion": "v1",
  "documentationLink": "https://api.lumapps.com/",
  "icons": {
    "x16": "https://www.gstatic.com/images/branding/product/1x/googleg_16dp.png",
    "x32": "https://www.gstatic.com/images/branding/product/1x/googleg_32dp.png"
  },
  "id": "lumsites:v1",
  "kind": "discovery#restDescription",
  "name": "lumsites",
  "parameters": {
    "alt": {
      "default": "json",
      "description": "Data format for the response.",
      "enum": [
        "json"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json"
      ],
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
      "location": "query",
      "type": "string"
    },
    "userIp": {
      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "bookmarks": {
      "methods": {
        "get": {
          "description": "\n        List all user's applications\n        ",
          "httpMethod": "GET",
          "id": "lumsites.bookmarks.get",
          "path": "bookmarks/get",
          "response": {
            "$ref": "ServerBookmarksBookmarksMessagesListBookmarksMessages"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "calendar": {
      "methods": {
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Get a calendar.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.calendar.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "calendar/get",
          "response": {
            "$ref": "ServerCalendarCalendarMessagesCalendarGetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        List Google Calendar calendars.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.calendar.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "200",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "calendar/list",
          "response": {
            "$ref": "ServerCalendarCalendarMessagesCalendarListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "event": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        List Calendar events.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.calendar.event.list",
              "parameters": {
                "calendarId": {
                  "location": "query",
                  "type": "string"
                },
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "endDate": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "query": {
                  "location": "query",
                  "type": "string"
                },
                "startDate": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "calendar/event/list",
              "response": {
                "$ref": "ServerCalendarCalendarMessagesCalendarEventListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "chat": {
      "methods": {
        "token": {
          "description": "\n        Return the getStream chat token.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.chat.token",
          "path": "chat/token",
          "response": {
            "$ref": "ServerStreamChatStreamTokenMessagesStreamChatTokenResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "channels": {
          "methods": {
            "get": {
              "description": "\n        Return a channel\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.channels.get",
              "parameters": {
                "channelId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/channels/get",
              "response": {
                "$ref": "ServerChatChatMessagesChatChannelGetResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "getByName": {
              "description": "\n        Return a channel\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.channels.getByName",
              "parameters": {
                "channelName": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/channels/getByName",
              "response": {
                "$ref": "ServerChatChatMessagesChatChannelGetResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        Return a list of channels\n        ",
              "httpMethod": "POST",
              "id": "lumsites.chat.channels.list",
              "path": "chat/channels/list",
              "request": {
                "$ref": "ServerChatChatMessagesChatChannelsListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerChatChatMessagesChatChannelsListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "userjoined": {
              "description": "\n        Return if the user has joined the channel\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.channels.userjoined",
              "parameters": {
                "channelId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/channels/user/joined",
              "response": {
                "$ref": "ServerChatChatMessagesChatChannelsUserJoinedResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "list": {
              "methods": {
                "joined": {
                  "description": "\n        Return a list of channels\n        ",
                  "httpMethod": "POST",
                  "id": "lumsites.chat.channels.list.joined",
                  "path": "chat/channels/list/joined",
                  "request": {
                    "$ref": "ServerChatChatMessagesChatChannelsListRequest",
                    "parameterName": "resource"
                  },
                  "response": {
                    "$ref": "ServerChatChatMessagesChatChannelsListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "user": {
              "methods": {
                "link": {
                  "description": "\n        Get the link to the user IM.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.chat.channels.user.link",
                  "parameters": {
                    "provider": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "spaceId": {
                      "location": "query",
                      "type": "string"
                    },
                    "userEmail": {
                      "location": "query",
                      "type": "string"
                    },
                    "userId": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "chat/channels/user/link",
                  "response": {
                    "$ref": "ServerChatChatMessagesChatChannelsUserLinkGetResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "contact": {
          "resources": {
            "user": {
              "methods": {
                "list": {
                  "description": "\n        Get the link to the user IM.\n        ** Use it to test the provider **\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.chat.contact.user.list",
                  "parameters": {
                    "userEmail": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "chat/contact/user/list",
                  "response": {
                    "$ref": "ServerChatChatMessagesChatUserContactsGetResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "messages": {
          "methods": {
            "create": {
              "description": "\n        Create a new message\n        ",
              "httpMethod": "POST",
              "id": "lumsites.chat.messages.create",
              "path": "chat/messages/create",
              "request": {
                "$ref": "ServerChatChatMessagesChatMessageCreateRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerChatChatMessagesChatMessageCreateResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        Return a list of chat messages\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.messages.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "channelId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "chatMessageId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "page": {
                  "default": "1",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "withReplies": {
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "chat/messages/list",
              "response": {
                "$ref": "ServerChatChatMessagesChatMessageListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "wall": {
              "methods": {
                "post": {
                  "description": "\n        Return a chat messages for the wall\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.chat.messages.wall.post",
                  "parameters": {
                    "channelId": {
                      "location": "query",
                      "type": "string"
                    },
                    "messageId": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "provider": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "spaceId": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "chat/messages/wallpost",
                  "response": {
                    "$ref": "ServerChatChatMessagesChatMessageWallResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "providers": {
          "methods": {
            "list": {
              "description": "\n        List all available providers\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.providers.list",
              "parameters": {
                "onlyConfigurable": {
                  "location": "query",
                  "type": "boolean"
                },
                "userId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "chat/providers/list",
              "response": {
                "$ref": "ServerChatChatMessagesChatProvidersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "userSpaces": {
          "methods": {
            "get": {
              "description": "\n        Return a user space\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.userSpaces.get",
              "parameters": {
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/userSpaces/get",
              "response": {
                "$ref": "ServerChatChatMessagesChatUserSpacesGetResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        Return a list of user spaces\n        ",
              "httpMethod": "POST",
              "id": "lumsites.chat.userSpaces.list",
              "path": "chat/userSpaces/list",
              "request": {
                "$ref": "ServerChatChatMessagesChatUserSpacesListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerChatChatMessagesChatUserSpacesListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "register": {
              "description": "\n        Register a new User Space\n        ",
              "httpMethod": "POST",
              "id": "lumsites.chat.userSpaces.register",
              "path": "chat/userSpaces/register",
              "request": {
                "$ref": "ServerChatChatMessagesChatUserSpaceRegisterRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "unregister": {
              "description": "\n        Unregister a user space\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.chat.userSpaces.unregister",
              "parameters": {
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/userSpaces/unregister",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "list": {
              "methods": {
                "joined": {
                  "description": "\n        Return a list of user spaces\n        ",
                  "httpMethod": "POST",
                  "id": "lumsites.chat.userSpaces.list.joined",
                  "path": "chat/userSpaces/list/joined",
                  "request": {
                    "$ref": "ServerChatChatMessagesChatUserSpacesListRequest",
                    "parameterName": "resource"
                  },
                  "response": {
                    "$ref": "ServerChatChatMessagesChatUserSpacesListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "userToken": {
          "methods": {
            "authorize": {
              "description": "\n        Get the link to the user OAuth2 authorize.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.userToken.authorize",
              "parameters": {
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/userToken/authorize",
              "response": {
                "$ref": "ServerChatChatMessagesChatUserTokenAuthorizeResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "disconnect": {
              "description": "\n        Disconnect if the user is connected to an user space\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.userToken.disconnect",
              "parameters": {
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/userToken/disconnect",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "status": {
              "description": "\n        If the user is connected to an user space\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.userToken.status",
              "parameters": {
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/userToken/status",
              "response": {
                "$ref": "ServerChatChatMessagesChatUserTokenStatusResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "wall": {
          "methods": {
            "messages": {
              "description": "\n        Return a list of chat messages for the wall\n        ",
              "httpMethod": "GET",
              "id": "lumsites.chat.wall.messages",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "channelId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "messageType": {
                  "location": "query",
                  "type": "string"
                },
                "orderAsc": {
                  "location": "query",
                  "type": "boolean"
                },
                "orderBy": {
                  "default": "created",
                  "location": "query",
                  "type": "string"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "spaceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "chat/wall/messages",
              "response": {
                "$ref": "ServerChatChatMessagesChatMessageWallListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "providers": {
              "methods": {
                "list": {
                  "description": "\n        List all available Wall providers\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.chat.wall.providers.list",
                  "path": "chat/wall/providers/list",
                  "response": {
                    "$ref": "ServerChatChatMessagesChatProvidersResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "cloudsearch": {
      "resources": {
        "customfields": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *alpha* Save the given datasource settings.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.cloudsearch.customfields.list",
              "path": "cloudsearch/customfields/list",
              "request": {
                "$ref": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceIdRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceCustomFieldsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "datasourceconfig": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *alpha* List the available CloudSearch datasets.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.cloudsearch.datasourceconfig.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "customerId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "cloudsearch/datasourceconfig/get",
              "response": {
                "$ref": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchDataSourceListMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *alpha* Save the given datasource settings.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.cloudsearch.datasourceconfig.save",
              "path": "cloudsearch/datasourceconfig/save",
              "request": {
                "$ref": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchDataSourceListMessage",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchDataSourceListMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "comment": {
      "methods": {
        "get": {
          "description": "\n        Get a comment by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.comment.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "comment/get",
          "response": {
            "$ref": "Comment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getWithFirstChild": {
          "description": "\n        Get the comments of a piece of content and their first child.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.comment.getWithFirstChild",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "comment/getWithFirstChild",
          "response": {
            "$ref": "ServerCommentCommentMessagesCommentAndChild"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "like": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Like a comment\n        ",
          "httpMethod": "POST",
          "id": "lumsites.comment.like",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "comment/like",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Comment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the comments matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.comment.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "content": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "parent": {
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "type": "string"
            },
            "withAnswers": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "comment/list",
          "response": {
            "$ref": "ServerCommentCommentMessagesCommentListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "listCommentsAndFirstChild": {
          "description": "\n        Lists the comments and the first child of each comment,\n        relative to a piece of content or a comment.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.comment.listCommentsAndFirstChild",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "content": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "parent": {
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "type": "string"
            },
            "withAnswers": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "comment/listCommentsAndFirstChild",
          "response": {
            "$ref": "ServerCommentCommentMessagesCommentAndChildListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "markRelevant": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark a comment as relevant\n        ",
          "httpMethod": "POST",
          "id": "lumsites.comment.markRelevant",
          "path": "comment/markRelevant",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a comment.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.comment.save",
          "parameters": {
            "fields": {
              "location": "query",
              "type": "string"
            },
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            },
            "updateFields": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "comment/save",
          "request": {
            "$ref": "Comment",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Comment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unlike": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unlike a comment\n        ",
          "httpMethod": "POST",
          "id": "lumsites.comment.unlike",
          "path": "comment/unlike",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Comment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unmarkRelevant": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark a comment as relevant\n        ",
          "httpMethod": "POST",
          "id": "lumsites.comment.unmarkRelevant",
          "path": "comment/unmarkRelevant",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "community": {
      "methods": {
        "changeInstance": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Move a community to a different instance.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.changeInstance",
          "path": "community/changeInstance",
          "request": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityChangeInstanceRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "communityTypeList": {
          "description": "\n        List communities for a given type.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.community.communityTypeList",
          "parameterOrder": [
            "communityType"
          ],
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "communityType": {
              "location": "path",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "path": "community/{communityType}/list",
          "response": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a community.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.community.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "community/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of community.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.community.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "community/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "follow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Follow a community, dedicated and simple endpoint to easily follow a community without subscription management\n        on client side.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.follow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            },
            "notify": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "community/{id}/follow",
          "response": {
            "$ref": "Subscription"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a community by id or slug.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.community.get",
          "parameters": {
            "action": {
              "enum": [
                "PAGE_READ",
                "PAGE_EDIT",
                "PAGE_DELETE",
                "NEWS_READ",
                "NEWS_EDIT",
                "NEWS_DELETE",
                "PAGE_ARCHIVE",
                "PAGE_PUBLISH",
                "NEWS_PUBLISH",
                "METADATA_EDIT",
                "METADATA_DELETE",
                "ROLE_READ",
                "ROLE_EDIT",
                "ROLE_DELETE",
                "NEWS_LIST_READ",
                "NEWS_LIST_EDIT",
                "NEWS_LIST_DELETE",
                "DIRECTORY_READ",
                "DIRECTORY_EDIT",
                "DIRECTORY_DELETE",
                "MENU_READ",
                "MENU_EDIT",
                "MENU_DELETE",
                "TEMPLATE_READ",
                "TEMPLATE_EDIT",
                "TEMPLATE_DELETE",
                "INSTANCE_EDIT",
                "INSTANCE_DELETE",
                "FEED_EDIT",
                "FEED_DELETE",
                "MEDIA_EDIT",
                "MEDIA_DELETE",
                "USER_READ",
                "USER_EDIT",
                "USER_DELETE",
                "RESELLER_READ",
                "RESELLER_EDIT",
                "POST_EDIT",
                "GROUP_EDIT",
                "DIRECTORY_ENTRY_FAVORITES_EDIT",
                "NEWSLETTER_READ",
                "NEWSLETTER_EDIT",
                "NEWSLETTER_DELETE",
                "CUSTOM_CONTENT_TYPE_EDIT",
                "CUSTOM_CONTENT_TYPE_DELETE",
                "CUSTOM_CONTENT_READ",
                "CUSTOM_CONTENT_PUBLISH",
                "CUSTOM_CONTENT_EDIT",
                "CUSTOM_CONTENT_DELETE",
                "CUSTOM_LIST_READ",
                "CUSTOM_LIST_EDIT",
                "CUSTOM_LIST_DELETE",
                "CUSTOM_LIST_PUBLISH",
                "COMMUNITY_READ",
                "COMMUNITY_EDIT",
                "COMMUNITY_DELETE",
                "USER_DIRECTORY_READ",
                "USER_DIRECTORY_EDIT",
                "USER_DIRECTORY_DELETE",
                "CUSTOM_READ",
                "CUSTOM_EDIT",
                "CUSTOM_DELETE",
                "TUTORIAL_READ",
                "TUTORIAL_EDIT",
                "TUTORIAL_DELETE",
                "POST_READ",
                "POST_DELETE",
                "CUSTOM_CONTENT_ARCHIVE",
                "MENU_DROP",
                "STYLE_READ",
                "STYLE_EDIT",
                "STYLE_DELETE",
                "GLOBAL_WIDGET_EDIT",
                "TARGET_EDIT",
                "DIRECTORY_ENTRY_READ",
                "DIRECTORY_ENTRY_EDIT",
                "DIRECTORY_ENTRY_DELETE",
                "COMMUNITY_PUBLISH",
                "ANALYTICS_READ",
                "COMMUNITY_CREATE"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerHost": {
              "location": "query",
              "type": "string"
            },
            "customerSlug": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "instanceSlug": {
              "location": "query",
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "slug": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "community/get",
          "response": {
            "$ref": "Community"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the communities matching the specified criteria.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.list",
          "parameters": {
            "fields": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "community/list",
          "request": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "meeting": {
          "httpMethod": "PUT",
          "id": "lumsites.community.meeting",
          "path": "community/meeting",
          "request": {
            "$ref": "ServerCalendarCalendarMessagesCreateCommunityMeetingRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerCalendarCalendarMessagesCreateMeetingResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a community.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.save",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "community/save",
          "request": {
            "$ref": "Community",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Community"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "searchForPosting": {
          "description": "\n        List communities in which the connected user can contribute.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.searchForPosting",
          "path": "community/searchForPosting",
          "request": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunitySearchForPostingRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "searchForSharing": {
          "description": "\n        List communities in which the connected user can share a post.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.community.searchForSharing",
          "path": "community/searchForSharing",
          "request": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityShareSearchRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerContentCommunityCommunityMessagesCommunityListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unfollow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unfollow a community, dedicated and simple endpoint to easily unfollow a community without subscription\n        management on client side.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.community.unfollow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            }
          },
          "path": "community/{id}/unfollow",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "groups": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "id": "lumsites.community.groups.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "groupId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/groups/get",
              "response": {
                "$ref": "ServerContentCommunityCommunityMessagesGetCommunityGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "httpMethod": "GET",
              "id": "lumsites.community.groups.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "query": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/groups/list",
              "response": {
                "$ref": "ServerContentCommunityCommunityMessagesListCommunityGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "layout": {
          "methods": {
            "save": {
              "description": "\n        Save only the layout in the community\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.layout.save",
              "path": "community/layout/save",
              "request": {
                "$ref": "Community",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Community"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "meeting": {
          "methods": {
            "delete": {
              "httpMethod": "DELETE",
              "id": "lumsites.community.meeting.delete",
              "parameters": {
                "eventId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "fromUserId": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/meeting/delete",
              "response": {
                "$ref": "ServerCalendarCalendarMessagesDeleteMeetingResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "update": {
              "httpMethod": "POST",
              "id": "lumsites.community.meeting.update",
              "path": "community/meeting/update",
              "request": {
                "$ref": "ServerCalendarCalendarMessagesUpdateMeetingRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerCalendarCalendarMessagesUpdateMeetingResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "notifications": {
          "methods": {
            "disable": {
              "description": "\n        Disable notification on a community.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.notifications.disable",
              "parameterOrder": [
                "id"
              ],
              "parameters": {
                "id": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/notifications/disable",
              "response": {
                "$ref": "Subscription"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "enable": {
              "description": "\n        Enable notifications on a community.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.notifications.enable",
              "parameterOrder": [
                "id"
              ],
              "parameters": {
                "id": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/notifications/enable",
              "response": {
                "$ref": "Subscription"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "post": {
          "methods": {
            "close": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Close a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.close",
              "parameterOrder": [
                "uid"
              ],
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/close",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a post.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.community.post.delete",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        Get a post by id.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.community.post.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/get",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "like": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Like a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.like",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "community/post/like",
              "request": {
                "$ref": "ServerCommonEndpointMessagesDatastoreKey",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the posts matching the specified criteria.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.community.post.list",
              "parameters": {
                "author": {
                  "location": "query",
                  "type": "string"
                },
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "contentId": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "currentInstance": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "customerId": {
                  "location": "query",
                  "type": "string"
                },
                "eventEndAfter": {
                  "location": "query",
                  "type": "string"
                },
                "eventEndBefore": {
                  "location": "query",
                  "type": "string"
                },
                "eventStartAfter": {
                  "location": "query",
                  "type": "string"
                },
                "eventStartBefore": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "followingOnly": {
                  "location": "query",
                  "type": "boolean"
                },
                "hasAttachments": {
                  "location": "query",
                  "type": "boolean"
                },
                "hasRelevant": {
                  "location": "query",
                  "type": "boolean"
                },
                "ids": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "instanceId": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "isCommunityAdmin": {
                  "location": "query",
                  "type": "boolean"
                },
                "isMergePending": {
                  "location": "query",
                  "type": "boolean"
                },
                "isMerged": {
                  "location": "query",
                  "type": "boolean"
                },
                "isOpen": {
                  "location": "query",
                  "type": "boolean"
                },
                "isPinned": {
                  "location": "query",
                  "type": "boolean"
                },
                "lang": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "maxScore": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "minScore": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "postStatus": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "postType": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "query": {
                  "location": "query",
                  "type": "string"
                },
                "sortOrder": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "tags": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "path": "community/post/list",
              "response": {
                "$ref": "ServerContentCommunityPostPostMessagesPostListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "move": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Move a post from a community to another\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.move",
              "parameterOrder": [
                "uid",
                "communityId"
              ],
              "parameters": {
                "communityId": {
                  "location": "path",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/move/{communityId}",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "open": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Reopen a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.open",
              "parameterOrder": [
                "uid"
              ],
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/open",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "pin": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark a post as pinned in a community.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.pin",
              "path": "community/post/pin",
              "request": {
                "$ref": "ServerContentCommunityPostPostMessagesPostPinRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "postStatus": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Update custom status of a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.postStatus",
              "parameterOrder": [
                "uid"
              ],
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "status": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/status",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.save",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                },
                "updateFields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/post/save",
              "request": {
                "$ref": "Post",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "search": {
              "description": "\n        Search for the posts matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.search",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/post/search",
              "request": {
                "$ref": "ServerContentCommunityPostPostMessagesPostListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerContentCommunityPostPostMessagesPostListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "share": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Share a post in communities\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.share",
              "path": "community/post/share",
              "request": {
                "$ref": "ServerContentCommunityPostPostMessagesPostShareRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "unlike": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unlike a post.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.unlike",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "community/post/unlike",
              "request": {
                "$ref": "ServerCommonEndpointMessagesDatastoreKey",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "unpin": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Remove a post from the list of pinned posts for a community.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.unpin",
              "path": "community/post/unpin",
              "request": {
                "$ref": "ServerContentCommunityPostPostMessagesPostUnpinRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "unshare": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unshare a post from communities\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.post.unshare",
              "path": "community/post/unshare",
              "request": {
                "$ref": "ServerContentCommunityPostPostMessagesPostUnshareRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "unvote": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Remove vote for a post.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.community.post.unvote",
              "parameterOrder": [
                "uid"
              ],
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/vote",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "vote": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Vote up or vote down for a post.\n        ",
              "httpMethod": "PUT",
              "id": "lumsites.community.post.vote",
              "parameterOrder": [
                "uid",
                "vote"
              ],
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "vote": {
                  "default": "up",
                  "enum": [
                    "up",
                    "down"
                  ],
                  "enumDescriptions": [
                    "",
                    ""
                  ],
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "community/post/{uid}/vote/{vote}",
              "response": {
                "$ref": "Post"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "request": {
          "methods": {
            "approve": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Approve a community access request.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.request.approve",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "community/request/approve",
              "request": {
                "$ref": "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestStatusRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Get a community access request.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.community.request.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "communityId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "requestStatus": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/request/get",
              "response": {
                "$ref": "CommunityRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        List community access requests.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.community.request.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "communityId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "requestStatus": {
                  "default": "pending",
                  "location": "query",
                  "type": "string"
                },
                "userId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/request/list",
              "response": {
                "$ref": "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "reject": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Reject a community access request.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.request.reject",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "community/request/reject",
              "request": {
                "$ref": "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestStatusRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Save a community access request.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.request.save",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "community/request/save",
              "request": {
                "$ref": "CommunityRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "CommunityRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "user": {
          "methods": {
            "list": {
              "description": "\n        List the members and administrators of a community.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.community.user.list",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "community/user/list",
              "request": {
                "$ref": "ServerContentCommunityCommunityMessagesCommunityUserListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerUserUserMessagesUserListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "communitysettings": {
      "methods": {
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a community settings from a customer and an instance if defined\n        ",
          "httpMethod": "GET",
          "id": "lumsites.communitysettings.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "instanceId": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "communitysettings/get",
          "response": {
            "$ref": "CommunitySettings"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save community settings\n        ",
          "httpMethod": "POST",
          "id": "lumsites.communitysettings.save",
          "path": "communitysettings/save",
          "request": {
            "$ref": "CommunitySettings",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CommunitySettings"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "communitytemplate": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a template.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.communitytemplate.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "communitytemplate/delete",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of templates.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.communitytemplate.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "communitytemplate/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a template by ID.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.communitytemplate.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "communitytemplate/get",
          "response": {
            "$ref": "CommunityTemplate"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List templates.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.communitytemplate.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "instanceId": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "communitytemplate/list",
          "response": {
            "$ref": "ServerCommunityTemplateCommunityTemplateMessagesCommunityTemplateListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a template.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.communitytemplate.save",
          "path": "communitytemplate/save",
          "request": {
            "$ref": "CommunityTemplate",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CommunityTemplate"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "content": {
      "methods": {
        "archive": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Archive a content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.archive",
          "path": "content/archive",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a content.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.content.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "content/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of contents.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.content.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "content/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "follow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Follow a Content, dedicated and simple endpoint to easily follow a Content without subscription management\n        on client side.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.follow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            },
            "notify": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "content/{id}/follow",
          "response": {
            "$ref": "Subscription"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a content.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.content.get",
          "parameters": {
            "action": {
              "enum": [
                "PAGE_READ",
                "PAGE_EDIT",
                "PAGE_DELETE",
                "NEWS_READ",
                "NEWS_EDIT",
                "NEWS_DELETE",
                "PAGE_ARCHIVE",
                "PAGE_PUBLISH",
                "NEWS_PUBLISH",
                "METADATA_EDIT",
                "METADATA_DELETE",
                "ROLE_READ",
                "ROLE_EDIT",
                "ROLE_DELETE",
                "NEWS_LIST_READ",
                "NEWS_LIST_EDIT",
                "NEWS_LIST_DELETE",
                "DIRECTORY_READ",
                "DIRECTORY_EDIT",
                "DIRECTORY_DELETE",
                "MENU_READ",
                "MENU_EDIT",
                "MENU_DELETE",
                "TEMPLATE_READ",
                "TEMPLATE_EDIT",
                "TEMPLATE_DELETE",
                "INSTANCE_EDIT",
                "INSTANCE_DELETE",
                "FEED_EDIT",
                "FEED_DELETE",
                "MEDIA_EDIT",
                "MEDIA_DELETE",
                "USER_READ",
                "USER_EDIT",
                "USER_DELETE",
                "RESELLER_READ",
                "RESELLER_EDIT",
                "POST_EDIT",
                "GROUP_EDIT",
                "DIRECTORY_ENTRY_FAVORITES_EDIT",
                "NEWSLETTER_READ",
                "NEWSLETTER_EDIT",
                "NEWSLETTER_DELETE",
                "CUSTOM_CONTENT_TYPE_EDIT",
                "CUSTOM_CONTENT_TYPE_DELETE",
                "CUSTOM_CONTENT_READ",
                "CUSTOM_CONTENT_PUBLISH",
                "CUSTOM_CONTENT_EDIT",
                "CUSTOM_CONTENT_DELETE",
                "CUSTOM_LIST_READ",
                "CUSTOM_LIST_EDIT",
                "CUSTOM_LIST_DELETE",
                "CUSTOM_LIST_PUBLISH",
                "COMMUNITY_READ",
                "COMMUNITY_EDIT",
                "COMMUNITY_DELETE",
                "USER_DIRECTORY_READ",
                "USER_DIRECTORY_EDIT",
                "USER_DIRECTORY_DELETE",
                "CUSTOM_READ",
                "CUSTOM_EDIT",
                "CUSTOM_DELETE",
                "TUTORIAL_READ",
                "TUTORIAL_EDIT",
                "TUTORIAL_DELETE",
                "POST_READ",
                "POST_DELETE",
                "CUSTOM_CONTENT_ARCHIVE",
                "MENU_DROP",
                "STYLE_READ",
                "STYLE_EDIT",
                "STYLE_DELETE",
                "GLOBAL_WIDGET_EDIT",
                "TARGET_EDIT",
                "DIRECTORY_ENTRY_READ",
                "DIRECTORY_ENTRY_EDIT",
                "DIRECTORY_ENTRY_DELETE",
                "COMMUNITY_PUBLISH",
                "ANALYTICS_READ",
                "COMMUNITY_CREATE"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerHost": {
              "location": "query",
              "type": "string"
            },
            "customerSlug": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "instanceSlug": {
              "location": "query",
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "slug": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "content/get",
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "like": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Like a content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.like",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "content/like",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a list of contents.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.list",
          "parameters": {
            "fields": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "content/list",
          "request": {
            "$ref": "ServerContentContentMessagesContentListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerContentContentMessagesContentListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.save",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "content/save",
          "request": {
            "$ref": "Content",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "saveMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a list of contents.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.saveMulti",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "content/saveMulti",
          "request": {
            "$ref": "ServerContentContentMessagesSaveContentMultiRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerContentContentMessagesContentListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "setHomepage": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Set a content as home page.<br>\n        This is only available for a super admin or an instance admin.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.setHomepage",
          "path": "content/setHomepage",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unarchive": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unarchive a content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.unarchive",
          "path": "content/unarchive",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unfollow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unfollow a Content, dedicated and simple endpoint to easily unfollow a Content without subscription\n        management on client side.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.content.unfollow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            }
          },
          "path": "content/{id}/unfollow",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unlike": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unlike a content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.unlike",
          "parameters": {
            "sendNotifications": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "content/unlike",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateContentType": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Update customContentType of a content.<br>\n        This is only available for global admins.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.updateContentType",
          "path": "content/updateContentType",
          "request": {
            "$ref": "ServerContentContentMessagesContentTypeUpdate",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateStatus": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Update status of a content.<br>\n        This is only available for editors and publishers.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.content.updateStatus",
          "path": "content/updateStatus",
          "request": {
            "$ref": "ServerContentContentMessagesContentStatusRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Content"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "data": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "id": "lumsites.content.data.get",
              "parameters": {
                "raw": {
                  "location": "query",
                  "type": "boolean"
                },
                "url": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "content/data/get",
              "response": {
                "$ref": "ServerContentDataDataMessagesDataResponseMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "interest": {
          "methods": {
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Delete a interest.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.content.interest.delete",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "content/interest/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "find": {
              "description": "\n        List interests matching the specified criteria (with support for pagination).\n        ",
              "httpMethod": "POST",
              "id": "lumsites.content.interest.find",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "content/interest/find",
              "request": {
                "$ref": "ServerContentInterestInterestMessagesInterestListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Interest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        Get an interest by id.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.content.interest.get",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "content/interest/get",
              "response": {
                "$ref": "Interest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List interests matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.content.interest.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "content/interest/list",
              "request": {
                "$ref": "ServerContentInterestInterestMessagesInterestListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerContentInterestInterestMessagesInterestListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Create or update a interest.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.content.interest.save",
              "path": "content/interest/save",
              "request": {
                "$ref": "Interest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Interest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "menu": {
          "methods": {
            "get": {
              "description": "\n        Get the main navigation of an instance.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.content.menu.get",
              "parameters": {
                "action": {
                  "enum": [
                    "PAGE_READ",
                    "PAGE_EDIT",
                    "PAGE_DELETE",
                    "NEWS_READ",
                    "NEWS_EDIT",
                    "NEWS_DELETE",
                    "PAGE_ARCHIVE",
                    "PAGE_PUBLISH",
                    "NEWS_PUBLISH",
                    "METADATA_EDIT",
                    "METADATA_DELETE",
                    "ROLE_READ",
                    "ROLE_EDIT",
                    "ROLE_DELETE",
                    "NEWS_LIST_READ",
                    "NEWS_LIST_EDIT",
                    "NEWS_LIST_DELETE",
                    "DIRECTORY_READ",
                    "DIRECTORY_EDIT",
                    "DIRECTORY_DELETE",
                    "MENU_READ",
                    "MENU_EDIT",
                    "MENU_DELETE",
                    "TEMPLATE_READ",
                    "TEMPLATE_EDIT",
                    "TEMPLATE_DELETE",
                    "INSTANCE_EDIT",
                    "INSTANCE_DELETE",
                    "FEED_EDIT",
                    "FEED_DELETE",
                    "MEDIA_EDIT",
                    "MEDIA_DELETE",
                    "USER_READ",
                    "USER_EDIT",
                    "USER_DELETE",
                    "RESELLER_READ",
                    "RESELLER_EDIT",
                    "POST_EDIT",
                    "GROUP_EDIT",
                    "DIRECTORY_ENTRY_FAVORITES_EDIT",
                    "NEWSLETTER_READ",
                    "NEWSLETTER_EDIT",
                    "NEWSLETTER_DELETE",
                    "CUSTOM_CONTENT_TYPE_EDIT",
                    "CUSTOM_CONTENT_TYPE_DELETE",
                    "CUSTOM_CONTENT_READ",
                    "CUSTOM_CONTENT_PUBLISH",
                    "CUSTOM_CONTENT_EDIT",
                    "CUSTOM_CONTENT_DELETE",
                    "CUSTOM_LIST_READ",
                    "CUSTOM_LIST_EDIT",
                    "CUSTOM_LIST_DELETE",
                    "CUSTOM_LIST_PUBLISH",
                    "COMMUNITY_READ",
                    "COMMUNITY_EDIT",
                    "COMMUNITY_DELETE",
                    "USER_DIRECTORY_READ",
                    "USER_DIRECTORY_EDIT",
                    "USER_DIRECTORY_DELETE",
                    "CUSTOM_READ",
                    "CUSTOM_EDIT",
                    "CUSTOM_DELETE",
                    "TUTORIAL_READ",
                    "TUTORIAL_EDIT",
                    "TUTORIAL_DELETE",
                    "POST_READ",
                    "POST_DELETE",
                    "CUSTOM_CONTENT_ARCHIVE",
                    "MENU_DROP",
                    "STYLE_READ",
                    "STYLE_EDIT",
                    "STYLE_DELETE",
                    "GLOBAL_WIDGET_EDIT",
                    "TARGET_EDIT",
                    "DIRECTORY_ENTRY_READ",
                    "DIRECTORY_ENTRY_EDIT",
                    "DIRECTORY_ENTRY_DELETE",
                    "COMMUNITY_PUBLISH",
                    "ANALYTICS_READ",
                    "COMMUNITY_CREATE"
                  ],
                  "enumDescriptions": [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    ""
                  ],
                  "location": "query",
                  "type": "string"
                },
                "alternativeLang": {
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "instance": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "lang": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "content/menu/get",
              "response": {
                "$ref": "ContentMenuList"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "httpMethod": "POST",
              "id": "lumsites.content.menu.save",
              "path": "content/menu/save",
              "request": {
                "$ref": "ServerContentContentMessagesSaveContentMenuRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerContentContentMessagesSaveContentMenuRequest"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "revision": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a specific revision of a content.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.content.revision.get",
              "parameters": {
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "version": {
                  "format": "int32",
                  "location": "query",
                  "required": true,
                  "type": "integer"
                }
              },
              "path": "content/revision/get",
              "response": {
                "$ref": "ContentRevision"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a list of content versions.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.content.revision.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "contentId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "content/revision/list",
              "response": {
                "$ref": "ServerContentContentRevisionContentRevisionMessagesContentRevisionListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "restore": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Restore a revision of a content.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.content.revision.restore",
              "parameters": {
                "sendNotifications": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "content/revision/restore",
              "request": {
                "$ref": "ServerContentContentRevisionContentRevisionMessagesContentRevisionKeyMessage",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Content"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "rss": {
          "methods": {
            "get": {
              "httpMethod": "GET",
              "id": "lumsites.content.rss.get",
              "parameters": {
                "url": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "content/rss/get",
              "response": {
                "$ref": "ServerContentRssRssMessagesRssResponseMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "custom": {
      "resources": {
        "apps": {
          "methods": {
            "list": {
              "description": "\n        Get a list of apps\n\n        Returns:\n            a AppsListResponse\n        ",
              "httpMethod": "GET",
              "id": "lumsites.custom.apps.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "custom/apps/list",
              "response": {
                "$ref": "ServerCustomAppsAppsMessagesAppsListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "customcontenttype": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a custom content type.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.customcontenttype.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "customcontenttype/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of custom content types.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.customcontenttype.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "customcontenttype/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a custom content type by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customcontenttype.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customcontenttype/get",
          "response": {
            "$ref": "CustomContentType"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getMulti": {
          "description": "\n        Get multiple custom content types by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customcontenttype.getMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uids": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "customcontenttype/getMulti",
          "response": {
            "$ref": "ServerCustomContentTypeCustomContentTypeMessagesCustomContentTypeListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the custom content types matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customcontenttype.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "includeInstanceSiblings": {
              "location": "query",
              "type": "boolean"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "name": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customcontenttype/list",
          "response": {
            "$ref": "ServerCustomContentTypeCustomContentTypeMessagesCustomContentTypeListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a custom content type.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.customcontenttype.save",
          "path": "customcontenttype/save",
          "request": {
            "$ref": "CustomContentType",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CustomContentType"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "children": {
          "methods": {
            "list": {
              "description": "\n        List the child content types of the specified custom content type.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customcontenttype.children.list",
              "parameterOrder": [
                "parentId"
              ],
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "instanceIds": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "parentId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customcontenttype/children/list",
              "response": {
                "$ref": "ServerCustomContentTypeCustomContentTypeMessagesChildrenListCustomContentTypeResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "tag": {
          "methods": {
            "get": {
              "description": "\n        Get a custom content type tag by id.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customcontenttype.tag.get",
              "parameterOrder": [
                "uuid"
              ],
              "parameters": {
                "uuid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customcontenttype/tag/get",
              "response": {
                "$ref": "CustomContentTypeTag"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the tags of the specified custom content type.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customcontenttype.tag.list",
              "parameterOrder": [
                "uid"
              ],
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customcontenttype/tag/list",
              "response": {
                "$ref": "ServerCustomContentTypeCustomContentTypeMessagesListCustomContentTypeTagResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "customer": {
      "methods": {
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a customer.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customer.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerHost": {
              "location": "query",
              "type": "string"
            },
            "customerSlug": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "id": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customer/get",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a list of customers.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.customer.list",
          "parameters": {
            "fields": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customer/list",
          "request": {
            "$ref": "ServerCustomerCustomerMessagesCustomerListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerCustomerCustomerMessagesCustomerListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "registrationLink": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Generate a customer registration link.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customer.registrationLink",
          "parameters": {
            "kind": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customer/registrationLink",
          "response": {
            "$ref": "ServerCustomerCustomerMessagesRegistrationLinkResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Create or update a customer.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.customer.save",
          "path": "customer/save",
          "request": {
            "$ref": "Customer",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "status": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Return a customer status or a customer error.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.customer.status",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string"
            },
            "token": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "customer/status",
          "response": {
            "$ref": "ServerCustomerCustomerMessagesCustomerStatusResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "admin": {
          "methods": {
            "add": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Add an administrator.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.customer.admin.add",
              "path": "customer/admin/add",
              "request": {
                "$ref": "ServerCustomerCustomerMessagesAdminRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Delete an administrator.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.customer.admin.delete",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "email": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customer/admin/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        Get a list of administrators.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customer.admin.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "sortOrder": {
                  "location": "query",
                  "type": "string"
                },
                "status": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "customer/admin/list",
              "response": {
                "$ref": "ServerCustomerCustomerMessagesAdminListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "identityprovider": {
          "methods": {
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Delete an identity provider.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.customer.identityprovider.delete",
              "parameters": {
                "customerKey": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uuid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customer/identityprovider/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "domain": {
              "description": "\n        Get the provider's id domain\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customer.identityprovider.domain",
              "parameters": {
                "customerKey": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "type": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customer/identityprovider/domain",
              "response": {
                "$ref": "ServerCustomerCustomerMessagesCustomerIDPTemporaryCacheResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Get an identity provider from its uuid.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customer.identityprovider.get",
              "parameters": {
                "customerKey": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uuid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "customer/identityprovider/get",
              "response": {
                "$ref": "CustomerIdentityProvider"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        List the customer's identity providers.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.customer.identityprovider.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "customerKey": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "customer/identityprovider/list",
              "response": {
                "$ref": "ServerCustomerCustomerMessagesCustomerIDPListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Save an identity provider.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.customer.identityprovider.save",
              "path": "customer/identityprovider/save",
              "request": {
                "$ref": "CustomerIdentityProvider",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "CustomerIdentityProvider"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "save": {
              "methods": {
                "order": {
                  "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Save identity providers order.\n        ",
                  "httpMethod": "POST",
                  "id": "lumsites.customer.identityprovider.save.order",
                  "path": "customer/identityprovider/save/order",
                  "request": {
                    "$ref": "ServerCustomerCustomerMessagesCustomerIDPSaveOrderRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "properties": {
          "methods": {
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Create or update a customer.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.customer.properties.save",
              "path": "customer/properties/save",
              "request": {
                "$ref": "ServerCustomerCustomerMessagesAdminPropertiesRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Customer"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "directory": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a directory.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.directory.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "directory/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of directory.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.directory.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "directory/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a directory by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.directory.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "directory/get",
          "response": {
            "$ref": "Directory"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the directories matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.directory.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "status": {
              "default": "LIVE",
              "enum": [
                "DRAFT",
                "REFUSED",
                "TO_VALIDATE",
                "LIVE",
                "ARCHIVE",
                "DELETED",
                "PENDING"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "type": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "directory/list",
          "response": {
            "$ref": "ServerDirectoryDirectoryMessagesDirectoryListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a directory.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.directory.save",
          "path": "directory/save",
          "request": {
            "$ref": "Directory",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Directory"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "entry": {
          "methods": {
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a directory entry.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.directory.entry.delete",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "directory/entry/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "deleteMulti": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of directory entries.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.directory.entry.deleteMulti",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                }
              },
              "path": "directory/entry/deleteMulti",
              "response": {
                "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        Get a directory entry by id.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.directory.entry.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "directory/entry/get",
              "response": {
                "$ref": "DirectoryEntry"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the directory entries matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.directory.entry.list",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "directory/entry/list",
              "request": {
                "$ref": "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a directory entry.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.directory.entry.save",
              "path": "directory/entry/save",
              "request": {
                "$ref": "DirectoryEntry",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "DirectoryEntry"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "user": {
              "methods": {
                "delete": {
                  "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a directory entry restricted to the current user.\n        ",
                  "httpMethod": "DELETE",
                  "id": "lumsites.directory.entry.user.delete",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "fields": {
                      "location": "query",
                      "type": "string"
                    },
                    "uid": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "directory/entry/user/delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "deleteMulti": {
                  "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of directory entries restricted to the current user.\n        ",
                  "httpMethod": "DELETE",
                  "id": "lumsites.directory.entry.user.deleteMulti",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "fields": {
                      "location": "query",
                      "type": "string"
                    },
                    "uid": {
                      "location": "query",
                      "repeated": true,
                      "type": "string"
                    }
                  },
                  "path": "directory/entry/user/deleteMulti",
                  "response": {
                    "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "list": {
                  "description": "\n        List the directory entries restricted to the current user.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.directory.entry.user.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "directory": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "status": {
                      "enum": [
                        "DRAFT",
                        "REFUSED",
                        "TO_VALIDATE",
                        "LIVE",
                        "ARCHIVE",
                        "DELETED",
                        "PENDING"
                      ],
                      "enumDescriptions": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                      ],
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "directory/entry/user/list",
                  "response": {
                    "$ref": "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "save": {
                  "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Create or update a directory entry restricted to the current user.\n        ",
                  "httpMethod": "POST",
                  "id": "lumsites.directory.entry.user.save",
                  "path": "directory/entry/user/save",
                  "request": {
                    "$ref": "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtLinkTags",
                    "parameterName": "resource"
                  },
                  "response": {
                    "$ref": "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtUserLinkTags"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "document": {
      "methods": {
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Return one document available to the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.get",
          "path": "document/get",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentActionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Media"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Return a list of documents available to the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.getMulti",
          "path": "document/getMulti",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentGetMultiRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesDocumentList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getPermissions": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Return a list of permissions available to the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.getPermissions",
          "path": "document/getPermissions",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentActionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesDocumentUserPermissionResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Return a list of documents available to the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.list",
          "path": "document/list",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesDocumentListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "move": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Move a document.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.move",
          "path": "document/move",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentMoveRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesEmptyResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "preview": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Return one document available to the user.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.document.preview",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "docPath": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "document/preview",
          "response": {
            "$ref": "ServerDocumentDocumentMessagesDocumentPreviewResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "restore": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Restore a trashed document.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.restore",
          "path": "document/restore",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentActionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesEmptyResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "search": {
          "description": "\n        *beta* Return a list of documents searched to the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.search",
          "path": "document/search",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentSearchRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesDocumentSearchResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "trash": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Trash a document.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.trash",
          "path": "document/trash",
          "request": {
            "$ref": "ServerDocumentDocumentMessagesDocumentActionRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerDocumentDocumentMessagesEmptyResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "update": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Update a document.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.document.update",
          "path": "document/update",
          "request": {
            "$ref": "Media",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Media"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "folder": {
          "methods": {
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Create a folder.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.document.folder.save",
              "path": "document/folder/save",
              "request": {
                "$ref": "ServerDocumentDocumentMessagesCreateFolderRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Media"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "myfiles": {
          "resources": {
            "uploadUrl": {
              "methods": {
                "get": {
                  "description": "\n        *beta* Create a new document upload session in My file for LumDrive.\n        This will return an upload URL where the client can send the binary data.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.document.myfiles.uploadUrl.get",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "fileName": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "instance": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "lang": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "document/myfiles/uploadUrl/get",
                  "response": {
                    "$ref": "ServerDocumentDocumentMessagesDocumentMyFilesUploadResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "provider": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Get the providers for the user\n        ",
              "httpMethod": "GET",
              "id": "lumsites.document.provider.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "instanceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "document/provider/list",
              "response": {
                "$ref": "ServerDocumentDocumentMessagesProviderListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "trash": {
          "methods": {
            "empty": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Empty the trash.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.document.trash.empty",
              "path": "document/trash/empty",
              "request": {
                "$ref": "ServerDocumentDocumentMessagesEmptyTrashRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDocumentDocumentMessagesEmptyResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "uploadUrl": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        *beta* Create a new document upload session.\n        This will return an upload URL where the client can send the binary data.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.document.uploadUrl.get",
              "path": "document/uploadUrl/get",
              "request": {
                "$ref": "ServerDocumentDocumentMessagesDocumentUploadRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDocumentDocumentMessagesDocumentUploadResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "drive": {
      "methods": {
        "getToken": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Get a token to call the Google Drive API.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.drive.getToken",
          "path": "drive/getToken",
          "response": {
            "$ref": "ServerDriveDriveMessagesTokenResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "files": {
          "methods": {
            "copy": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Copy a Google drive file.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.copy",
              "path": "drive/files/copy",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveCopyFileRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveFileResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "destroy": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Permanently deletes a Google Drive file owned by the user without moving it to the trash.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.destroy",
              "path": "drive/files/destroy",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveFileIdRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Get a file's metadata by ID.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.drive.files.get",
              "parameters": {
                "fileId": {
                  "location": "query",
                  "type": "string"
                },
                "kind": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "drive/files/get",
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveFileResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "insert": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Create a new Google Drive file.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.insert",
              "path": "drive/files/insert",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveInsertRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveFileResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        List files from a specific Google Drive folder.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.drive.files.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "complete": {
                  "location": "query",
                  "type": "boolean"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fetchAll": {
                  "location": "query",
                  "type": "boolean"
                },
                "folderId": {
                  "location": "query",
                  "type": "string"
                },
                "folderOnly": {
                  "location": "query",
                  "type": "boolean"
                },
                "kind": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int64",
                  "location": "query",
                  "type": "string"
                },
                "mimeType": {
                  "location": "query",
                  "type": "string"
                },
                "orderBy": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "drive/files/list",
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "move": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Move a Google drive file in another folder.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.move",
              "path": "drive/files/move",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveMoveFileRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "search": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Search files from Google Drive.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.drive.files.search",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "folderId": {
                  "location": "query",
                  "type": "string"
                },
                "fullText": {
                  "location": "query",
                  "type": "string"
                },
                "fullTextQuery": {
                  "location": "query",
                  "type": "string"
                },
                "kind": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "mimeType": {
                  "location": "query",
                  "type": "string"
                },
                "sharedWithMe": {
                  "location": "query",
                  "type": "boolean"
                },
                "starred": {
                  "location": "query",
                  "type": "boolean"
                },
                "title": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "drive/files/search",
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "trash": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Put a Google Drive file in the trash folder.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.trash",
              "path": "drive/files/trash",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveFileIdRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "untrash": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Restore a Google Drive file from the trash folder.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.untrash",
              "path": "drive/files/untrash",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveFileIdRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "update": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Update a Google Drive file metadata or content.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.drive.files.update",
              "path": "drive/files/update",
              "request": {
                "$ref": "ServerDriveDriveMessagesDriveUpdateFileRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDriveDriveMessagesDriveFileResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "email": {
      "methods": {
        "send": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Send an email\n        ",
          "httpMethod": "POST",
          "id": "lumsites.email.send",
          "path": "email/send",
          "request": {
            "$ref": "ServerEmailEmailMessagesEmailSendRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "favorite": {
      "methods": {
        "delete_having_target": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete the favorites with the given target.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.favorite.delete_having_target",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "kind": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "favorite/having_target",
          "response": {
            "$ref": "ServerFavoriteFavoriteMessagesFavoriteListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a favorite entry by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.favorite.get",
          "parameterOrder": [
            "uid"
          ],
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "favorite/{uid}",
          "response": {
            "$ref": "Favorite"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list_targets": {
          "description": "\n        List the favorite entries matching the specified criteria.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.favorite.list_targets",
          "path": "favorite/targets",
          "request": {
            "$ref": "ServerFavoriteFavoriteMessagesFavoriteListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerFavoriteFavoriteMessagesRehydratedFavoriteListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "mark_as_favorite": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark as favorite the given entity. Returns a favorite for each owner.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.favorite.mark_as_favorite",
          "path": "favorite/mark",
          "request": {
            "$ref": "ServerFavoriteFavoriteMessagesMarkAsFavoriteRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerFavoriteFavoriteMessagesFavoriteListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "featureflags": {
      "methods": {
        "list": {
          "description": "\n        List the feature flags matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.featureflags.list",
          "parameters": {
            "customerId": {
              "location": "query",
              "type": "string"
            },
            "status": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "featureflags/list",
          "response": {
            "$ref": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "override": {
          "description": "\n        Patch feature flags for a customer\n\n        SuperAdmin can only patch public flag for now.\n        ",
          "httpMethod": "PUT",
          "id": "lumsites.featureflags.override",
          "path": "featureflags/save",
          "request": {
            "$ref": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagSaveRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "feed": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a feed.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.feed.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "feed/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a feed by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.feed.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "feed/get",
          "response": {
            "$ref": "Feed"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getMulti": {
          "description": "\n        Get multiple feeds by id.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.feed.getMulti",
          "path": "feed/getMulti",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyList",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "FeedCollection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the feeds matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.feed.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "exceptFeeds": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "hasGroup": {
              "location": "query",
              "type": "boolean"
            },
            "herited": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            },
            "restrictToFeeds": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "type": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "feed/list",
          "response": {
            "$ref": "ServerFeedFeedMessagesFeedListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a feed.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.feed.save",
          "parameters": {
            "selfProvisioned": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "feed/save",
          "request": {
            "$ref": "Feed",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Feed"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "search": {
          "description": "\n        Search for the feeds matching the specified criteria.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.feed.search",
          "path": "feed/search",
          "request": {
            "$ref": "ServerFeedFeedMessagesFeedListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerFeedFeedMessagesFeedListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "synchronize": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Synchronize the Google group members in the feed.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.feed.synchronize",
          "path": "feed/synchronize",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "subscribers": {
          "methods": {
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save the list of users in a feed.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.feed.subscribers.save",
              "path": "feed/subscribers/save",
              "request": {
                "$ref": "ServerFeedFeedMessagesFeedSubscribersRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "user": {
          "resources": {
            "subscription": {
              "methods": {
                "list": {
                  "description": "\n        List the feeds the specified user belongs to.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.feed.user.subscription.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "fields": {
                      "location": "query",
                      "type": "string"
                    },
                    "userId": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "feed/user/subscription/list",
                  "response": {
                    "$ref": "ServerFeedFeedMessagesFeedListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "feedtype": {
      "methods": {
        "activate": {
          "description": "\n        Re-activate a feed type.\n        ",
          "httpMethod": "PATCH",
          "id": "lumsites.feedtype.activate",
          "path": "feedtype/activate",
          "request": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKey",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        Delete a feed type.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.feedtype.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "feedtype/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the feed types.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.feedtype.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string"
            },
            "herited": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            },
            "instance": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "feedtype/list",
          "response": {
            "$ref": "ServerFeedFeedtypeMessagesFeedTypeListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        Save a feed type.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.feedtype.save",
          "path": "feedtype/save",
          "request": {
            "$ref": "FeedType",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "FeedType"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "gmail": {
      "methods": {
        "list": {
          "description": "\n        List emails.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.gmail.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "gmail/list",
          "response": {
            "$ref": "ServerGmailGmailMessagesGmailListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "groups": {
      "methods": {
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get an external API group\n        ",
          "httpMethod": "GET",
          "id": "lumsites.groups.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "groupIdentifier": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "groups/get",
          "response": {
            "$ref": "ServerGroupsGroupsMessagesGetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List all groups from an external API group\n        ",
          "httpMethod": "GET",
          "id": "lumsites.groups.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "groups/list",
          "response": {
            "$ref": "ServerGroupsGroupsMessagesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "applications": {
          "methods": {
            "get": {
              "description": "\n        Get all the available applications of an external API group\n        ",
              "httpMethod": "GET",
              "id": "lumsites.groups.applications.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "groupIdentifier": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "groups/applications/get",
              "response": {
                "$ref": "ServerGroupsGroupsMessagesGetAllApplicationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "users": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get all the users emails of an external API group\n        ",
              "httpMethod": "GET",
              "id": "lumsites.groups.users.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "emailOnly": {
                  "default": "True",
                  "location": "query",
                  "type": "boolean"
                },
                "groupIdentifier": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "groupUserType": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "groups/users/get",
              "response": {
                "$ref": "ServerGroupsGroupsMessagesGetAllUsersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "header": {
      "methods": {
        "delete": {
          "description": "\n        Delete a header.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.header.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "header/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a header by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.header.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "header/get",
          "response": {
            "$ref": "Header"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the headers matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.header.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "header/list",
          "response": {
            "$ref": "ServerHeaderHeaderMessagesHeaderListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        Save a header.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.header.save",
          "path": "header/save",
          "request": {
            "$ref": "Header",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Header"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "identityprovider": {
      "methods": {
        "getCustomTechnicalNames": {
          "description": "\n        Get the custom technical names related to the identity provider.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.identityprovider.getCustomTechnicalNames",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/custom-technical-names/",
          "response": {
            "$ref": "CustomTechnicalNameCollection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getMappingFields": {
          "description": "\n        Get the mapping fields related to the identity provider.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.identityprovider.getMappingFields",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/mapping/fields",
          "response": {
            "$ref": "ProvisioningFieldMappingCollection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getProfileCustomTemplate": {
          "httpMethod": "GET",
          "id": "lumsites.identityprovider.getProfileCustomTemplate",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/profile/template",
          "response": {
            "$ref": "ServerCustomerMappingMappingMessagesGetProvisioningTemplateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateCustomTechnicalNames": {
          "description": "\n        Create/update custom technical names related to the identity provider.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.identityprovider.updateCustomTechnicalNames",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/custom-technical-names/",
          "request": {
            "$ref": "ServerCustomerMappingMappingMessagesUpdateCustomTechnicalNameRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "CustomTechnicalNameCollection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateMappingFields": {
          "httpMethod": "POST",
          "id": "lumsites.identityprovider.updateMappingFields",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/mapping/fields",
          "request": {
            "$ref": "ServerCustomerMappingMappingMessagesUpdateMappingFieldsRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ProvisioningFieldMappingCollection"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "updateProfileCustomTemplate": {
          "httpMethod": "POST",
          "id": "lumsites.identityprovider.updateProfileCustomTemplate",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/profile/template",
          "request": {
            "$ref": "ServerCustomerMappingMappingMessagesUpdateProvisioningTemplateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerCustomerMappingMappingMessagesGetProvisioningTemplateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "insight": {
      "resources": {
        "documents": {
          "resources": {
            "shared": {
              "methods": {
                "list": {
                  "description": "\n        Return a list of shared documents for current user\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.insight.documents.shared.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "containerType": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int64",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceType": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "insight/documents/shared/list",
                  "response": {
                    "$ref": "ServerInsightInsightMessagesInsightDocumentsListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "trending": {
              "methods": {
                "list": {
                  "description": "\n        Return a list of trending documents for current user\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.insight.documents.trending.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "containerType": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int64",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceType": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "insight/documents/trending/list",
                  "response": {
                    "$ref": "ServerInsightInsightMessagesInsightDocumentsListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "used": {
              "methods": {
                "list": {
                  "description": "\n        Return a list of trending documents for current user\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.insight.documents.used.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "containerType": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int64",
                      "location": "query",
                      "type": "string"
                    },
                    "resourceType": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "insight/documents/used/list",
                  "response": {
                    "$ref": "ServerInsightInsightMessagesInsightDocumentsListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "people": {
          "methods": {
            "list": {
              "description": "\n        Return a list of trending people for current user\n        ",
              "httpMethod": "GET",
              "id": "lumsites.insight.people.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int64",
                  "location": "query",
                  "type": "string"
                },
                "personType": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "insight/people/list",
              "response": {
                "$ref": "ServerInsightInsightMessagesInsightPeopleListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "instance": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete an instance.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.instance.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "instance/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of instances.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.instance.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "instance/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get an instance by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.instance.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerHost": {
              "location": "query",
              "type": "string"
            },
            "customerSlug": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "slug": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "instance/get",
          "response": {
            "$ref": "Instance"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        Search for instances matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.instance.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "combinedMetadata.metadata": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "considerUserIdentity": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "emptyParent": {
              "location": "query",
              "type": "boolean"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "ids": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            },
            "parent": {
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "type": "string"
            },
            "status": {
              "enum": [
                "DRAFT",
                "REFUSED",
                "TO_VALIDATE",
                "LIVE",
                "ARCHIVE",
                "DELETED",
                "PENDING"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "userFavoritesOnly": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "instance/list",
          "response": {
            "$ref": "ServerInstanceInstanceMessagesInstanceListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save an instance.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.instance.save",
          "path": "instance/save",
          "request": {
            "$ref": "Instance",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Instance"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "search": {
          "description": "\n        Search for instances matching the specified criteria.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.instance.search",
          "path": "instance/search",
          "request": {
            "$ref": "ServerInstanceInstanceMessagesInstanceListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerInstanceInstanceMessagesInstanceListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "admin": {
          "methods": {
            "add": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Add an instance administrator.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.instance.admin.add",
              "path": "instance/admin/add",
              "request": {
                "$ref": "ServerInstanceInstanceMessagesInstanceAdminRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete an instance administrator.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.instance.admin.delete",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "email": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "instance/admin/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a list of instance administrators.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.instance.admin.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "status": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "instance/admin/list",
              "response": {
                "$ref": "ServerInstanceInstanceMessagesInstanceAdminListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "metadata": {
          "methods": {
            "list": {
              "description": "\n        List the metadata of the specified instance.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.instance.metadata.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "instance": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "rootOnly": {
                  "location": "query",
                  "type": "boolean"
                },
                "withInheritance": {
                  "location": "query",
                  "type": "boolean"
                }
              },
              "path": "instance/metadata/list",
              "response": {
                "$ref": "ServerInstanceInstanceMessagesInstanceListMetadataResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "post_list": {
              "httpMethod": "POST",
              "id": "lumsites.instance.metadata.post_list",
              "path": "instance/metadata/list",
              "request": {
                "$ref": "ServerInstanceInstanceMessagesInstanceListMetadataRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerInstanceInstanceMessagesInstanceListMetadataResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "siblings": {
          "methods": {
            "list": {
              "description": "\n        List the parent, sibling and children instances of the specified instance.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.instance.siblings.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "instanceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "instance/siblings/list",
              "response": {
                "$ref": "ServerInstanceInstanceMessagesInstanceSiblingsListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "login": {
      "resources": {
        "login": {
          "methods": {
            "send_password_token": {
              "httpMethod": "POST",
              "id": "lumsites.login.login.send_password_token",
              "path": "login/sendPasswordToken",
              "request": {
                "$ref": "ServerAuthenticationLoginMessagesLoginSendPasswordTokenRequest",
                "parameterName": "resource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "media": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        USE_DOCUMENT_API\n        Delete a media. (deprecated)\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.media.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "media/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        USE_DOCUMENT_API\n        Get a media.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.media.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "media/get",
          "response": {
            "$ref": "Media"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "metadata": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a metadata.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.metadata.delete",
          "parameters": {
            "instance": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "metadata/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get metadata by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.metadata.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "metadata/get",
          "response": {
            "$ref": "Metadata"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List metadata matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.metadata.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "emptyParent": {
              "location": "query",
              "type": "boolean"
            },
            "familyId": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            },
            "parent": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "metadata/list",
          "response": {
            "$ref": "ServerMetadataMetadataMessagesMetadataListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a metadata.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.metadata.save",
          "path": "metadata/save",
          "request": {
            "$ref": "Metadata",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Metadata"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "saveMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a list of metadata.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.metadata.saveMulti",
          "path": "metadata/saveMulti",
          "request": {
            "$ref": "ServerMetadataMetadataMessagesSaveMetadataMultiRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerMetadataMetadataMessagesMetadataListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "misc": {
      "methods": {
        "urlinfo": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Fetch website info\n        ",
          "httpMethod": "GET",
          "id": "lumsites.misc.urlinfo",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "url": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "misc/urlinfo",
          "response": {
            "$ref": "ServerMiscMiscMessagesUrlinfoResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "newsletter": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a newsletter.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.newsletter.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "newsletter/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of newsletters.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.newsletter.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "newsletter/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a newsletter by ID.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.newsletter.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "newsletter/get",
          "response": {
            "$ref": "Newsletter"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List newsletters.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.newsletter.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "newsletter/list",
          "response": {
            "$ref": "ServerNewsletterNewsletterMessagesNewsletterListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a newsletter.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.newsletter.save",
          "path": "newsletter/save",
          "request": {
            "$ref": "Newsletter",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Newsletter"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "send": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Send a newsletter.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.newsletter.send",
          "path": "newsletter/send",
          "request": {
            "$ref": "ServerNewsletterNewsletterMessagesSendNewsletterRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNewsletterNewsletterMessagesSendNewsletterResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "notification": {
      "methods": {
        "checkLast": {
          "httpMethod": "GET",
          "id": "lumsites.notification.checkLast",
          "path": "notification/checkLast",
          "response": {
            "$ref": "ServerNotificationNotificationMessagesCheckLastNotificationResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "countUnread": {
          "description": "\n        Counts unread notifications for the connected user. Counts only mobile-compatible\n        notifications if `mobileOnly` parameter is set to true.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.notification.countUnread",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "limit": {
              "default": "30",
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "mobileOnly": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "notification/countUnread",
          "response": {
            "$ref": "ServerNotificationNotificationMessagesCountUnreadNotificationsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a notification.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.notification.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "notification/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteAll": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete all notifications.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.notification.deleteAll",
          "parameters": {
            "externalKey": {
              "location": "query",
              "type": "string"
            },
            "externalKeyKind": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "notification/deleteAll",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a notification by ID.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.notification.get",
          "parameters": {
            "functionalInnerId": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "notification/get",
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationGroupResource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List notifications of the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "path": "notification/list",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesNotificationListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "send": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Create a notification.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.send",
          "path": "notification/send",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesSendNotificationRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "serviceSend": {
          "description": "\n        Create a notification using a dedicated service account.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.serviceSend",
          "parameters": {
            "commentKey": {
              "location": "query",
              "type": "string"
            },
            "excludedUserIds": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "reference": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "notification/serviceSend",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesSendNotificationRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "setAllAsRead": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark all notifications as read by the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.setAllAsRead",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "notification/setAllAsRead",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesSetAllNotificationsReadRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationIdsResource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "setRead": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark a notification as read by the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.setRead",
          "path": "notification/setRead",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesSetNotificationReadRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationGroupResource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "setUnread": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Mark a notification as unread by the user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.notification.setUnread",
          "path": "notification/setUnread",
          "request": {
            "$ref": "ServerNotificationNotificationMessagesSetNotificationReadRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerNotificationNotificationMessagesNotificationGroupResource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "onedrive": {
      "resources": {
        "site": {
          "methods": {
            "list": {
              "description": "\n        List onedrive sites.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.onedrive.site.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "format": "int64",
                  "location": "query",
                  "type": "string"
                },
                "onlyFavorites": {
                  "location": "query",
                  "type": "boolean"
                },
                "search": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "onedrive/site/list",
              "response": {
                "$ref": "ServerDocumentOnedriveMessagesOneDriveSiteListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "organization": {
      "resources": {
        "organization": {
          "methods": {
            "get_organization": {
              "httpMethod": "GET",
              "id": "lumsites.organization.organization.get_organization",
              "parameterOrder": [
                "organizationId"
              ],
              "parameters": {
                "organizationId": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "organization/organizations/{organizationId}",
              "response": {
                "$ref": "ServerOrganizationOrganizationMessagesOrganizationMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get_user": {
              "httpMethod": "GET",
              "id": "lumsites.organization.organization.get_user",
              "parameterOrder": [
                "userId"
              ],
              "parameters": {
                "userId": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "organization/users/{userId}",
              "response": {
                "$ref": "ServerOrganizationOrganizationMessagesUserMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list_organizations": {
              "description": "\n        List several organizations based on the request parameters, such as the domain or the slug.\n\n        Ideally, there should be one and only one parameter. If several parameters are received,\n        this function will return a list of oragnization match at least one of them. In other words,\n        the parameters are combined with an OR.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.organization.organization.list_organizations",
              "parameters": {
                "domain": {
                  "location": "query",
                  "type": "string"
                },
                "slug": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "organization/organizations",
              "response": {
                "$ref": "ServerOrganizationOrganizationMessagesOrganizationListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list_user": {
              "httpMethod": "GET",
              "id": "lumsites.organization.organization.list_user",
              "parameters": {
                "email": {
                  "location": "query",
                  "type": "string"
                },
                "providerUserId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "organization/users",
              "response": {
                "$ref": "ServerOrganizationOrganizationMessagesUserListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "provisioning": {
      "resources": {
        "provisioning": {
          "resources": {
            "outOfSync": {
              "methods": {
                "users": {
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.outOfSync.users",
                  "path": "provisioning/outOfSync/users",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "providerExtension": {
              "methods": {
                "delete": {
                  "httpMethod": "DELETE",
                  "id": "lumsites.provisioning.provisioning.providerExtension.delete",
                  "parameterOrder": [
                    "extensionProviderUuid"
                  ],
                  "parameters": {
                    "customerId": {
                      "format": "int64",
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "extensionProviderUuid": {
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "provisioning/provider-extensions/{extensionProviderUuid}",
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "upsert": {
                  "description": "\n        endpoint used to create or update an `Extension` provider.\n        ",
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.providerExtension.upsert",
                  "parameterOrder": [
                    "extensionProviderUuid"
                  ],
                  "parameters": {
                    "extensionProviderUuid": {
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "provisioning/provider-extensions/{extensionProviderUuid}",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesExtensionProviderUpsertRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "scim": {
              "methods": {
                "group": {
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.scim.group",
                  "path": "provisioning/scim/group",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesGroupsCreationRequest",
                    "parameterName": "resource"
                  },
                  "response": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesFeedIdMessage"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              },
              "resources": {
                "group": {
                  "methods": {
                    "name": {
                      "httpMethod": "PUT",
                      "id": "lumsites.provisioning.provisioning.scim.group.name",
                      "path": "provisioning/scim/group/name",
                      "request": {
                        "$ref": "ServerHaussmannProvisioningProvisioningMessagesGroupsRenameRequest",
                        "parameterName": "resource"
                      },
                      "response": {
                        "$ref": "ServerHaussmannProvisioningProvisioningMessagesFeedIdMessage"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/userinfo.email"
                      ]
                    }
                  }
                }
              }
            },
            "userGroupMemberships": {
              "methods": {
                "create": {
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.userGroupMemberships.create",
                  "path": "provisioning/userGroupMemberships",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesUserGroupMembershipsRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "delete": {
                  "httpMethod": "DELETE",
                  "id": "lumsites.provisioning.provisioning.userGroupMemberships.delete",
                  "parameters": {
                    "customerId": {
                      "format": "int64",
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "forceReplace": {
                      "location": "query",
                      "type": "boolean"
                    },
                    "userGroupsData.groupIds": {
                      "location": "query",
                      "repeated": true,
                      "type": "string"
                    },
                    "userGroupsData.operationId": {
                      "location": "query",
                      "type": "string"
                    },
                    "userGroupsData.unifiedProfileId": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "provisioning/userGroupMemberships",
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "users": {
              "methods": {
                "create": {
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.users.create",
                  "path": "provisioning/users",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesUsersCreationRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                },
                "enable": {
                  "httpMethod": "POST",
                  "id": "lumsites.provisioning.provisioning.users.enable",
                  "path": "provisioning/users/enable",
                  "request": {
                    "$ref": "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileRequest",
                    "parameterName": "resource"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "reseller": {
      "methods": {
        "list": {
          "description": "\n        List all resellers.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.reseller.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "reseller/list",
          "response": {
            "$ref": "ServerResellerResellerMessagesResellerListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "customer": {
          "methods": {
            "get": {
              "description": "\n        Get a customer managed by a reseller\n\n        Args:\n            request: the customer id\n\n        Returns:\n            the customer, if allowed.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.reseller.customer.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "reseller/customer/get",
              "response": {
                "$ref": "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List all customers managed by a reseller, if user is allowed\n\n        Args:\n            request: request parameters (cursor and nb results)\n\n        Returns:\n            a list of customers, a cursor and a boolean to know if there are more results to load.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.reseller.customer.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "domain": {
                  "location": "query",
                  "type": "string"
                },
                "lang": {
                  "location": "query",
                  "type": "string"
                },
                "licenseType": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "name": {
                  "location": "query",
                  "type": "string"
                },
                "status": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "reseller/customer/list",
              "response": {
                "$ref": "ServerResellerResellerMessagesResellerCustomerListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        Update customer parameters, is user is a reseller and is allowed to edit customer.\n\n        Args:\n            request: the customer settings\n\n        Returns:\n            the saved customer parameters\n        ",
              "httpMethod": "POST",
              "id": "lumsites.reseller.customer.save",
              "path": "reseller/customer/save",
              "request": {
                "$ref": "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "role": {
      "methods": {
        "check": {
          "description": "\n        Check whether the current user is authorized to perform the specified actions.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.role.check",
          "path": "role/check",
          "request": {
            "$ref": "ServerRoleRoleMessagesRoleCheckRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerRoleRoleMessagesRoleCheckResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a role.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.role.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "role/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a role by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.role.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "role/get",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the roles matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.role.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "role/list",
          "response": {
            "$ref": "ServerRoleRoleMessagesRoleListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a role.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.role.save",
          "path": "role/save",
          "request": {
            "$ref": "Role",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "rpc": {
      "methods": {
        "call": {
          "httpMethod": "POST",
          "id": "lumsites.rpc.call",
          "path": "rpc/call",
          "request": {
            "$ref": "ServerRpcRpcMessagesRpcRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerRpcRpcMessagesRpcResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "sheets": {
      "methods": {
        "list": {
          "description": "\n        Return a list of sheets\n        ",
          "httpMethod": "GET",
          "id": "lumsites.sheets.list",
          "parameters": {
            "fileId": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "provider": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "sheets/list",
          "response": {
            "$ref": "ServerSheetsSheetsMessagesSheetsListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "charts": {
          "methods": {
            "image": {
              "description": "\n        Return a list of charts\n        ",
              "httpMethod": "GET",
              "id": "lumsites.sheets.charts.image",
              "parameters": {
                "chartId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "fileId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "fittingMode": {
                  "location": "query",
                  "type": "string"
                },
                "height": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "sheetId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "width": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "sheets/charts/image",
              "response": {
                "$ref": "ServerSheetsSheetsMessagesSheetsChartsImageResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        Return a list of charts\n        ",
              "httpMethod": "GET",
              "id": "lumsites.sheets.charts.list",
              "parameters": {
                "fileId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "provider": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "sheetId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "sheets/charts/list",
              "response": {
                "$ref": "ServerSheetsSheetsMessagesSheetsChartsListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "social": {
      "resources": {
        "activity": {
          "methods": {
            "list": {
              "description": "\n        List the activities matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.social.activity.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "social/activity/list",
              "request": {
                "$ref": "ServerSocialActivityActivityMessagesActivityGroupRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerSocialActivityActivityMessagesActivityGroupsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "subscription": {
          "methods": {
            "delete": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Delete a subscription.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.social.subscription.delete",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "social/subscription/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "description": "\n        Get a subscription by id.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.social.subscription.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "followingContentKey": {
                  "location": "query",
                  "type": "string"
                },
                "followingUserKey": {
                  "location": "query",
                  "type": "string"
                },
                "instanceKey": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "social/subscription/get",
              "response": {
                "$ref": "Subscription"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the subscriptions matching the specified criteria.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.social.subscription.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "cursor": {
                  "location": "query",
                  "type": "string"
                },
                "followerUserKey": {
                  "location": "query",
                  "type": "string"
                },
                "followingContentKey": {
                  "location": "query",
                  "type": "string"
                },
                "followingContentType": {
                  "location": "query",
                  "repeated": true,
                  "type": "string"
                },
                "followingUserKey": {
                  "location": "query",
                  "type": "string"
                },
                "instanceKey": {
                  "location": "query",
                  "type": "string"
                },
                "maxResults": {
                  "default": "30",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                }
              },
              "path": "social/subscription/list",
              "response": {
                "$ref": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Create or update a subscription.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.social.subscription.save",
              "path": "social/subscription/save",
              "request": {
                "$ref": "Subscription",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Subscription"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "content": {
              "methods": {
                "list": {
                  "description": "\n        List the content followed by the current user.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.social.subscription.content.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "contentType": {
                      "location": "query",
                      "repeated": true,
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "path": "social/subscription/content/list",
                  "response": {
                    "$ref": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionContentsListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "follower": {
              "methods": {
                "list": {
                  "description": "\n        List the users the current user is followed by.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.social.subscription.follower.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "path": "social/subscription/follower/list",
                  "response": {
                    "$ref": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionUsersListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            },
            "following": {
              "methods": {
                "list": {
                  "description": "\n        List the users the current user is following.\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.social.subscription.following.list",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    }
                  },
                  "path": "social/subscription/following/list",
                  "response": {
                    "$ref": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionUsersListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        },
        "user": {
          "methods": {
            "save": {
              "description": "\n        Update social profile of a user.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.social.user.save",
              "path": "social/user/save",
              "request": {
                "$ref": "UserProtoProfileStatus",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "User"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "stockexchange": {
      "methods": {
        "get": {
          "description": "\n        Get a value by symbol.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.stockexchange.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "symbol": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "stockexchange/get",
          "response": {
            "$ref": "StockExchange"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "stream": {
      "methods": {
        "list": {
          "description": "\n        Retrieve several streams with their top content.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.stream.list",
          "parameters": {
            "fields": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "stream/list",
          "request": {
            "$ref": "ServerStreamStreamMessagesListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerStreamStreamMessagesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "configuration": {
          "methods": {
            "delete": {
              "description": "\n        Delete ONE stream configuration.\n        ",
              "httpMethod": "DELETE",
              "id": "lumsites.stream.configuration.delete",
              "parameters": {
                "uid": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "stream/configuration/delete",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "deleteMulti": {
              "description": "\n        Delete streams configurations.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.stream.configuration.deleteMulti",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "stream/configuration/deleteMulti",
              "request": {
                "$ref": "ServerStreamStreamMessagesConfigurationDeleteMultiRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerStreamStreamMessagesConfigurationMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the stream configurations matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.stream.configuration.list",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "stream/configuration/list",
              "request": {
                "$ref": "ServerStreamStreamMessagesConfigurationListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerStreamStreamMessagesConfigurationListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        Save ONE stream configuration.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.stream.configuration.save",
              "path": "stream/configuration/save",
              "request": {
                "$ref": "StreamConf",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "StreamConf"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "saveMulti": {
              "description": "\n        Save streams configurations.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.stream.configuration.saveMulti",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "stream/configuration/saveMulti",
              "request": {
                "$ref": "ServerStreamStreamMessagesConfigurationMessage",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerStreamStreamMessagesConfigurationMessage"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "content": {
          "methods": {
            "list": {
              "description": "\n        Retrieve the content of the specified stream with pagination.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.stream.content.list",
              "parameters": {
                "fields": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "stream/content/list",
              "request": {
                "$ref": "ServerStreamStreamMessagesContentListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerStreamStreamMessagesContentListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "style": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Delete a style.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.style.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "style/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a style configuration by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.style.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "style/get",
          "response": {
            "$ref": "Style"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get_by_instance": {
          "description": "\n        Get the style configured for the specified instance.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.style.get_by_instance",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "instanceId": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "style/get_by_instance",
          "response": {
            "$ref": "ServerStyleStyleMessagesStyleByInstanceResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the style configurations matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.style.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "getAll": {
              "location": "query",
              "type": "boolean"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int64",
              "location": "query",
              "type": "string"
            },
            "type": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "style/list",
          "response": {
            "$ref": "ServerStyleStyleMessagesStyleListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Create or update a style.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.style.save",
          "path": "style/save",
          "request": {
            "$ref": "Style",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Style"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "stylesheet": {
          "methods": {
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        BETA_SUPPORT\n        Save a stylesheet\n        ",
              "httpMethod": "POST",
              "id": "lumsites.style.stylesheet.save",
              "path": "style/stylesheet/save",
              "request": {
                "$ref": "ServerStyleStyleMessagesStyleSheetSaveRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "Style"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "sync": {
      "methods": {
        "users": {
          "httpMethod": "POST",
          "id": "lumsites.sync.users",
          "parameterOrder": [
            "providerUuid"
          ],
          "parameters": {
            "providerUuid": {
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "path": "identity-provider/{providerUuid}/sync/users",
          "request": {
            "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "reports": {
          "methods": {
            "clean": {
              "description": "\n        Clean reports older than 30 days\n        ",
              "httpMethod": "GET",
              "id": "lumsites.sync.reports.clean",
              "path": "sync/reports/clean",
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "get": {
              "httpMethod": "GET",
              "id": "lumsites.sync.reports.get",
              "parameterOrder": [
                "id"
              ],
              "parameters": {
                "id": {
                  "format": "int64",
                  "location": "path",
                  "type": "string"
                }
              },
              "path": "sync/reports/{id}",
              "response": {
                "$ref": "FinalReport"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "user": {
          "methods": {
            "check": {
              "httpMethod": "POST",
              "id": "lumsites.sync.user.check",
              "parameterOrder": [
                "providerUuid"
              ],
              "parameters": {
                "providerUuid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "identity-provider/{providerUuid}/sync/user/check",
              "request": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUserRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesSchemaValidationResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "one": {
              "httpMethod": "POST",
              "id": "lumsites.sync.user.one",
              "parameterOrder": [
                "providerUuid"
              ],
              "parameters": {
                "providerUuid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "identity-provider/{providerUuid}/sync/user",
              "request": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUserRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "FinalReport"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "preview": {
              "httpMethod": "POST",
              "id": "lumsites.sync.user.preview",
              "parameterOrder": [
                "providerUuid"
              ],
              "parameters": {
                "providerUuid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "identity-provider/{providerUuid}/sync/user/preview",
              "request": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUserRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningPreviewUserResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "users": {
          "methods": {
            "file": {
              "httpMethod": "GET",
              "id": "lumsites.sync.users.file",
              "parameterOrder": [
                "providerUuid"
              ],
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "providerUuid": {
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "success": {
                  "default": "/upload",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "identity-provider/{providerUuid}/sync/users/file",
              "response": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesGenerateUrlResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "schema": {
              "httpMethod": "GET",
              "id": "lumsites.sync.users.schema",
              "path": "sync/users/schema",
              "response": {
                "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesJsonSchemaResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          },
          "resources": {
            "file": {
              "methods": {
                "schema": {
                  "httpMethod": "GET",
                  "id": "lumsites.sync.users.file.schema",
                  "parameters": {
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "success": {
                      "default": "/upload",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "sync/users/file/schema",
                  "response": {
                    "$ref": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesGenerateUrlResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "tag": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a tag.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.tag.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "tag/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of tags.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.tag.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "tag/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a tag by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.tag.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "tag/get",
          "response": {
            "$ref": "Tag"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "httpMethod": "GET",
          "id": "lumsites.tag.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "ids": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "kind": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "path": "tag/list",
          "response": {
            "$ref": "ServerTagsTagsMessagesTagListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a tag.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.tag.save",
          "path": "tag/save",
          "request": {
            "$ref": "Tag",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Tag"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "task": {
      "methods": {
        "list": {
          "description": "\n        Return a list of tasks for a specific context (folder)\n        ",
          "httpMethod": "POST",
          "id": "lumsites.task.list",
          "path": "task/list",
          "request": {
            "$ref": "ServerTaskTaskMessagesTaskFromFolderListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerTaskTaskMessagesTaskFromFolderListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "update": {
          "description": "\n        Update a task\n        ",
          "httpMethod": "PATCH",
          "id": "lumsites.task.update",
          "path": "task/update",
          "request": {
            "$ref": "ServerTaskTaskMessagesTaskUpdateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerTaskTaskMessagesTaskUpdateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "list": {
          "methods": {
            "categories": {
              "description": "\n        Return a list of tasks for a specific context\n        ",
              "httpMethod": "POST",
              "id": "lumsites.task.list.categories",
              "path": "task/list/categories",
              "request": {
                "$ref": "ServerTaskTaskMessagesTaskCategoryListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerTaskTaskMessagesTaskCategoryListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "groupFolders": {
              "description": "\n        Return a list of folders for an Office group\n        ",
              "httpMethod": "POST",
              "id": "lumsites.task.list.groupFolders",
              "path": "task/list/groupFolders",
              "request": {
                "$ref": "ServerTaskTaskMessagesTaskGroupFolderListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerTaskTaskMessagesTaskGroupFolderListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "userFolders": {
              "description": "\n        Return a list of folders for current user\n        ",
              "httpMethod": "POST",
              "id": "lumsites.task.list.userFolders",
              "path": "task/list/userFolders",
              "request": {
                "$ref": "ServerTaskTaskMessagesTaskUserFolderListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerTaskTaskMessagesTaskUserFolderListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "userTasks": {
              "description": "\n        Return a list of user's tasks\n        ",
              "httpMethod": "POST",
              "id": "lumsites.task.list.userTasks",
              "path": "task/list/userTasks",
              "request": {
                "$ref": "ServerTaskTaskMessagesTaskListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerTaskTaskMessagesTaskListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "template": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a template.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.template.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "template/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a list of templates.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.template.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "template/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a template by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.template.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "template/get",
          "response": {
            "$ref": "Template"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List the templates matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.template.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "contentType": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "customContentType": {
              "location": "query",
              "type": "string"
            },
            "herited": {
              "default": "True",
              "location": "query",
              "type": "boolean"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "properties": {
              "location": "query",
              "type": "string"
            },
            "visibleInheritedOnly": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "template/list",
          "response": {
            "$ref": "ServerTemplateTemplateMessagesTemplateListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a template.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.template.save",
          "path": "template/save",
          "request": {
            "$ref": "Template",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Template"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "saveMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a list of templates.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.template.saveMulti",
          "path": "template/saveMulti",
          "request": {
            "$ref": "ServerTemplateTemplateMessagesSaveTemplateMultiRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerTemplateTemplateMessagesTemplateListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "termsandconditions": {
      "methods": {
        "get": {
          "description": "\n        Get the terms & conditions defined for a platform.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.termsandconditions.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "customerId": {
              "location": "query",
              "type": "string"
            },
            "status": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "termsandconditions/get",
          "response": {
            "$ref": "ServerTermsAndConditionsTermsAndConditionsMessagesTermsAndConditionsGetResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "reset": {
          "description": "\n        Reset the terms & conditions defined for a platform.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.termsandconditions.reset",
          "path": "termsandconditions/reset",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        Update the terms & conditions defined for a platform.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.termsandconditions.save",
          "path": "termsandconditions/save",
          "request": {
            "$ref": "TermsAndConditionsProtoDescriptionRedirectUrlStatus",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "TermsAndConditions"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "translate": {
      "methods": {
        "get": {
          "httpMethod": "POST",
          "id": "lumsites.translate.get",
          "path": "translate/get",
          "request": {
            "$ref": "ServerTranslateTranslateMessagesTranslateRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerTranslateTranslateMessagesTranslateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "tutorial": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a tutorial.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.tutorial.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "tutorial/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a tutorial by id.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.tutorial.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "tutorial/get",
          "response": {
            "$ref": "Tutorial"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the tutorials matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.tutorial.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "name": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "tutorial/list",
          "response": {
            "$ref": "ServerTutorialTutorialMessagesTutorialListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a tutorial.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.tutorial.save",
          "path": "tutorial/save",
          "request": {
            "$ref": "Tutorial",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Tutorial"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "user": {
      "methods": {
        "deleteMulti": {
          "description": "\n        Delete (status \"deleted\" and obfuscate sensitive informations) multiple users.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.user.deleteMulti",
          "path": "user/deleteMulti",
          "request": {
            "$ref": "ServerUserUserMessagesUserDeleteMultiRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "follow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Follow a user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.user.follow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            }
          },
          "path": "user/{id}/follow",
          "response": {
            "$ref": "Subscription"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a user from its email.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.user.get",
          "parameters": {
            "email": {
              "location": "query",
              "type": "string"
            },
            "employeeId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "user/get",
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "getToken": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a token for a user.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.user.getToken",
          "parameters": {
            "customerId": {
              "location": "query",
              "type": "string"
            },
            "email": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "user/getToken",
          "response": {
            "$ref": "ServerUserUserMessagesTokenResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "hasacceptedTerms": {
          "httpMethod": "GET",
          "id": "lumsites.user.hasacceptedTerms",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "hasAccepted": {
              "location": "query",
              "required": true,
              "type": "boolean"
            }
          },
          "path": "user/hasacceptedTerms",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "idpAccessToken": {
          "description": "\n        Get the cloud access tokens of the connected user.\n        Args:\n            UserCloudAccessTokensRequest (UserCloudAccessTokensRequest): The request information for the token.\n                If the user is of provider type Microsoft, the fields are ignored. If the user is Google then you must\n                specify the api, scopes and the version of the API you are accessing.\n        Returns:\n            UserCloudAccessTokensResponse (UserCloudAccessTokensResponse): The access token required to make\n            the call.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.user.idpAccessToken",
          "path": "user/idpAccessToken",
          "request": {
            "$ref": "ServerUserUserMessagesUserCloudAccessTokenRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerUserUserMessagesUserCloudAccessTokenResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the users matching the specified criteria.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.user.list",
          "parameters": {
            "action": {
              "enum": [
                "PAGE_READ",
                "PAGE_EDIT",
                "PAGE_DELETE",
                "NEWS_READ",
                "NEWS_EDIT",
                "NEWS_DELETE",
                "PAGE_ARCHIVE",
                "PAGE_PUBLISH",
                "NEWS_PUBLISH",
                "METADATA_EDIT",
                "METADATA_DELETE",
                "ROLE_READ",
                "ROLE_EDIT",
                "ROLE_DELETE",
                "NEWS_LIST_READ",
                "NEWS_LIST_EDIT",
                "NEWS_LIST_DELETE",
                "DIRECTORY_READ",
                "DIRECTORY_EDIT",
                "DIRECTORY_DELETE",
                "MENU_READ",
                "MENU_EDIT",
                "MENU_DELETE",
                "TEMPLATE_READ",
                "TEMPLATE_EDIT",
                "TEMPLATE_DELETE",
                "INSTANCE_EDIT",
                "INSTANCE_DELETE",
                "FEED_EDIT",
                "FEED_DELETE",
                "MEDIA_EDIT",
                "MEDIA_DELETE",
                "USER_READ",
                "USER_EDIT",
                "USER_DELETE",
                "RESELLER_READ",
                "RESELLER_EDIT",
                "POST_EDIT",
                "GROUP_EDIT",
                "DIRECTORY_ENTRY_FAVORITES_EDIT",
                "NEWSLETTER_READ",
                "NEWSLETTER_EDIT",
                "NEWSLETTER_DELETE",
                "CUSTOM_CONTENT_TYPE_EDIT",
                "CUSTOM_CONTENT_TYPE_DELETE",
                "CUSTOM_CONTENT_READ",
                "CUSTOM_CONTENT_PUBLISH",
                "CUSTOM_CONTENT_EDIT",
                "CUSTOM_CONTENT_DELETE",
                "CUSTOM_LIST_READ",
                "CUSTOM_LIST_EDIT",
                "CUSTOM_LIST_DELETE",
                "CUSTOM_LIST_PUBLISH",
                "COMMUNITY_READ",
                "COMMUNITY_EDIT",
                "COMMUNITY_DELETE",
                "USER_DIRECTORY_READ",
                "USER_DIRECTORY_EDIT",
                "USER_DIRECTORY_DELETE",
                "CUSTOM_READ",
                "CUSTOM_EDIT",
                "CUSTOM_DELETE",
                "TUTORIAL_READ",
                "TUTORIAL_EDIT",
                "TUTORIAL_DELETE",
                "POST_READ",
                "POST_DELETE",
                "CUSTOM_CONTENT_ARCHIVE",
                "MENU_DROP",
                "STYLE_READ",
                "STYLE_EDIT",
                "STYLE_DELETE",
                "GLOBAL_WIDGET_EDIT",
                "TARGET_EDIT",
                "DIRECTORY_ENTRY_READ",
                "DIRECTORY_ENTRY_EDIT",
                "DIRECTORY_ENTRY_DELETE",
                "COMMUNITY_PUBLISH",
                "ANALYTICS_READ",
                "COMMUNITY_CREATE"
              ],
              "enumDescriptions": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "location": "query",
              "type": "string"
            },
            "callId": {
              "location": "query",
              "type": "string"
            },
            "currentInstance": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "email": {
              "location": "query",
              "type": "string"
            },
            "feeds": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "firstName": {
              "location": "query",
              "type": "string"
            },
            "ids": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "instance": {
              "location": "query",
              "type": "string"
            },
            "lang": {
              "location": "query",
              "type": "string"
            },
            "lastName": {
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "query": {
              "location": "query",
              "type": "string"
            },
            "queryFields": {
              "location": "query",
              "repeated": true,
              "type": "string"
            },
            "reactedEntityKey": {
              "location": "query",
              "type": "string"
            },
            "reactedEntityKind": {
              "location": "query",
              "type": "string"
            },
            "registeredSince": {
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "showHidden": {
              "location": "query",
              "type": "boolean"
            },
            "sortOrder": {
              "location": "query",
              "type": "string"
            },
            "status": {
              "location": "query",
              "type": "string"
            },
            "types": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "user/list",
          "response": {
            "$ref": "ServerUserUserMessagesUserListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a user into the datastore.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.user.save",
          "path": "user/save",
          "request": {
            "$ref": "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordRePasswordIdentityProviderExperimental",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "User"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "unfollow": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Unfollow a user.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.user.unfollow",
          "parameterOrder": [
            "id"
          ],
          "parameters": {
            "id": {
              "location": "path",
              "type": "string"
            }
          },
          "path": "user/{id}/unfollow",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "device": {
          "methods": {
            "init": {
              "httpMethod": "GET",
              "id": "lumsites.user.device.init",
              "parameters": {
                "deviceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "platform": {
                  "enum": [
                    "ANDROID",
                    "IOS"
                  ],
                  "enumDescriptions": [
                    "",
                    ""
                  ],
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "user/device/init",
              "response": {
                "$ref": "User"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "directory": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a user by email.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.directory.get",
              "parameters": {
                "contentId": {
                  "location": "query",
                  "type": "string"
                },
                "email": {
                  "location": "query",
                  "type": "string"
                },
                "uid": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "user/directory/get",
              "response": {
                "$ref": "User"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "list": {
              "description": "\n        List the users matching the specified criteria.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.user.directory.list",
              "path": "user/directory/list",
              "request": {
                "$ref": "ServerUserUserMessagesUserDirectoryListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerUserUserMessagesUserListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a user.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.user.directory.save",
              "path": "user/directory/save",
              "request": {
                "$ref": "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordContentId",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "User"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "favorite": {
          "methods": {
            "add": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Add a directory entry as favorite for the current user.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.user.favorite.add",
              "path": "user/favorite/add",
              "request": {
                "$ref": "ServerCommonEndpointMessagesDatastoreKey",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "DirectoryEntry"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "main_directory": {
          "methods": {
            "get_fields": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a user by email.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.main_directory.get_fields",
              "path": "user/main-directory/fields",
              "response": {
                "$ref": "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldsResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "notificationpreferences": {
          "methods": {
            "get": {
              "description": "\n        Get notification preferences of current user.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.notificationpreferences.get",
              "path": "user/notification/preferences/get",
              "response": {
                "$ref": "NotificationPreferences"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        Update notification preferences of current user.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.user.notificationpreferences.save",
              "path": "user/notification/preferences/save",
              "request": {
                "$ref": "NotificationPreferences",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "NotificationPreferences"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "organizationchart": {
          "methods": {
            "get": {
              "description": "\n        Get the organization chart centered on the specified user.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.organizationchart.get",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "content": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                },
                "email": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "user/organizationchart/get",
              "response": {
                "$ref": "ServerUserOrganizationChartOrganizationChartMessagesOrganizationChartResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "role": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a user's roles.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.role.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                },
                "fields": {
                  "location": "query",
                  "type": "string"
                },
                "instanceId": {
                  "location": "query",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "user/role/list",
              "response": {
                "$ref": "ServerRoleRoleMessagesRoleListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "service": {
          "methods": {
            "getToken": {
              "description": "\n        Get a token for a user.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.service.getToken",
              "path": "user/service/getToken",
              "response": {
                "$ref": "ServerUserUserMessagesTokenResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "settings": {
          "methods": {
            "get": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get settings of current user.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.user.settings.get",
              "path": "user/settings/get",
              "response": {
                "$ref": "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            },
            "save": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Update profile settings of current user.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.user.settings.save",
              "path": "user/settings/save",
              "request": {
                "$ref": "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettingsPassword",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettings"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "usercontent": {
      "methods": {
        "get": {
          "description": "\n        Get values associated to a piece of content by the connected user.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.usercontent.get",
          "parameters": {
            "content": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "usercontent/get",
          "response": {
            "$ref": "UserContent"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        Save values associated to a piece of content for the connected user.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.usercontent.save",
          "path": "usercontent/save",
          "request": {
            "$ref": "UserContent",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "UserContent"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "weather": {
      "methods": {
        "get": {
          "description": "\n        Get a weather for a specific address\n        ",
          "httpMethod": "GET",
          "id": "lumsites.weather.get",
          "parameters": {
            "address": {
              "location": "query",
              "type": "string"
            },
            "callId": {
              "location": "query",
              "type": "string"
            },
            "defaultAddress": {
              "location": "query",
              "type": "string"
            },
            "unit": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "weather/get",
          "response": {
            "$ref": "ServerWeatherWeatherMessagesWeatherResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "webhook": {
      "methods": {
        "activate": {
          "description": "\n        Create or update a webhook.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.activate",
          "path": "webhook/activate",
          "request": {
            "$ref": "ServerWebhookWebhookMessagesWebhookActivateRequest",
            "parameterName": "resource"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "delete": {
          "description": "\n        Delete a webhook.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.webhook.delete",
          "parameters": {
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "webhook/delete",
          "response": {
            "$ref": "Webhook"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "disable": {
          "description": "\n        Disable a webhook.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.disable",
          "path": "webhook/disable",
          "request": {
            "$ref": "WebhookProtoUid",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Webhook"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "enable": {
          "description": "\n        Enable a webhook.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.enable",
          "path": "webhook/enable",
          "request": {
            "$ref": "WebhookProtoUid",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Webhook"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a webhook.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.webhook.get",
          "parameters": {
            "uid": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "webhook/get",
          "response": {
            "$ref": "Webhook"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        List the webhooks.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.list",
          "path": "webhook/list",
          "request": {
            "$ref": "ServerWebhookWebhookMessagesWebhookListRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerWebhookWebhookMessagesWebhookListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        Create or update a webhook.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.save",
          "parameters": {
            "launchTest": {
              "location": "query",
              "type": "boolean"
            }
          },
          "path": "webhook/save",
          "request": {
            "$ref": "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatus",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatusCreatedAtUpdatedAtSecurityToken"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "test": {
          "description": "\n        Do or re-do the handshake procedure for a webhook.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.webhook.test",
          "path": "webhook/test",
          "request": {
            "$ref": "WebhookProtoUid",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatusCreatedAtUpdatedAtSecurityToken"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    },
    "widget": {
      "methods": {
        "delete": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete a widget.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.widget.delete",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "widget/delete",
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "deleteMulti": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Delete multiple widgets.\n        ",
          "httpMethod": "DELETE",
          "id": "lumsites.widget.deleteMulti",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "path": "widget/deleteMulti",
          "response": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyList"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a widget.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.widget.get",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "fields": {
              "location": "query",
              "type": "string"
            },
            "uid": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "widget/get",
          "response": {
            "$ref": "Widget"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "list": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get a list of widgets.\n        ",
          "httpMethod": "GET",
          "id": "lumsites.widget.list",
          "parameters": {
            "callId": {
              "location": "query",
              "type": "string"
            },
            "cursor": {
              "location": "query",
              "type": "string"
            },
            "instance": {
              "location": "query",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "default": "30",
              "format": "int32",
              "location": "query",
              "type": "integer"
            },
            "title": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "widget/list",
          "response": {
            "$ref": "ServerWidgetWidgetMessagesWidgetListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "save": {
          "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Save a widget.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.widget.save",
          "path": "widget/save",
          "request": {
            "$ref": "Widget",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "Widget"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "files": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List files from a widget.\n        ",
              "httpMethod": "POST",
              "id": "lumsites.widget.files.list",
              "path": "widget/files/list",
              "request": {
                "$ref": "ServerWidgetFilesFilesMessagesWidgetFilesListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDocumentDocumentMessagesDocumentListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "image_gallery": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        Get images from image gallery widget\n        ",
              "httpMethod": "POST",
              "id": "lumsites.widget.image_gallery.list",
              "path": "widget/image_gallery/list",
              "request": {
                "$ref": "ServerWidgetFilesFilesMessagesWidgetFilesListRequest",
                "parameterName": "resource"
              },
              "response": {
                "$ref": "ServerDocumentDocumentMessagesDocumentListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        },
        "type": {
          "methods": {
            "list": {
              "description": "\n        INCLUDE_IN_OPENAPI_SPEC\n        List the widget types.\n        ",
              "httpMethod": "GET",
              "id": "lumsites.widget.type.list",
              "parameters": {
                "callId": {
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "widget/type/list",
              "response": {
                "$ref": "ServerWidgetWidgetMessagesWidgetTypeListResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/userinfo.email"
              ]
            }
          }
        }
      }
    },
    "workspace": {
      "methods": {
        "chat": {
          "description": "\n        Get a workspace chat informations\n        ",
          "httpMethod": "GET",
          "id": "lumsites.workspace.chat",
          "parameters": {
            "id": {
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "path": "workspace/chat",
          "response": {
            "$ref": "ServerWorkspaceWorkspaceMessagesChatResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        },
        "get": {
          "description": "\n        Get a workspace\n        ",
          "httpMethod": "GET",
          "id": "lumsites.workspace.get",
          "parameters": {
            "workspaceId": {
              "location": "query",
              "type": "string"
            }
          },
          "path": "workspace/get",
          "response": {
            "$ref": "Workspace"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      },
      "resources": {
        "calendar": {
          "resources": {
            "event": {
              "methods": {
                "list": {
                  "description": "\n        Get a workspace calendar's events\n        ",
                  "httpMethod": "GET",
                  "id": "lumsites.workspace.calendar.event.list",
                  "parameters": {
                    "calendarId": {
                      "location": "query",
                      "type": "string"
                    },
                    "callId": {
                      "location": "query",
                      "type": "string"
                    },
                    "cursor": {
                      "location": "query",
                      "type": "string"
                    },
                    "endDate": {
                      "location": "query",
                      "type": "string"
                    },
                    "id": {
                      "location": "query",
                      "required": true,
                      "type": "string"
                    },
                    "maxResults": {
                      "default": "30",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "query": {
                      "location": "query",
                      "type": "string"
                    },
                    "startDate": {
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "workspace/calendar/event/list",
                  "response": {
                    "$ref": "ServerCalendarCalendarMessagesCalendarEventListResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/userinfo.email"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "zendesk": {
      "methods": {
        "search": {
          "description": "\n        Search through Zendesk items.\n        ",
          "httpMethod": "POST",
          "id": "lumsites.zendesk.search",
          "path": "zendesk/search",
          "request": {
            "$ref": "ServerIntegrationZendeskZendeskMessagesZendeskSearchRequest",
            "parameterName": "resource"
          },
          "response": {
            "$ref": "ServerIntegrationIntegrationMessagesIntegrationSearchResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/userinfo.email"
          ]
        }
      }
    }
  },
  "rootUrl": "https://sites.lumapps.com/_ah/api/",
  "schemas": {
    "Activity": {
      "id": "Activity",
      "properties": {
        "action": {
          "type": "string"
        },
        "commentDetails": {
          "type": "string"
        },
        "commentId": {
          "type": "string"
        },
        "contentDetails": {
          "type": "string"
        },
        "contentKey": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByDetails": {
          "type": "string"
        },
        "customerKey": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "forUser": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceKey": {
          "type": "string"
        },
        "parentContent": {
          "$ref": "ActivityContent"
        },
        "parentContentDetails": {
          "type": "string"
        },
        "parentContentKey": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "userDetails": {
          "type": "string"
        },
        "userKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ActivityContent": {
      "id": "ActivityContent",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AllRights": {
      "id": "AllRights",
      "properties": {
        "groupIdentifier": {
          "type": "string"
        },
        "open": {
          "type": "string"
        },
        "readOnly": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AttachedLink": {
      "id": "AttachedLink",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lang": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "resourceThumbnailId": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "thumbnailIndex": {
          "format": "int64",
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Authorization": {
      "id": "Authorization",
      "properties": {
        "actions": {
          "items": {
            "$ref": "AuthorizationAction"
          },
          "type": "array"
        },
        "canEditOnlyOwnContent": {
          "type": "boolean"
        },
        "feeds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "navigationUuids": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizationAction": {
      "id": "AuthorizationAction",
      "properties": {
        "customContentType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Calendar": {
      "id": "Calendar",
      "properties": {
        "apiId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Chat": {
      "id": "Chat",
      "properties": {
        "chanId": {
          "type": "string"
        },
        "chatId": {
          "type": "string"
        },
        "chatName": {
          "type": "string"
        },
        "chatProvider": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Comment": {
      "id": "Comment",
      "properties": {
        "answersNumber": {
          "type": "string"
        },
        "authorProperties": {
          "type": "string"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canHide": {
          "type": "boolean"
        },
        "canMarkRelevant": {
          "type": "boolean"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "files": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "images": {
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        },
        "instance": {
          "type": "string"
        },
        "liked": {
          "type": "boolean"
        },
        "likes": {
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "AttachedLink"
          },
          "type": "array"
        },
        "markedAsRelevant": {
          "format": "int32",
          "type": "integer"
        },
        "mentions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mentionsDetails": {
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "mentionsFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parent": {
          "type": "string"
        },
        "reportDetails": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Community": {
      "id": "Community",
      "properties": {
        "adminKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "adminsDetails": {
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "analyticsViewSum": {
          "format": "int32",
          "type": "integer"
        },
        "archivers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "author": {
          "type": "string"
        },
        "authorDetails": {
          "type": "string"
        },
        "authorId": {
          "type": "string"
        },
        "calendarId": {
          "type": "string"
        },
        "calendarIdpType": {
          "type": "string"
        },
        "calendarIdpUuid": {
          "type": "string"
        },
        "calendarSettings": {
          "type": "string"
        },
        "canContribute": {
          "type": "boolean"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canFollow": {
          "type": "boolean"
        },
        "canMarkRelevant": {
          "type": "boolean"
        },
        "canPin": {
          "type": "boolean"
        },
        "canReadDescription": {
          "type": "boolean"
        },
        "canReadPosts": {
          "type": "boolean"
        },
        "canRequestAccess": {
          "type": "boolean"
        },
        "canonicalUrl": {
          "type": "string"
        },
        "chat": {
          "$ref": "Chat"
        },
        "chatProvider": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "communityFeedKey": {
          "type": "string"
        },
        "communityType": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "string"
        },
        "createCalendar": {
          "type": "boolean"
        },
        "createDrive": {
          "type": "boolean"
        },
        "createTeamDrive": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "customContentType": {
          "type": "string"
        },
        "customContentTypeDetails": {
          "type": "string"
        },
        "customContentTypeTags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customer": {
          "type": "string"
        },
        "deleters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "driveFolder": {
          "$ref": "DriveFolder"
        },
        "editors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "externalKey": {
          "type": "string"
        },
        "featuredEndDate": {
          "type": "string"
        },
        "featuredFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "featuredStartDate": {
          "type": "string"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "following": {
          "type": "boolean"
        },
        "fromTemplate": {
          "type": "string"
        },
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "groups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hasArticlesEnabled": {
          "type": "boolean"
        },
        "hasCalendarId": {
          "type": "boolean"
        },
        "hasChat": {
          "type": "boolean"
        },
        "hasCommentWidget": {
          "type": "boolean"
        },
        "hasDriveFolder": {
          "type": "boolean"
        },
        "hasEventsEnabled": {
          "type": "boolean"
        },
        "hasPostsEnabled": {
          "default": "True",
          "type": "boolean"
        },
        "hasRelevantComment": {
          "type": "boolean"
        },
        "hasSpaceFeedEnabled": {
          "type": "boolean"
        },
        "header": {
          "type": "string"
        },
        "headerDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isCustomizableLayout": {
          "type": "boolean"
        },
        "isDefaultContentList": {
          "type": "boolean"
        },
        "isDefaultUserDirectory": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        },
        "isHomepage": {
          "type": "boolean"
        },
        "isNavItem": {
          "type": "boolean"
        },
        "isRequestPending": {
          "type": "boolean"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "lastRevision": {
          "$ref": "ContentLastRevision"
        },
        "liked": {
          "type": "boolean"
        },
        "likes": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "mediaThumbnail": {
          "$ref": "Media"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notificationsEnabled": {
          "type": "boolean"
        },
        "notifyAuthor": {
          "type": "boolean"
        },
        "notifyFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notifyUsers": {
          "type": "boolean"
        },
        "parentCustomContentType": {
          "type": "string"
        },
        "postStatuses": {
          "items": {
            "$ref": "PostStatus"
          },
          "type": "array"
        },
        "postTypes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privacy": {
          "default": "restricted",
          "type": "string"
        },
        "properties": {
          "default": "{'publicationError': None}",
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "publicationDate": {
          "type": "string"
        },
        "publishers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relevantComment": {
          "type": "string"
        },
        "relevantCommentDetails": {
          "$ref": "Comment"
        },
        "renderingType": {
          "default": "community",
          "type": "string"
        },
        "reportDetails": {
          "type": "string"
        },
        "securedRepository": {
          "type": "boolean"
        },
        "shareable": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "subscribedFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subscription": {
          "$ref": "Subscription"
        },
        "subtitle": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tagsDetails": {
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "tagz": {
          "items": {
            "$ref": "Tagz"
          },
          "type": "array"
        },
        "template": {
          "$ref": "Template"
        },
        "templateType": {
          "type": "string"
        },
        "templates": {
          "items": {
            "$ref": "Template"
          },
          "type": "array"
        },
        "thumbnail": {
          "type": "string"
        },
        "thumbnailBlobkey": {
          "type": "string"
        },
        "thumbnailDisplayType": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByDetails": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "useChat": {
          "type": "boolean"
        },
        "userContent": {
          "$ref": "UserContent"
        },
        "userKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usersDetails": {
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "format": "double",
          "type": "number"
        },
        "workspace": {
          "type": "string"
        },
        "writer": {
          "type": "string"
        },
        "writerDetails": {
          "type": "string"
        },
        "writerId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommunityRequest": {
      "id": "CommunityRequest",
      "properties": {
        "adminMessage": {
          "type": "string"
        },
        "communityKey": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customerKey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceKey": {
          "type": "string"
        },
        "requestStatus": {
          "default": "pending",
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "userDetails": {
          "type": "string"
        },
        "userKey": {
          "type": "string"
        },
        "userMessage": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommunitySettings": {
      "id": "CommunitySettings",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "driveFolderNameMode": {
          "type": "string"
        },
        "driveFolderNamePattern": {
          "type": "string"
        },
        "googleDriveSettings": {
          "$ref": "GoogleDriveSettings"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "microsoftDriveSettings": {
          "$ref": "MicrosoftDriveSettings"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommunityTemplate": {
      "id": "CommunityTemplate",
      "properties": {
        "authorDetails": {
          "type": "string"
        },
        "authorId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "postStatuses": {
          "items": {
            "$ref": "PostStatus"
          },
          "type": "array"
        },
        "postTypes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privacy": {
          "default": "restricted",
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tagsDetails": {
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "templates": {
          "items": {
            "$ref": "Template"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedByDetails": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Content": {
      "id": "Content",
      "properties": {
        "analyticsViewSum": {
          "format": "int32",
          "type": "integer"
        },
        "archivers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "author": {
          "type": "string"
        },
        "authorDetails": {
          "type": "string"
        },
        "authorId": {
          "type": "string"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canMarkRelevant": {
          "type": "boolean"
        },
        "canonicalUrl": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customContentType": {
          "type": "string"
        },
        "customContentTypeDetails": {
          "type": "string"
        },
        "customContentTypeTags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customer": {
          "type": "string"
        },
        "deleters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "editors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "externalKey": {
          "type": "string"
        },
        "featuredEndDate": {
          "type": "string"
        },
        "featuredFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "featuredStartDate": {
          "type": "string"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "following": {
          "type": "boolean"
        },
        "hasCommentWidget": {
          "type": "boolean"
        },
        "hasRelevantComment": {
          "type": "boolean"
        },
        "header": {
          "type": "string"
        },
        "headerDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isCustomizableLayout": {
          "type": "boolean"
        },
        "isDefaultContentList": {
          "type": "boolean"
        },
        "isDefaultUserDirectory": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        },
        "isHomepage": {
          "type": "boolean"
        },
        "isNavItem": {
          "type": "boolean"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "lastRevision": {
          "$ref": "ContentLastRevision"
        },
        "liked": {
          "type": "boolean"
        },
        "likes": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "mediaThumbnail": {
          "$ref": "Media"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notificationsEnabled": {
          "type": "boolean"
        },
        "notifyAuthor": {
          "type": "boolean"
        },
        "notifyFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notifyUsers": {
          "type": "boolean"
        },
        "parentCustomContentType": {
          "type": "string"
        },
        "properties": {
          "default": "{'publicationError': None}",
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "publicationDate": {
          "type": "string"
        },
        "publishers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relevantComment": {
          "type": "string"
        },
        "relevantCommentDetails": {
          "$ref": "Comment"
        },
        "reportDetails": {
          "type": "string"
        },
        "shareable": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "subscribedFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subscription": {
          "$ref": "Subscription"
        },
        "subtitle": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tagsDetails": {
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "tagz": {
          "items": {
            "$ref": "Tagz"
          },
          "type": "array"
        },
        "template": {
          "$ref": "Template"
        },
        "thumbnail": {
          "type": "string"
        },
        "thumbnailBlobkey": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByDetails": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userContent": {
          "$ref": "UserContent"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "format": "double",
          "type": "number"
        },
        "writer": {
          "type": "string"
        },
        "writerDetails": {
          "type": "string"
        },
        "writerId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentLastRevision": {
      "id": "ContentLastRevision",
      "properties": {
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ContentMenuDeletedListItem": {
      "id": "ContentMenuDeletedListItem",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentMenuList": {
      "id": "ContentMenuList",
      "properties": {
        "deleted": {
          "items": {
            "$ref": "ContentMenuDeletedListItem"
          },
          "type": "array"
        },
        "items": {
          "items": {
            "$ref": "ContentMenuListItem"
          },
          "type": "array"
        },
        "lang": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentMenuListItem": {
      "id": "ContentMenuListItem",
      "properties": {
        "children": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "color": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "hideChildren": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isNavItem": {
          "type": "boolean"
        },
        "link": {
          "type": "string"
        },
        "menuTitle": {
          "type": "string"
        },
        "newTab": {
          "type": "boolean"
        },
        "parentId": {
          "type": "string"
        },
        "parentUuid": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "slugFull": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ContentRevision": {
      "id": "ContentRevision",
      "properties": {
        "content": {
          "$ref": "Content"
        },
        "contentKey": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "default": "ARCHIVE",
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ContentRevisionProtoIdUidContentKeyVersionStatusCreatedAtCreatedByCreatedByDetails": {
      "id": "ContentRevisionProtoIdUidContentKeyVersionStatusCreatedAtCreatedByCreatedByDetails",
      "properties": {
        "contentKey": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "default": "ARCHIVE",
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ContributorAndManagerRights": {
      "id": "ContributorAndManagerRights",
      "properties": {
        "open": {
          "type": "string"
        },
        "readOnly": {
          "type": "string"
        },
        "restricted": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CropInfo": {
      "id": "CropInfo",
      "properties": {
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "rotate": {
          "format": "double",
          "type": "number"
        },
        "scaleX": {
          "format": "double",
          "type": "number"
        },
        "scaleY": {
          "format": "double",
          "type": "number"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        },
        "x": {
          "format": "int32",
          "type": "integer"
        },
        "y": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CuratedStream": {
      "id": "CuratedStream",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customContentTypes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomContentType": {
      "id": "CustomContentType",
      "properties": {
        "createFromScratchLocked": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "endDateDelta": {
          "format": "int32",
          "type": "integer"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "hasFeaturedEndDate": {
          "type": "boolean"
        },
        "hasFeaturedStartDate": {
          "type": "boolean"
        },
        "heritable": {
          "type": "boolean"
        },
        "heritableLocked": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isEndDateMandatory": {
          "type": "boolean"
        },
        "isWorkflowEnabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "notifyContributors": {
          "type": "boolean"
        },
        "parentCustomContentType": {
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "CustomContentTypeTag"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "workflowManagers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CustomContentTypeTag": {
      "id": "CustomContentTypeTag",
      "properties": {
        "functionalInnerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomTechnicalName": {
      "id": "CustomTechnicalName",
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomTechnicalNameCollection": {
      "id": "CustomTechnicalNameCollection",
      "properties": {
        "items": {
          "items": {
            "$ref": "CustomTechnicalName"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Customer": {
      "id": "Customer",
      "properties": {
        "account": {
          "type": "string"
        },
        "addDirectoryUserAllowed": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "adminEmail": {
          "type": "string"
        },
        "adminPassword": {
          "type": "string"
        },
        "cellUrl": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "clientIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "configurations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contactEmail": {
          "type": "string"
        },
        "contactFirstName": {
          "type": "string"
        },
        "contactLastName": {
          "type": "string"
        },
        "contactPhone": {
          "type": "string"
        },
        "cookieDuration": {
          "format": "int32",
          "type": "integer"
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "curatedStream": {
          "$ref": "CuratedStream"
        },
        "customerId": {
          "type": "string"
        },
        "defaultHosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultInstance": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "enabledFeatures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludedFeatures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalAccounts": {
          "type": "boolean"
        },
        "fax": {
          "type": "string"
        },
        "featurePackages": {
          "items": {
            "$ref": "FeaturePackage"
          },
          "type": "array"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "feedAll": {
          "$ref": "Feed"
        },
        "feedPublic": {
          "$ref": "Feed"
        },
        "googleCustomer": {
          "type": "boolean"
        },
        "hasLiveWebhooks": {
          "type": "boolean"
        },
        "hasTermsAndConditions": {
          "type": "boolean"
        },
        "hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "httpsOnly": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identityProviders": {
          "items": {
            "$ref": "CustomerIdentityProvider"
          },
          "type": "array"
        },
        "isReseller": {
          "type": "boolean"
        },
        "licenseExpirationDate": {
          "type": "string"
        },
        "licenseNumber": {
          "format": "int32",
          "type": "integer"
        },
        "loginGoogleOnly": {
          "type": "boolean"
        },
        "loginMethods": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mobileCustomization": {
          "$ref": "MobileCustomization"
        },
        "mobileGoogleAnalyticsID": {
          "type": "string"
        },
        "mobileInstanceKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mobileLoginConfiguration": {
          "$ref": "MobileLoginConfiguration"
        },
        "mobileSearchInstanceKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "nbUsers": {
          "$ref": "CustomerNbUsers"
        },
        "overrides": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "phone": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "publicContentAuthorized": {
          "type": "boolean"
        },
        "registrationAllowed": {
          "type": "boolean"
        },
        "reseller": {
          "type": "string"
        },
        "samlProviders": {
          "items": {
            "$ref": "CustomerSamlProvider"
          },
          "type": "array"
        },
        "sender": {
          "type": "string"
        },
        "siret": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "socialNetworkCapabilities": {
          "items": {
            "$ref": "SocialNetworkCapability"
          },
          "type": "array"
        },
        "socialNetworkSettings": {
          "items": {
            "$ref": "SocialNetworkSetting"
          },
          "type": "array"
        },
        "ssoEnabled": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "synchronizationInProgress": {
          "type": "boolean"
        },
        "synchronized": {
          "type": "boolean"
        },
        "synchronizedAt": {
          "type": "string"
        },
        "themes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token": {
          "type": "string"
        },
        "trustedTester": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userProfilePicture": {
          "type": "string"
        },
        "websiteUrls": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "zip": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerIdentityProvider": {
      "id": "CustomerIdentityProvider",
      "properties": {
        "account": {
          "type": "string"
        },
        "allowJitUserCreation": {
          "type": "boolean"
        },
        "autoMembershipToFeeds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoRedirect": {
          "type": "boolean"
        },
        "buttonColor": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "customerKey": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "federateUserOnEmployeeId": {
          "type": "boolean"
        },
        "hasAuthenticationAtEachLogin": {
          "type": "boolean"
        },
        "hasIntegrationOnly": {
          "type": "boolean"
        },
        "hasLogin": {
          "default": "True",
          "type": "boolean"
        },
        "hasProvisioning": {
          "default": "True",
          "type": "boolean"
        },
        "hasRedirectionToProvider": {
          "type": "boolean"
        },
        "hideBasedOnUserProfile": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "loginDomain": {
          "type": "string"
        },
        "loginVisibility": {
          "type": "string"
        },
        "logo": {
          "$ref": "SamlLogo"
        },
        "name": {
          "type": "string"
        },
        "nbUsers": {
          "format": "int32",
          "type": "integer"
        },
        "oauthClientId": {
          "type": "string"
        },
        "oauthClientSecret": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "providerRole": {
          "type": "string"
        },
        "restrictToInstances": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "samlEntityUrl": {
          "type": "string"
        },
        "samlIdpXmlFile": {
          "$ref": "SamlIdpXmlFile"
        },
        "samlUniqueRef": {
          "type": "string"
        },
        "scimProvider": {
          "type": "string"
        },
        "ssoEnabled": {
          "type": "boolean"
        },
        "syncFromAppOnly": {
          "type": "boolean"
        },
        "synchronizationInProgress": {
          "type": "boolean"
        },
        "synchronized": {
          "default": "True",
          "type": "boolean"
        },
        "synchronizedAt": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "useBookmarks": {
          "type": "boolean"
        },
        "useLoginHint": {
          "default": "True",
          "type": "boolean"
        },
        "userSyncException": {
          "$ref": "UserSyncException"
        },
        "uuid": {
          "type": "string"
        },
        "verifiedDomains": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CustomerNbUsers": {
      "id": "CustomerNbUsers",
      "properties": {
        "external": {
          "format": "int32",
          "type": "integer"
        },
        "google": {
          "format": "int32",
          "type": "integer"
        },
        "googleEnabled": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CustomerProtoIdUidName": {
      "id": "CustomerProtoIdUidName",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages": {
      "id": "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages",
      "properties": {
        "account": {
          "type": "string"
        },
        "configurations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contactEmail": {
          "type": "string"
        },
        "contactFirstName": {
          "type": "string"
        },
        "contactLastName": {
          "type": "string"
        },
        "contactPhone": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "enabledFeatures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludedFeatures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "featurePackages": {
          "items": {
            "$ref": "FeaturePackage"
          },
          "type": "array"
        },
        "features": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "gcs_identity_source": {
          "type": "string"
        },
        "googleCustomer": {
          "type": "boolean"
        },
        "hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "httpsOnly": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identityProviders": {
          "items": {
            "$ref": "CustomerIdentityProvider"
          },
          "type": "array"
        },
        "isReseller": {
          "type": "boolean"
        },
        "licenseExpirationDate": {
          "type": "string"
        },
        "licenseNumber": {
          "format": "int32",
          "type": "integer"
        },
        "licenseType": {
          "type": "string"
        },
        "loginProviderOnly": {
          "type": "string"
        },
        "mobileCustomization": {
          "$ref": "MobileCustomization"
        },
        "mobileGoogleAnalyticsID": {
          "type": "string"
        },
        "mobileInstanceKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mobileLoginConfiguration": {
          "$ref": "MobileLoginConfiguration"
        },
        "mobileSearchInstanceKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "nbUsers": {
          "$ref": "CustomerNbUsers"
        },
        "overrides": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "reseller": {
          "type": "string"
        },
        "resellerData": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "ssoEnabled": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "synchronized": {
          "type": "boolean"
        },
        "themes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "trustedTester": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "viaEmail": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CustomerSamlProvider": {
      "id": "CustomerSamlProvider",
      "properties": {
        "buttonColor": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "logo": {
          "$ref": "SamlLogo"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Directory": {
      "id": "Directory",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "entriesHasMetadata": {
          "type": "boolean"
        },
        "favorites": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "inherited": {
          "type": "boolean"
        },
        "instance": {
          "type": "string"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "DirectoryTag"
          },
          "type": "array"
        },
        "template": {
          "$ref": "Template"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "userLocalEntryFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DirectoryEntry": {
      "id": "DirectoryEntry",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "deletableFromFavorite": {
          "type": "boolean"
        },
        "directory": {
          "type": "string"
        },
        "directoryAllowsFavorites": {
          "type": "boolean"
        },
        "externalKey": {
          "type": "string"
        },
        "favoritesCount": {
          "format": "int32",
          "type": "integer"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isInFavoriteFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "link": {
          "type": "string"
        },
        "markedAsFavorite": {
          "type": "boolean"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "public": {
          "type": "boolean"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tagsDetails": {
          "items": {
            "$ref": "DirectoryTag"
          },
          "type": "array"
        },
        "thumbnail": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtLinkTags": {
      "id": "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtLinkTags",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "thumbnail": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtUserLinkTags": {
      "id": "DirectoryEntryProtoIdNameValuesMetadataStatusDirectoryThumbnailCreatedAtUpdatedAtUserLinkTags",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "thumbnail": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DirectoryTag": {
      "id": "DirectoryTag",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Drive": {
      "id": "Drive",
      "properties": {
        "docPath": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DriveFolder": {
      "id": "DriveFolder",
      "properties": {
        "docPath": {
          "type": "string"
        },
        "driveId": {
          "type": "string"
        },
        "folderId": {
          "type": "string"
        },
        "kind": {
          "default": "drive#file",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "webUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DynamicGroupRule": {
      "id": "DynamicGroupRule",
      "properties": {
        "directoryFieldName": {
          "type": "string"
        },
        "directoryFieldUuid": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Favorite": {
      "id": "Favorite",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "deletable": {
          "default": "True",
          "type": "boolean"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "negative": {
          "type": "boolean"
        },
        "owner": {
          "type": "string"
        },
        "ownerKind": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "target": {
          "type": "string"
        },
        "targetKind": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeaturePackage": {
      "id": "FeaturePackage",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Feed": {
      "id": "Feed",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "groups": {
          "items": {
            "$ref": "FeedGroup"
          },
          "type": "array"
        },
        "heritable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "provisioningMode": {
          "default": "manual",
          "type": "string"
        },
        "status": {
          "default": "enabled",
          "type": "string"
        },
        "synchronizationInProgress": {
          "type": "boolean"
        },
        "synchronized": {
          "type": "boolean"
        },
        "synchronizedAt": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "userDynamicGroupRules": {
          "items": {
            "$ref": "DynamicGroupRule"
          },
          "type": "array"
        },
        "userDynamicGroupTypeOperation": {
          "default": "or",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeedCollection": {
      "id": "FeedCollection",
      "properties": {
        "items": {
          "items": {
            "$ref": "Feed"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeedGroup": {
      "id": "FeedGroup",
      "properties": {
        "group": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FeedType": {
      "id": "FeedType",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "heritable": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "map": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "synchronized": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FilterFields": {
      "id": "FilterFields",
      "properties": {
        "categories": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentTypeIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultInstanceRelatives": {
          "type": "boolean"
        },
        "favoriteSitesOnly": {
          "type": "boolean"
        },
        "featuredOnly": {
          "type": "boolean"
        },
        "highlightedOnly": {
          "type": "boolean"
        },
        "instanceIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadataIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadataList": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "FinalReport": {
      "id": "FinalReport",
      "properties": {
        "callbackUrl": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "endTime": {
          "type": "string"
        },
        "executionTime": {
          "format": "int64",
          "type": "string"
        },
        "failureNumber": {
          "format": "int64",
          "type": "string"
        },
        "groupProvisioningErrors": {
          "items": {
            "$ref": "GroupProvisioningError"
          },
          "type": "array"
        },
        "groupsNotFound": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "providerUuid": {
          "type": "string"
        },
        "provisioningErrors": {
          "items": {
            "$ref": "ProvisioningError"
          },
          "type": "array"
        },
        "reportStatus": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        },
        "successNumber": {
          "format": "int64",
          "type": "string"
        },
        "tasksNumber": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FocalPoint": {
      "id": "FocalPoint",
      "properties": {
        "x": {
          "format": "double",
          "type": "number"
        },
        "y": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GeoPtMessage": {
      "description": "ProtoRPC container for GeoPt instances.\n\n  Attributes:\n    lat: Float; The latitude of the point.\n    lon: Float; The longitude of the point.\n  ",
      "id": "GeoPtMessage",
      "properties": {
        "lat": {
          "format": "double",
          "type": "number"
        },
        "lon": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "GoogleDriveSettings": {
      "id": "GoogleDriveSettings",
      "properties": {
        "contributorRights": {
          "$ref": "ContributorAndManagerRights"
        },
        "driveFolderDestinationPath": {
          "type": "string"
        },
        "driveFolderDestinationType": {
          "type": "string"
        },
        "identityProviderType": {
          "type": "string"
        },
        "managerRights": {
          "$ref": "ContributorAndManagerRights"
        },
        "otherUserGroupRights": {
          "items": {
            "$ref": "OtherUserGroupRights"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Group": {
      "id": "Group",
      "properties": {
        "apiId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GroupProvisioningError": {
      "id": "GroupProvisioningError",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Header": {
      "id": "Header",
      "properties": {
        "author": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "heritable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "images": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instance": {
          "type": "string"
        },
        "media": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InnerUser": {
      "id": "InnerUser",
      "properties": {
        "email": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Instance": {
      "id": "Instance",
      "properties": {
        "configuration": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "customStylesheet": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "defaultContentLists": {
          "type": "string"
        },
        "defaultHeader": {
          "type": "string"
        },
        "defaultLang": {
          "type": "string"
        },
        "defaultUserDirectory": {
          "type": "string"
        },
        "deletableFromFavorite": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "deviceTheme": {
          "type": "string"
        },
        "favicon": {
          "type": "string"
        },
        "footer": {
          "type": "string"
        },
        "googleAnalytics": {
          "type": "string"
        },
        "googleTagManager": {
          "type": "string"
        },
        "head": {
          "type": "string"
        },
        "homePage": {
          "type": "string"
        },
        "hosts": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "isDefaultInstance": {
          "type": "boolean"
        },
        "isInFavoriteFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "logo": {
          "items": {
            "$ref": "InstanceLogo"
          },
          "type": "array"
        },
        "logoUrl": {
          "type": "string"
        },
        "markedAsFavorite": {
          "type": "boolean"
        },
        "menuType": {
          "type": "string"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "override": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "publicContentAuthorized": {
          "type": "boolean"
        },
        "restrictToFeeds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "scripts": {
          "items": {
            "$ref": "ResourceFile"
          },
          "type": "array"
        },
        "siblingCredentials": {
          "$ref": "InstanceSiblingCredentials"
        },
        "slug": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "theme": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InstanceLogo": {
      "id": "InstanceLogo",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "lang": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InstanceSiblingCredentials": {
      "id": "InstanceSiblingCredentials",
      "properties": {
        "canViewChildren": {
          "type": "boolean"
        },
        "canViewParent": {
          "type": "boolean"
        },
        "canViewSameLevel": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Interest": {
      "id": "Interest",
      "properties": {
        "customContentType": {
          "type": "string"
        },
        "customContentTypeDetails": {
          "$ref": "CustomContentType"
        },
        "customContentTypeTags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customContentTypeTagsDetails": {
          "items": {
            "$ref": "CustomContentTypeTag"
          },
          "type": "array"
        },
        "customerId": {
          "type": "string"
        },
        "instanceId": {
          "type": "string"
        },
        "notify": {
          "type": "boolean"
        },
        "orMetadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "orMetadataDetails": {
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        },
        "uid": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Media": {
      "id": "Media",
      "properties": {
        "author": {
          "type": "string"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "communityKey": {
          "type": "string"
        },
        "content": {
          "items": {
            "$ref": "MediaFile"
          },
          "type": "array"
        },
        "contentKey": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "croppedContent": {
          "items": {
            "$ref": "MediaFile"
          },
          "type": "array"
        },
        "customContentTypeKey": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "docPath": {
          "type": "string"
        },
        "hasCroppedContent": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isFolder": {
          "type": "boolean"
        },
        "isShared": {
          "type": "boolean"
        },
        "isStarred": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "override": {
          "type": "string"
        },
        "parentFolder": {
          "type": "string"
        },
        "parentFolderId": {
          "type": "string"
        },
        "path": {
          "items": {
            "$ref": "PathDescriptor"
          },
          "type": "array"
        },
        "properties": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "thumbnail": {
          "type": "string"
        },
        "trashed": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MediaFile": {
      "id": "MediaFile",
      "properties": {
        "cropInfo": {
          "$ref": "CropInfo"
        },
        "downloadUrl": {
          "type": "string"
        },
        "ext": {
          "type": "string"
        },
        "fileHash": {
          "type": "string"
        },
        "fileId": {
          "type": "string"
        },
        "focalPoint": {
          "$ref": "FocalPoint"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "lang": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "InnerUser"
        },
        "servingUrl": {
          "type": "string"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Metadata": {
      "id": "Metadata",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customContentTypes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayInFilter": {
          "type": "boolean"
        },
        "familyKey": {
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "heritable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isVisibleFront": {
          "type": "boolean"
        },
        "multiple": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int64",
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MicrosoftContributorAndManagerRights": {
      "id": "MicrosoftContributorAndManagerRights",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "open": {
          "type": "string"
        },
        "readOnly": {
          "type": "string"
        },
        "restricted": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MicrosoftDriveSettings": {
      "id": "MicrosoftDriveSettings",
      "properties": {
        "allRights": {
          "$ref": "AllRights"
        },
        "contributorRights": {
          "$ref": "MicrosoftContributorAndManagerRights"
        },
        "driveFolderDestinationPath": {
          "type": "string"
        },
        "driveFolderDestinationType": {
          "type": "string"
        },
        "identityProviderType": {
          "type": "string"
        },
        "managerRights": {
          "$ref": "MicrosoftContributorAndManagerRights"
        },
        "otherUserGroupRights": {
          "items": {
            "$ref": "OtherUserGroupRights"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MobileCustomization": {
      "id": "MobileCustomization",
      "properties": {
        "logo": {
          "$ref": "MobileLogo"
        },
        "primaryAsBackground": {
          "type": "boolean"
        },
        "primaryColor": {
          "type": "string"
        },
        "secondaryColor": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileLoginConfiguration": {
      "id": "MobileLoginConfiguration",
      "properties": {
        "linkDocHowToLogin": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MobileLogo": {
      "id": "MobileLogo",
      "properties": {
        "blobKey": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Newsletter": {
      "id": "Newsletter",
      "properties": {
        "analytics": {
          "type": "string"
        },
        "contentBlocks": {
          "items": {
            "$ref": "NewsletterContentBlock"
          },
          "type": "array"
        },
        "contents": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "emails": {
          "type": "string"
        },
        "html": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        },
        "sentAt": {
          "type": "string"
        },
        "testEmails": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "theme": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "urlUuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NewsletterContentBlock": {
      "id": "NewsletterContentBlock",
      "properties": {
        "contents": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "intro": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Notification": {
      "id": "Notification",
      "properties": {
        "actionCount": {
          "format": "int32",
          "type": "integer"
        },
        "channel": {
          "type": "string"
        },
        "commentDetails": {
          "$ref": "Comment"
        },
        "contentDetails": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customType": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "emailStatus": {
          "type": "string"
        },
        "externalKey": {
          "type": "string"
        },
        "externalKeyKind": {
          "default": "Content",
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "group": {
          "type": "boolean"
        },
        "groupDescription": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "hasParentId": {
          "type": "boolean"
        },
        "instanceDetails": {
          "$ref": "Instance"
        },
        "instanceId": {
          "type": "string"
        },
        "isRead": {
          "type": "boolean"
        },
        "link": {
          "type": "string"
        },
        "parentContentDetails": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        },
        "priority": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "readDate": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "recipientId": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "unreadNotificationCount": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NotificationAction": {
      "id": "NotificationAction",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "notificationId": {
          "type": "string"
        },
        "senderDetails": {
          "type": "string"
        },
        "senderId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NotificationPreferences": {
      "id": "NotificationPreferences",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "emailSummaryEnabled": {
          "type": "boolean"
        },
        "emailSummaryTime": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "mobilePushEnabled": {
          "default": "True",
          "type": "boolean"
        },
        "modelVersion": {
          "type": "string"
        },
        "notificationTypeStatus": {
          "items": {
            "$ref": "NotificationTypeStatus"
          },
          "type": "array"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "timeSlot": {
          "$ref": "TimeSlot"
        },
        "timeSlotEnabled": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "vacationMode": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "NotificationTypeStatus": {
      "id": "NotificationTypeStatus",
      "properties": {
        "desktop": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        },
        "hooks": {
          "items": {
            "$ref": "ServerWebhookWebhookMessagesWebhookPreferenceResponse"
          },
          "type": "array"
        },
        "kind": {
          "type": "string"
        },
        "mobile": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OtherUserGroupRights": {
      "id": "OtherUserGroupRights",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "identifiers": {
          "type": "string"
        },
        "open": {
          "type": "string"
        },
        "readOnly": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PathDescriptor": {
      "id": "PathDescriptor",
      "properties": {
        "depth": {
          "format": "int32",
          "type": "integer"
        },
        "folderName": {
          "type": "string"
        },
        "folderUid": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Post": {
      "id": "Post",
      "properties": {
        "alreadyReported": {
          "type": "boolean"
        },
        "analyticsViewSum": {
          "format": "int32",
          "type": "integer"
        },
        "archivers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "attachmentsCount": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "authorDetails": {
          "type": "string"
        },
        "authorId": {
          "type": "string"
        },
        "calendarEventId": {
          "type": "string"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canMarkRelevant": {
          "type": "boolean"
        },
        "canMove": {
          "type": "boolean"
        },
        "canPin": {
          "type": "boolean"
        },
        "canShare": {
          "type": "boolean"
        },
        "canonicalUrl": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "count": {
          "format": "int64",
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customContentType": {
          "type": "string"
        },
        "customContentTypeDetails": {
          "type": "string"
        },
        "customContentTypeTags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customer": {
          "type": "string"
        },
        "deleters": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "editors": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "eventEndDate": {
          "type": "string"
        },
        "eventStartDate": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "externalKey": {
          "type": "string"
        },
        "featuredEndDate": {
          "type": "string"
        },
        "featuredFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "featuredStartDate": {
          "type": "string"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "files": {
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        },
        "following": {
          "type": "boolean"
        },
        "hasCommentWidget": {
          "type": "boolean"
        },
        "hasRelevantComment": {
          "type": "boolean"
        },
        "header": {
          "type": "string"
        },
        "headerDetails": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "images": {
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        },
        "instance": {
          "type": "string"
        },
        "isCustomizableLayout": {
          "type": "boolean"
        },
        "isDefaultContentList": {
          "type": "boolean"
        },
        "isDefaultUserDirectory": {
          "type": "boolean"
        },
        "isFeatured": {
          "type": "boolean"
        },
        "isHomepage": {
          "type": "boolean"
        },
        "isMerged": {
          "type": "boolean"
        },
        "isNavItem": {
          "type": "boolean"
        },
        "isOpen": {
          "default": "True",
          "type": "boolean"
        },
        "isPinned": {
          "type": "boolean"
        },
        "lastPublishedAt": {
          "type": "string"
        },
        "lastRevision": {
          "$ref": "ContentLastRevision"
        },
        "liked": {
          "type": "boolean"
        },
        "likes": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "links": {
          "items": {
            "$ref": "AttachedLink"
          },
          "type": "array"
        },
        "location": {
          "$ref": "PostLocation"
        },
        "mediaThumbnail": {
          "$ref": "Media"
        },
        "mentions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "mentionsDetails": {
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "mentionsFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notificationsEnabled": {
          "type": "boolean"
        },
        "notifyAuthor": {
          "type": "boolean"
        },
        "notifyFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "notifyUsers": {
          "type": "boolean"
        },
        "parentContentDetails": {
          "type": "string"
        },
        "parentCustomContentType": {
          "type": "string"
        },
        "pinDetails": {
          "$ref": "PostPin"
        },
        "pinnedInCommunitiesDetails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "postStatus": {
          "type": "string"
        },
        "postStatusDetails": {
          "$ref": "PostStatus"
        },
        "postType": {
          "default": "DEFAULT",
          "type": "string"
        },
        "properties": {
          "default": "{'publicationError': None}",
          "type": "string"
        },
        "public": {
          "type": "boolean"
        },
        "publicationDate": {
          "type": "string"
        },
        "publishers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readers": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "relevantComment": {
          "type": "string"
        },
        "relevantCommentDetails": {
          "$ref": "Comment"
        },
        "reportDetails": {
          "type": "string"
        },
        "score": {
          "$ref": "PostScore"
        },
        "shareable": {
          "type": "boolean"
        },
        "slug": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "subscribedFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "subscription": {
          "$ref": "Subscription"
        },
        "subtitle": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tagsDetails": {
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "tagz": {
          "items": {
            "$ref": "Tagz"
          },
          "type": "array"
        },
        "template": {
          "$ref": "Template"
        },
        "thumbnail": {
          "type": "string"
        },
        "thumbnailBlobkey": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByDetails": {
          "type": "string"
        },
        "updatedById": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "userContent": {
          "$ref": "UserContent"
        },
        "userVote": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibleInCommunitiesCount": {
          "type": "string"
        },
        "visibleInCommunitiesDetails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "weight": {
          "format": "double",
          "type": "number"
        },
        "writer": {
          "type": "string"
        },
        "writerDetails": {
          "type": "string"
        },
        "writerId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostLocation": {
      "id": "PostLocation",
      "properties": {
        "coordinates": {
          "$ref": "GeoPtMessage",
          "description": "ProtoRPC container for GeoPt instances.\n\n  Attributes:\n    lat: Float; The latitude of the point.\n    lon: Float; The longitude of the point.\n  "
        },
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostPin": {
      "id": "PostPin",
      "properties": {
        "pinDate": {
          "type": "string"
        },
        "pinnedBy": {
          "type": "string"
        },
        "sortOrder": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PostScore": {
      "id": "PostScore",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "total": {
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "votesDown": {
          "format": "int32",
          "type": "integer"
        },
        "votesUp": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PostStatus": {
      "id": "PostStatus",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProvisioningError": {
      "id": "ProvisioningError",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProvisioningFieldMapping": {
      "id": "ProvisioningFieldMapping",
      "properties": {
        "fieldType": {
          "type": "string"
        },
        "lastEditor": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pathToFieldValue": {
          "type": "string"
        },
        "technicalName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProvisioningFieldMappingCollection": {
      "id": "ProvisioningFieldMappingCollection",
      "properties": {
        "items": {
          "items": {
            "$ref": "ProvisioningFieldMapping"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceFile": {
      "id": "ResourceFile",
      "properties": {
        "content": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "authorizations": {
          "items": {
            "$ref": "Authorization"
          },
          "type": "array"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "feeds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "heritable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "users": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SamlIdpXmlFile": {
      "id": "SamlIdpXmlFile",
      "properties": {
        "file": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SamlLogo": {
      "id": "SamlLogo",
      "properties": {
        "fileKey": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerAuthenticationLoginMessagesLoginSendPasswordTokenRequest": {
      "description": "\n    Request message to send reset password token\n    ",
      "id": "ServerAuthenticationLoginMessagesLoginSendPasswordTokenRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "email": {
          "description": "User email to reset the password.",
          "type": "string"
        },
        "resetPasswordUrl": {
          "description": "The URL of the reset password confirmation url.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerBookmarksBookmarksMessagesBookmarksMessage": {
      "id": "ServerBookmarksBookmarksMessagesBookmarksMessage",
      "properties": {
        "icon": {
          "description": "link to the logo to display",
          "type": "string"
        },
        "link": {
          "description": "link to the provider application",
          "type": "string"
        },
        "title": {
          "description": "title of the application",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerBookmarksBookmarksMessagesListBookmarksMessages": {
      "id": "ServerBookmarksBookmarksMessagesListBookmarksMessages",
      "properties": {
        "bookmarks": {
          "description": "the list of apps",
          "items": {
            "$ref": "ServerBookmarksBookmarksMessagesBookmarksMessage"
          },
          "type": "array"
        },
        "count": {
          "description": "number of elements in the list",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCalendarEventListResponse": {
      "description": "\n    Resource for a response of a Calendar's event list request\n    ",
      "id": "ServerCalendarCalendarMessagesCalendarEventListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of events.",
          "items": {
            "$ref": "ServerCalendarCalendarMessagesEventResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCalendarGetResponse": {
      "description": "\n    Resource for a response of a Calendar's get request\n    ",
      "id": "ServerCalendarCalendarMessagesCalendarGetResponse",
      "properties": {
        "calendar": {
          "$ref": "ServerCalendarCalendarMessagesCalendarResource",
          "description": "The calendar."
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCalendarListResponse": {
      "description": "\n    Resource for a response of a Calendar's list request\n    ",
      "id": "ServerCalendarCalendarMessagesCalendarListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of calendars.",
          "items": {
            "$ref": "ServerCalendarCalendarMessagesCalendarResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCalendarResource": {
      "description": "\n    Resource for a CalendarList that can list all calendar available\n    ",
      "id": "ServerCalendarCalendarMessagesCalendarResource",
      "properties": {
        "description": {
          "description": "The description of the calendar.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the calendar.",
          "type": "string"
        },
        "summary": {
          "description": "The summary of the calendar.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCreateCommunityMeetingRequest": {
      "id": "ServerCalendarCalendarMessagesCreateCommunityMeetingRequest",
      "properties": {
        "addEventToAttendeeCalendars": {
          "default": "True",
          "description": "Whether the event is to be added to the attendees calendar.",
          "type": "boolean"
        },
        "attendees": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "canAttendeesModifyEvent": {
          "description": "Whether attendees are allowed to make changes to the event.If null, default provider behavior will be used.",
          "type": "boolean"
        },
        "description": {
          "description": "The description of the event",
          "type": "string"
        },
        "endDate": {
          "description": "The ISO8601 end datetime of the event, with milliseconds and no tz, e.g. 2023-04-19T15:00:00.00",
          "type": "string"
        },
        "fromUserId": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "hasOnlineMeeting": {
          "description": "Whether the event should include an online meeting. Defaults to false.",
          "type": "boolean"
        },
        "sendNotifications": {
          "description": "Whether notifications should be sent to attendees upon event creation. Only supported for Google Workspace.",
          "type": "boolean"
        },
        "startDate": {
          "description": "The ISO8601 start datetime of the event, with milliseconds and no tz, e.g. 2023-04-19T15:00:00.00",
          "type": "string"
        },
        "title": {
          "description": "The title of the event",
          "type": "string"
        },
        "uid": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesCreateMeetingResponse": {
      "id": "ServerCalendarCalendarMessagesCreateMeetingResponse",
      "properties": {
        "uid": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesDeleteMeetingResponse": {
      "id": "ServerCalendarCalendarMessagesDeleteMeetingResponse",
      "properties": {
        "uid": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesEventResource": {
      "description": "\n    Resource for a Calendar's file\n    ",
      "id": "ServerCalendarCalendarMessagesEventResource",
      "properties": {
        "attendees": {
          "description": "The list of attendees of the event.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "calendarId": {
          "description": "The ID of the Google calendar of the event.",
          "type": "string"
        },
        "colorId": {
          "description": "The color of the event.",
          "type": "string"
        },
        "description": {
          "description": "The description of the event.",
          "type": "string"
        },
        "end": {
          "description": "The end date of the event.",
          "type": "string"
        },
        "hangoutLink": {
          "description": "The link to launch the Google Hangout associated with the event.",
          "type": "string"
        },
        "htmlLink": {
          "description": "The link to open the event in Google Calendar.",
          "type": "string"
        },
        "id": {
          "description": "The API Id of the event.",
          "type": "string"
        },
        "isAllDay": {
          "description": "If the event is on all day",
          "type": "boolean"
        },
        "location": {
          "description": "The location of the event.",
          "type": "string"
        },
        "start": {
          "description": "The start date of the event.",
          "type": "string"
        },
        "summary": {
          "description": "The summary of the event.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesUpdateMeetingRequest": {
      "id": "ServerCalendarCalendarMessagesUpdateMeetingRequest",
      "properties": {
        "attendees": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        },
        "endDate": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        },
        "eventId": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "fromUserId": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "sendNotifications": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "startDate": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        },
        "title": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        },
        "uid": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCalendarCalendarMessagesUpdateMeetingResponse": {
      "id": "ServerCalendarCalendarMessagesUpdateMeetingResponse",
      "properties": {
        "uid": {
          "description": "The universally unique identifier. (Format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatChannelGetResponse": {
      "description": "\n    Response message for list\n    ",
      "id": "ServerChatChatMessagesChatChannelGetResponse",
      "properties": {
        "channel": {
          "description": "A chat channel",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatChannelsListRequest": {
      "description": "\n    Request message to list channels\n    ",
      "id": "ServerChatChatMessagesChatChannelsListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "A user space id",
          "type": "string"
        },
        "visibilities": {
          "description": "A chat visibility (possible: private, public)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatChannelsListResponse": {
      "description": "\n    Response message for list channels\n    ",
      "id": "ServerChatChatMessagesChatChannelsListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "Current space id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatChannelsUserJoinedResponse": {
      "description": "\n    Response message to get the link to a user IM\n    ",
      "id": "ServerChatChatMessagesChatChannelsUserJoinedResponse",
      "properties": {
        "userHasJoined": {
          "description": "If the user has joined the channel",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatChannelsUserLinkGetResponse": {
      "description": "\n    Response message to get the link to a user IM\n    ",
      "id": "ServerChatChatMessagesChatChannelsUserLinkGetResponse",
      "properties": {
        "link": {
          "description": "Provider link to the user IM",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatMessageCreateRequest": {
      "description": "\n    Request message for chat message creation\n    ",
      "id": "ServerChatChatMessagesChatMessageCreateRequest",
      "properties": {
        "body": {
          "description": "A chat message body",
          "type": "string"
        },
        "bodyContentType": {
          "default": "Html",
          "description": "A chat message id",
          "type": "string"
        },
        "channelId": {
          "description": "A channel id",
          "type": "string"
        },
        "chatMessageId": {
          "description": "A chat message id",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "A space id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatMessageCreateResponse": {
      "description": "\n    Response message for chat message creation\n    ",
      "id": "ServerChatChatMessagesChatMessageCreateResponse",
      "properties": {
        "channelId": {
          "description": "The current channel id",
          "type": "string"
        },
        "id": {
          "description": "New message ID",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "Current space id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatMessageListResponse": {
      "description": "\n    Response message for thread list\n    ",
      "id": "ServerChatChatMessagesChatMessageListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "channelId": {
          "description": "The current channel id",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "Current space id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatMessageWallListResponse": {
      "description": "\n    Response message for wall list\n    ",
      "id": "ServerChatChatMessagesChatMessageWallListResponse",
      "properties": {
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatMessageWallResponse": {
      "description": "\n    Response message for a wall message\n    ",
      "id": "ServerChatChatMessagesChatMessageWallResponse",
      "properties": {
        "item": {
          "description": "Chat message",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatProvidersResponse": {
      "description": "\n    Response message for available providers\n    ",
      "id": "ServerChatChatMessagesChatProvidersResponse",
      "properties": {
        "providers": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserContactsGetResponse": {
      "description": "\n    Response message to get the list of chat IM links\n    ",
      "id": "ServerChatChatMessagesChatUserContactsGetResponse",
      "properties": {
        "contacts": {
          "description": "List of chat contacts for the user",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserSpaceRegisterRequest": {
      "description": "\n    Request message to register a user space\n    ",
      "id": "ServerChatChatMessagesChatUserSpaceRegisterRequest",
      "properties": {
        "auth_token": {
          "description": "Token used by the app to authenticate.",
          "type": "string"
        },
        "client_id": {
          "description": "Client ID of the user space credentials.",
          "type": "string"
        },
        "client_secret": {
          "description": "Client secret of the user space credentials.",
          "type": "string"
        },
        "customer_id": {
          "description": "Name of the user space.",
          "type": "string"
        },
        "description": {
          "description": "Description of the user space.",
          "type": "string"
        },
        "name": {
          "description": "Name of the user space.",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "spaceId": {
          "description": "Existing user space ID if existing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserSpacesGetResponse": {
      "description": "\n    Response message to get the user space\n    ",
      "id": "ServerChatChatMessagesChatUserSpacesGetResponse",
      "properties": {
        "space": {
          "description": "Hosted Content raw value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserSpacesListRequest": {
      "description": "\n    Request message to list user spaces\n    ",
      "id": "ServerChatChatMessagesChatUserSpacesListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        },
        "searchFilter": {
          "description": "The filter on the user space name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserSpacesListResponse": {
      "description": "\n    Response message for list user spaces\n    ",
      "id": "ServerChatChatMessagesChatUserSpacesListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A chat provider (possible: fbworkplace, slack, teams, yammer)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserTokenAuthorizeResponse": {
      "description": "\n    Response message toget the authorize link for OAuth\n    ",
      "id": "ServerChatChatMessagesChatUserTokenAuthorizeResponse",
      "properties": {
        "link": {
          "description": "Provider link to the authorize flow",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerChatChatMessagesChatUserTokenStatusResponse": {
      "description": "\n    Response message to get the chat connection status of the user\n    ",
      "id": "ServerChatChatMessagesChatUserTokenStatusResponse",
      "properties": {
        "status": {
          "description": "User token status",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCommentCommentMessagesCommentAndChild": {
      "id": "ServerCommentCommentMessagesCommentAndChild",
      "properties": {
        "comment": {
          "$ref": "Comment",
          "description": "The comment."
        },
        "firstChild": {
          "$ref": "Comment",
          "description": "The first child of the comment, if any."
        }
      },
      "type": "object"
    },
    "ServerCommentCommentMessagesCommentAndChildListResponse": {
      "id": "ServerCommentCommentMessagesCommentAndChildListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerCommentCommentMessagesCommentAndChild"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCommentCommentMessagesCommentListResponse": {
      "description": "\n    Resource for a Comment list response\n    ",
      "id": "ServerCommentCommentMessagesCommentListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Comment"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesCompleteDatastoreKey": {
      "description": "\n    Datastore key for the get endpoints methods\n    ",
      "id": "ServerCommonEndpointMessagesCompleteDatastoreKey",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the entity.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesDatastoreKey": {
      "description": "\n    Datastore key for the get endpoints methods\n    ",
      "id": "ServerCommonEndpointMessagesDatastoreKey",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesDatastoreKeyErrorReason": {
      "description": "\n    Error and its relative object ID\n    ",
      "id": "ServerCommonEndpointMessagesDatastoreKeyErrorReason",
      "properties": {
        "reason": {
          "description": "The error description.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesDatastoreKeyList": {
      "description": "\n    Datastore key for the get endpoints methods\n    ",
      "id": "ServerCommonEndpointMessagesDatastoreKeyList",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "uid": {
          "description": "The list of unique identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesDatastoreKeyWithErrorList": {
      "description": "\n    Datastore key list and an error list for endpoints methods\n    ",
      "id": "ServerCommonEndpointMessagesDatastoreKeyWithErrorList",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "errors": {
          "description": "A list of errors",
          "items": {
            "$ref": "ServerCommonEndpointMessagesDatastoreKeyErrorReason"
          },
          "type": "array"
        },
        "uid": {
          "description": "The list of unique identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCommonEndpointMessagesMetadataClauses": {
      "description": "\n    Resource for a list of metadata lists. Allows to represent a metadata query\n    ",
      "id": "ServerCommonEndpointMessagesMetadataClauses",
      "properties": {
        "metadata": {
          "description": "The list of metadata clauses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCommunityTemplateCommunityTemplateMessagesCommunityTemplateListResponse": {
      "description": "\n    Resource for a response of a Template's list request\n    ",
      "id": "ServerCommunityTemplateCommunityTemplateMessagesCommunityTemplateListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "errors": {
          "description": "The list of errors and their relative target.",
          "items": {
            "$ref": "ServerCommunityTemplateCommunityTemplateMessagesErrorReason"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CommunityTemplate"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCommunityTemplateCommunityTemplateMessagesErrorReason": {
      "description": "\n    Error and its relative object\n    ",
      "id": "ServerCommunityTemplateCommunityTemplateMessagesErrorReason",
      "properties": {
        "reason": {
          "description": "The error description.",
          "type": "string"
        },
        "targetId": {
          "description": "The invalid community template.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunityChangeInstanceRequest": {
      "id": "ServerContentCommunityCommunityMessagesCommunityChangeInstanceRequest",
      "properties": {
        "communityId": {
          "description": "The community id.",
          "type": "string"
        },
        "instanceId": {
          "description": "The id of the instance where to move the community.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunityListRequest": {
      "description": "\n    Resource for a a Community's list request\n    ",
      "id": "ServerContentCommunityCommunityMessagesCommunityListRequest",
      "properties": {
        "action": {
          "description": "\n        The authorized action used to filter the list.<br>If no action, user must be super or instance administrator.\n        ",
          "enum": [
            "PAGE_READ",
            "PAGE_EDIT",
            "PAGE_DELETE",
            "NEWS_READ",
            "NEWS_EDIT",
            "NEWS_DELETE",
            "PAGE_ARCHIVE",
            "PAGE_PUBLISH",
            "NEWS_PUBLISH",
            "METADATA_EDIT",
            "METADATA_DELETE",
            "ROLE_READ",
            "ROLE_EDIT",
            "ROLE_DELETE",
            "NEWS_LIST_READ",
            "NEWS_LIST_EDIT",
            "NEWS_LIST_DELETE",
            "DIRECTORY_READ",
            "DIRECTORY_EDIT",
            "DIRECTORY_DELETE",
            "MENU_READ",
            "MENU_EDIT",
            "MENU_DELETE",
            "TEMPLATE_READ",
            "TEMPLATE_EDIT",
            "TEMPLATE_DELETE",
            "INSTANCE_EDIT",
            "INSTANCE_DELETE",
            "FEED_EDIT",
            "FEED_DELETE",
            "MEDIA_EDIT",
            "MEDIA_DELETE",
            "USER_READ",
            "USER_EDIT",
            "USER_DELETE",
            "RESELLER_READ",
            "RESELLER_EDIT",
            "POST_EDIT",
            "GROUP_EDIT",
            "DIRECTORY_ENTRY_FAVORITES_EDIT",
            "NEWSLETTER_READ",
            "NEWSLETTER_EDIT",
            "NEWSLETTER_DELETE",
            "CUSTOM_CONTENT_TYPE_EDIT",
            "CUSTOM_CONTENT_TYPE_DELETE",
            "CUSTOM_CONTENT_READ",
            "CUSTOM_CONTENT_PUBLISH",
            "CUSTOM_CONTENT_EDIT",
            "CUSTOM_CONTENT_DELETE",
            "CUSTOM_LIST_READ",
            "CUSTOM_LIST_EDIT",
            "CUSTOM_LIST_DELETE",
            "CUSTOM_LIST_PUBLISH",
            "COMMUNITY_READ",
            "COMMUNITY_EDIT",
            "COMMUNITY_DELETE",
            "USER_DIRECTORY_READ",
            "USER_DIRECTORY_EDIT",
            "USER_DIRECTORY_DELETE",
            "CUSTOM_READ",
            "CUSTOM_EDIT",
            "CUSTOM_DELETE",
            "TUTORIAL_READ",
            "TUTORIAL_EDIT",
            "TUTORIAL_DELETE",
            "POST_READ",
            "POST_DELETE",
            "CUSTOM_CONTENT_ARCHIVE",
            "MENU_DROP",
            "STYLE_READ",
            "STYLE_EDIT",
            "STYLE_DELETE",
            "GLOBAL_WIDGET_EDIT",
            "TARGET_EDIT",
            "DIRECTORY_ENTRY_READ",
            "DIRECTORY_ENTRY_EDIT",
            "DIRECTORY_ENTRY_DELETE",
            "COMMUNITY_PUBLISH",
            "ANALYTICS_READ",
            "COMMUNITY_CREATE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "author": {
          "description": "The email of the creator of the community.",
          "type": "string"
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "combinedMetadata": {
          "description": "\n        The list of metadata lists.\n        ",
          "items": {
            "$ref": "ServerCommonEndpointMessagesMetadataClauses"
          },
          "type": "array"
        },
        "currentInstanceId": {
          "description": "The ID of the current instance.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "customContentType": {
          "description": "\n        The list of custom content types.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customContentTypeTags": {
          "description": "The tags of the custom content types.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customerId": {
          "description": "\n        The ID of the customer.<br>\n        Required if the user is not connected.\n        ",
          "type": "string"
        },
        "endDate": {
          "description": "The end date (Format: UTC date-time).",
          "type": "string"
        },
        "endDateFrom": {
          "description": "\n        The community end date should be newer than this date (Format: UTC date-time).\n        ",
          "type": "string"
        },
        "endDateTo": {
          "description": "\n        The community end date should be older than this date (Format: UTC date-time).\n        ",
          "type": "string"
        },
        "excludeStatus": {
          "description": "\n        The list of status excluded from the list.<br>\n        Acceptable values are:<br>\n         - \"DRAFT\": The model is a draft.<br>\n         - \"REFUSED\": The model has been rejected.<br>\n         - \"TO_VALIDATE\": The model is pending validation.<br>\n         - \"LIVE\": The model is published.<br>\n         - \"ARCHIVE\": The model is archived.<br>\n         - \"DELETED\": The model is deleted.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludeType": {
          "description": "The list of content types to exclude.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalKey": {
          "description": "The external key to link a content, directory entry or other.",
          "type": "string"
        },
        "featuredFeed": {
          "description": "\n        The list of user groups for which community is promoted, used to filter the list.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "feed": {
          "description": "\n        The list of user groups used to filter the list.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "followingOnly": {
          "description": "\n        Retrieve only communities that user is following. (Default: false)\n        ",
          "type": "boolean"
        },
        "ids": {
          "description": "The list of community IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceId": {
          "description": "The list of instance IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isCommunityAdmin": {
          "description": "Get only communities where user is administrator",
          "type": "boolean"
        },
        "isFeatured": {
          "description": "Whether the community is featured. (Default: false)",
          "type": "boolean"
        },
        "isOpen": {
          "description": "Whether to filter by open posts or closed posts.",
          "type": "boolean"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "metadata": {
          "description": "The list of metadata required for a model to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "onlyFeatureFeeds": {
          "description": "\n        Whether to retrieve communities which have been promoted for some users groups. (Default: false)\n        ",
          "type": "boolean"
        },
        "orMetadata": {
          "description": "The list of metadata in which a model needs to have at least one of them to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "privacy": {
          "description": "The privacy of the community.",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "queryType": {
          "description": "The type of the query.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startDate": {
          "description": "The start date (Format: UTC date-time).",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the element.<br>\n    Acceptable values are:<br>\n     - \"DRAFT\": The model is a draft.<br>\n     - \"REFUSED\": The model has been rejected.<br>\n     - \"TO_VALIDATE\": The model is pending validation.<br>\n     - \"LIVE\": The model is validated.<br>\n     - \"ARCHIVE\": The model is archived.<br>\n     - \"DELETED\": The model is deleted.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "The list of content types.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userFavoritesOnly": {
          "description": "Limit the response to the contents that the user has marked as favorite (directly or indirectly).",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunityListResponse": {
      "description": "\n    Resource for a response of a Community's list request\n    ",
      "id": "ServerContentCommunityCommunityMessagesCommunityListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "errors": {
          "description": "The list of errors and their relative target.",
          "items": {
            "$ref": "ServerContentContentMessagesErrorReason"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Community"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunitySearchForPostingRequest": {
      "id": "ServerContentCommunityCommunityMessagesCommunitySearchForPostingRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The fields to return in the response.",
          "type": "string"
        },
        "followingOnly": {
          "description": "True to restrict the search to communities that the user follows.",
          "type": "boolean"
        },
        "instanceId": {
          "description": "The list of instance IDs where to search communities. Searches everywhere if left empty or omitted.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "20",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunityShareSearchRequest": {
      "id": "ServerContentCommunityCommunityMessagesCommunityShareSearchRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The fields to return in the response.",
          "type": "string"
        },
        "followingOnly": {
          "description": "True to restrict the search to communities that the user follows.",
          "type": "boolean"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "20",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "postId": {
          "description": "The id of the post to share.",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesCommunityUserListRequest": {
      "description": "\n    Message containing parameters to do a simple query in datastore related to a list of object.\n    ",
      "id": "ServerContentCommunityCommunityMessagesCommunityUserListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesGetCommunityGroupsResponse": {
      "description": "\n    Resource for the response of a community groups get request\n    ",
      "id": "ServerContentCommunityCommunityMessagesGetCommunityGroupsResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "description": {
          "description": "The group description.",
          "type": "string"
        },
        "email": {
          "description": "The group email.",
          "type": "string"
        },
        "id": {
          "description": "The group ID",
          "type": "string"
        },
        "name": {
          "description": "The group name.",
          "type": "string"
        },
        "visibility": {
          "description": "The group visibility.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesGroupResource": {
      "description": "\n    Resource for a group user\n    ",
      "id": "ServerContentCommunityCommunityMessagesGroupResource",
      "properties": {
        "description": {
          "description": "The group description.",
          "type": "string"
        },
        "email": {
          "description": "The group email.",
          "type": "string"
        },
        "id": {
          "description": "The group ID",
          "type": "string"
        },
        "name": {
          "description": "The group name.",
          "type": "string"
        },
        "visibility": {
          "description": "The group visibility.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityMessagesListCommunityGroupsResponse": {
      "description": "\n    Resource for the response of a community groups list request\n    ",
      "id": "ServerContentCommunityCommunityMessagesListCommunityGroupsResponse",
      "properties": {
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "groups": {
          "description": "The list of groups.",
          "items": {
            "$ref": "ServerContentCommunityCommunityMessagesGroupResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestListResponse": {
      "description": "\n    Resource for a response of a Community request list request.\n    ",
      "id": "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CommunityRequest"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestStatusRequest": {
      "description": "\n    Resource for a community access request status update.\n    ",
      "id": "ServerContentCommunityCommunityRequestCommunityRequestMessagesCommunityRequestStatusRequest",
      "properties": {
        "adminMessage": {
          "description": "A message of user who validate/reject the request",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostListRequest": {
      "id": "ServerContentCommunityPostPostMessagesPostListRequest",
      "properties": {
        "author": {
          "description": "The ID of the author.",
          "type": "string"
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "contentId": {
          "description": "The ID of the content(s) containing the community(ies).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "currentInstance": {
          "description": "The ID of the current instance.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "customerId": {
          "description": "The ID of the customer.",
          "type": "string"
        },
        "eventEndAfter": {
          "description": "Event end after",
          "type": "string"
        },
        "eventEndBefore": {
          "description": "Event end before",
          "type": "string"
        },
        "eventStartAfter": {
          "description": "Event start after",
          "type": "string"
        },
        "eventStartBefore": {
          "description": "Event start before",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "followingOnly": {
          "description": "List only posts for community current user is following.",
          "type": "boolean"
        },
        "hasAttachments": {
          "description": "Get only posts with or without attachments",
          "type": "boolean"
        },
        "hasRelevant": {
          "description": "Whether to include posts having relevant comment?",
          "type": "boolean"
        },
        "ids": {
          "description": "The list of posts IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceId": {
          "description": "The ID of the instance.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isCommunityAdmin": {
          "description": "Get only communities where user is administrator",
          "type": "boolean"
        },
        "isMergePending": {
          "description": "Whether to include posts marked as duplicated but not yet approved? This attribute is deprecated, and its value will be ignored.",
          "type": "boolean"
        },
        "isMerged": {
          "description": "Whether to include posts marked as duplicated?. This attribute is deprecated, and its value will be ignored.",
          "type": "boolean"
        },
        "isOpen": {
          "description": "Whether to filter by open posts or closed posts.",
          "type": "boolean"
        },
        "isPinned": {
          "description": "Whether to filter by pinned posts or not.",
          "type": "boolean"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "maxScore": {
          "description": "The post maximum score to filter.",
          "type": "string"
        },
        "minScore": {
          "description": "The post minimum score to filter.",
          "type": "string"
        },
        "postStatus": {
          "description": "The post custom status to filter.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "postType": {
          "description": "The post types to filter.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "A list of tags to filter posts.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostListResponse": {
      "description": "\n    Resource for a response of a Post's list request\n    ",
      "id": "ServerContentCommunityPostPostMessagesPostListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Post"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "queryId": {
          "description": "The id of the query.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostPinRequest": {
      "description": "\n    Resource for a request to pin a Post.\n    ",
      "id": "ServerContentCommunityPostPostMessagesPostPinRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "communityId": {
          "description": "The ID of the community where to pin this post.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "uid": {
          "description": "The ID of the post to pin.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostShareRequest": {
      "description": "\n    Resource for a request to share a post in communities\n    ",
      "id": "ServerContentCommunityPostPostMessagesPostShareRequest",
      "properties": {
        "addToCommunities": {
          "description": "The list of IDs of the communities where to share the post.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "postId": {
          "description": "The ID of the post to share.",
          "type": "string"
        },
        "sharedAt": {
          "description": "Sharing date of the post",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostUnpinRequest": {
      "description": "\n    Resource for a request to unpin a Post.\n    ",
      "id": "ServerContentCommunityPostPostMessagesPostUnpinRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "communityId": {
          "description": "The ID of the community from which to unpin this post.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "uid": {
          "description": "The ID of the post to unpin.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentCommunityPostPostMessagesPostUnshareRequest": {
      "description": "\n    Resource for a request to unshare a post from communities\n    ",
      "id": "ServerContentCommunityPostPostMessagesPostUnshareRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "postId": {
          "description": "The ID of the post to unshare.",
          "type": "string"
        },
        "removeFromCommunities": {
          "description": "The list of IDs of the communities from which to unshare the post.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesContentListRequest": {
      "description": "\n    Resource for a a Content's list request\n    ",
      "id": "ServerContentContentMessagesContentListRequest",
      "properties": {
        "action": {
          "description": "\n        The authorized action used to filter the list.<br>If no action, user must be super or instance administrator.\n        ",
          "enum": [
            "PAGE_READ",
            "PAGE_EDIT",
            "PAGE_DELETE",
            "NEWS_READ",
            "NEWS_EDIT",
            "NEWS_DELETE",
            "PAGE_ARCHIVE",
            "PAGE_PUBLISH",
            "NEWS_PUBLISH",
            "METADATA_EDIT",
            "METADATA_DELETE",
            "ROLE_READ",
            "ROLE_EDIT",
            "ROLE_DELETE",
            "NEWS_LIST_READ",
            "NEWS_LIST_EDIT",
            "NEWS_LIST_DELETE",
            "DIRECTORY_READ",
            "DIRECTORY_EDIT",
            "DIRECTORY_DELETE",
            "MENU_READ",
            "MENU_EDIT",
            "MENU_DELETE",
            "TEMPLATE_READ",
            "TEMPLATE_EDIT",
            "TEMPLATE_DELETE",
            "INSTANCE_EDIT",
            "INSTANCE_DELETE",
            "FEED_EDIT",
            "FEED_DELETE",
            "MEDIA_EDIT",
            "MEDIA_DELETE",
            "USER_READ",
            "USER_EDIT",
            "USER_DELETE",
            "RESELLER_READ",
            "RESELLER_EDIT",
            "POST_EDIT",
            "GROUP_EDIT",
            "DIRECTORY_ENTRY_FAVORITES_EDIT",
            "NEWSLETTER_READ",
            "NEWSLETTER_EDIT",
            "NEWSLETTER_DELETE",
            "CUSTOM_CONTENT_TYPE_EDIT",
            "CUSTOM_CONTENT_TYPE_DELETE",
            "CUSTOM_CONTENT_READ",
            "CUSTOM_CONTENT_PUBLISH",
            "CUSTOM_CONTENT_EDIT",
            "CUSTOM_CONTENT_DELETE",
            "CUSTOM_LIST_READ",
            "CUSTOM_LIST_EDIT",
            "CUSTOM_LIST_DELETE",
            "CUSTOM_LIST_PUBLISH",
            "COMMUNITY_READ",
            "COMMUNITY_EDIT",
            "COMMUNITY_DELETE",
            "USER_DIRECTORY_READ",
            "USER_DIRECTORY_EDIT",
            "USER_DIRECTORY_DELETE",
            "CUSTOM_READ",
            "CUSTOM_EDIT",
            "CUSTOM_DELETE",
            "TUTORIAL_READ",
            "TUTORIAL_EDIT",
            "TUTORIAL_DELETE",
            "POST_READ",
            "POST_DELETE",
            "CUSTOM_CONTENT_ARCHIVE",
            "MENU_DROP",
            "STYLE_READ",
            "STYLE_EDIT",
            "STYLE_DELETE",
            "GLOBAL_WIDGET_EDIT",
            "TARGET_EDIT",
            "DIRECTORY_ENTRY_READ",
            "DIRECTORY_ENTRY_EDIT",
            "DIRECTORY_ENTRY_DELETE",
            "COMMUNITY_PUBLISH",
            "ANALYTICS_READ",
            "COMMUNITY_CREATE"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "author": {
          "description": "The email of the creator of the content.",
          "type": "string"
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "combinedMetadata": {
          "description": "\n        The list of metadata lists.\n        ",
          "items": {
            "$ref": "ServerCommonEndpointMessagesMetadataClauses"
          },
          "type": "array"
        },
        "currentInstanceId": {
          "description": "The ID of the current instance.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "customContentType": {
          "description": "\n        The list of custom content types.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customContentTypeTags": {
          "description": "The tags of the custom content types.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customerId": {
          "description": "\n        The ID of the customer.<br>\n        Required if the user is not connected.\n        ",
          "type": "string"
        },
        "endDate": {
          "description": "The end date (Format: UTC date-time).",
          "type": "string"
        },
        "endDateFrom": {
          "description": "\n        The content end date should be newer than this date (Format: UTC date-time).\n        ",
          "type": "string"
        },
        "endDateTo": {
          "description": "\n        The content end date should be older than this date (Format: UTC date-time).\n        ",
          "type": "string"
        },
        "excludeStatus": {
          "description": "         The list of status excluded from the list.<br>         Acceptable values are:<br>          - \"DRAFT\": The model is a draft.<br>          - \"REFUSED\": The model has been rejected.<br>          - \"TO_VALIDATE\": The model is pending validation.<br>          - \"LIVE\": The model is published.<br>          - \"ARCHIVE\": The model is archived.<br>          - \"DELETED\": The model is deleted.         ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "excludeType": {
          "description": "The list of content types to exclude.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalKey": {
          "description": "The external key to link a content, directory entry or other.",
          "type": "string"
        },
        "featuredFeed": {
          "description": "\n        The list of user groups for which content is promoted, used to filter the list.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "feed": {
          "description": "\n        The list of user groups used to filter the list.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "followingOnly": {
          "description": "\n        Retrieve only contents that user is following. (Default: false)\n        ",
          "type": "boolean"
        },
        "ids": {
          "description": "The list of content IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceId": {
          "description": "The list of instance IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isFeatured": {
          "description": "Whether the content is featured. (Default: false)",
          "type": "boolean"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "metadata": {
          "description": "The list of metadata required for a model to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "onlyFeatureFeeds": {
          "description": "\n        Whether to retrieve contents which have been promoted for some users groups. (Default: false)\n        ",
          "type": "boolean"
        },
        "orMetadata": {
          "description": "The list of metadata in which a model needs to have at least one of them to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "queryType": {
          "description": "The type of the query.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "startDate": {
          "description": "The start date (Format: UTC date-time).",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the element.<br>\n    Acceptable values are:<br>\n     - \"DRAFT\": The model is a draft.<br>\n     - \"REFUSED\": The model has been rejected.<br>\n     - \"TO_VALIDATE\": The model is pending validation.<br>\n     - \"LIVE\": The model is validated.<br>\n     - \"ARCHIVE\": The model is archived.<br>\n     - \"DELETED\": The model is deleted.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "The list of content types.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userFavoritesOnly": {
          "description": "Limit the response to the contents that the user has marked as favorite (directly or indirectly).",
          "type": "boolean"
        },
        "withReaction": {
          "description": "\n        Retrieve only the contents to which the user has reacted with this kind of reaction\n        (this value will be taken into account only if queryType = 'withReaction')\n        ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesContentListResponse": {
      "description": "\n    Resource for a response of a Content's list request\n    ",
      "id": "ServerContentContentMessagesContentListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "errors": {
          "description": "The list of errors and their relative target.",
          "items": {
            "$ref": "ServerContentContentMessagesErrorReason"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Content"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "queryId": {
          "description": "The id of the query.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesContentStatusRequest": {
      "id": "ServerContentContentMessagesContentStatusRequest",
      "properties": {
        "comment": {
          "description": "The comment to justify the status.",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the element.<br>\n    Acceptable values are:<br>\n     - \"DRAFT\": The model is a draft.<br>\n     - \"REFUSED\": The model has been rejected.<br>\n     - \"TO_VALIDATE\": The model is pending validation.<br>\n     - \"LIVE\": The model is validated.<br>\n     - \"ARCHIVE\": The model is archived.<br>\n     - \"DELETED\": The model is deleted.\n    ",
          "enum": [
            "DRAFT",
            "REFUSED",
            "TO_VALIDATE",
            "LIVE",
            "ARCHIVE",
            "DELETED",
            "PENDING"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesContentTypeUpdate": {
      "id": "ServerContentContentMessagesContentTypeUpdate",
      "properties": {
        "contentId": {
          "description": "The content to update",
          "type": "string"
        },
        "contentTypeId": {
          "description": "The id of the desired content type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesErrorReason": {
      "description": "\n    Error and its relative object\n    ",
      "id": "ServerContentContentMessagesErrorReason",
      "properties": {
        "reason": {
          "description": "The error description.",
          "type": "string"
        },
        "target": {
          "$ref": "Content",
          "description": "The invalid content."
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesSaveContentMenuRequest": {
      "id": "ServerContentContentMessagesSaveContentMenuRequest",
      "properties": {
        "customerId": {
          "description": "The ID of the customer.",
          "type": "string"
        },
        "deleted": {
          "description": "The list of deleted contents.",
          "items": {
            "$ref": "ContentMenuDeletedListItem"
          },
          "type": "array"
        },
        "instanceId": {
          "description": "The ID of the instance.",
          "type": "string"
        },
        "items": {
          "description": "The list of saved contents.",
          "items": {
            "$ref": "ContentMenuList"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentContentMessagesSaveContentMultiRequest": {
      "description": "\n    Resource for a list of contents to save\n    ",
      "id": "ServerContentContentMessagesSaveContentMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Content"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentContentRevisionContentRevisionMessagesContentRevisionKeyMessage": {
      "id": "ServerContentContentRevisionContentRevisionMessagesContentRevisionKeyMessage",
      "properties": {
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "version": {
          "description": "The version of the content.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentContentRevisionContentRevisionMessagesContentRevisionListResponse": {
      "id": "ServerContentContentRevisionContentRevisionMessagesContentRevisionListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ContentRevisionProtoIdUidContentKeyVersionStatusCreatedAtCreatedByCreatedByDetails"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerContentDataDataMessagesDataResponseMessage": {
      "id": "ServerContentDataDataMessagesDataResponseMessage",
      "properties": {
        "content": {
          "description": "The content of the response.",
          "type": "string"
        },
        "raw": {
          "description": "Whether the result is in raw format. (Default: false)",
          "type": "boolean"
        },
        "rawContent": {
          "description": "The content in raw format.",
          "type": "string"
        },
        "url": {
          "description": "The URL of the request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerContentInterestInterestMessagesInterestListRequest": {
      "description": "\n    Interest list request message\n    ",
      "id": "ServerContentInterestInterestMessagesInterestListRequest",
      "properties": {
        "customContentType": {
          "description": "The content type that the user is interested in",
          "format": "int64",
          "type": "string"
        },
        "customContentTypeTags": {
          "description": "The tags of the custom content types",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instanceId": {
          "description": "The ID of the instance.",
          "type": "string"
        },
        "orMetadata": {
          "description": "The metadata that the user is interested in",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerContentInterestInterestMessagesInterestListResponse": {
      "description": "\n    Interest list response message\n    ",
      "id": "ServerContentInterestInterestMessagesInterestListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Interest"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerContentRssRssMessagesRssResponseMessage": {
      "id": "ServerContentRssRssMessagesRssResponseMessage",
      "properties": {
        "entries": {
          "description": "The list of entries from the RS feed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomAppsAppsMessagesAppsItemResource": {
      "description": "\n    Resource for an app\n    ",
      "id": "ServerCustomAppsAppsMessagesAppsItemResource",
      "properties": {
        "code": {
          "type": "string"
        },
        "section": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        },
        "tip": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomAppsAppsMessagesAppsListResponse": {
      "description": "\n    Resource for a list of apps\n    ",
      "id": "ServerCustomAppsAppsMessagesAppsListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "\n    Resource for a section\n    ",
          "items": {
            "$ref": "ServerCustomAppsAppsMessagesAppsSectionResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCustomAppsAppsMessagesAppsSectionResource": {
      "description": "\n    Resource for a section\n    ",
      "id": "ServerCustomAppsAppsMessagesAppsSectionResource",
      "properties": {
        "items": {
          "description": "\n    Resource for an app\n    ",
          "items": {
            "$ref": "ServerCustomAppsAppsMessagesAppsItemResource"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomContentTypeCustomContentTypeMessagesChildrenListCustomContentTypeResponse": {
      "id": "ServerCustomContentTypeCustomContentTypeMessagesChildrenListCustomContentTypeResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CustomContentType"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCustomContentTypeCustomContentTypeMessagesCustomContentTypeListResponse": {
      "description": "\n    Resource for a Custom Content Type list response\n    ",
      "id": "ServerCustomContentTypeCustomContentTypeMessagesCustomContentTypeListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CustomContentType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCustomContentTypeCustomContentTypeMessagesListCustomContentTypeTagResponse": {
      "description": "\n    Resource for a Custom Content Type tags list response\n    ",
      "id": "ServerCustomContentTypeCustomContentTypeMessagesListCustomContentTypeTagResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The custom content type tags.",
          "items": {
            "$ref": "CustomContentTypeTag"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesAdminListResponse": {
      "description": "\n    Resource for a response of an admin or beta list request\n    ",
      "id": "ServerCustomerCustomerMessagesAdminListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesAdminPropertiesRequest": {
      "id": "ServerCustomerCustomerMessagesAdminPropertiesRequest",
      "properties": {
        "properties": {
          "description": "The properties of the customer.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesAdminRequest": {
      "description": "\n    Resource for an admin add/remove request or for a beta add request\n    ",
      "id": "ServerCustomerCustomerMessagesAdminRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "email": {
          "description": "\n        The list of email addresses used to filter the admin list.\n        ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerIDPListResponse": {
      "id": "ServerCustomerCustomerMessagesCustomerIDPListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The customer's identity providers.",
          "items": {
            "$ref": "CustomerIdentityProvider"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerIDPSaveOrderRequest": {
      "id": "ServerCustomerCustomerMessagesCustomerIDPSaveOrderRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "customerKey": {
          "description": "The customer for which to save identity providers order.",
          "type": "string"
        },
        "orderedUuids": {
          "description": "The list of fields that will be returned with the response.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerIDPTemporaryCacheResponse": {
      "id": "ServerCustomerCustomerMessagesCustomerIDPTemporaryCacheResponse",
      "properties": {
        "domain": {
          "description": "The domain available in the cache.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerListRequest": {
      "id": "ServerCustomerCustomerMessagesCustomerListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerListResponse": {
      "id": "ServerCustomerCustomerMessagesCustomerListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Customer"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesCustomerStatusResponse": {
      "id": "ServerCustomerCustomerMessagesCustomerStatusResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "error": {
          "description": "Error raised when querying the status.",
          "type": "string"
        },
        "status": {
          "description": "The status of the customer.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerCustomerCustomerMessagesRegistrationLinkResponse": {
      "id": "ServerCustomerCustomerMessagesRegistrationLinkResponse",
      "properties": {
        "url": {
          "description": "The URL of the registration.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerMappingMappingMessagesGetProvisioningTemplateResponse": {
      "description": "\n    Message to retrieve a template\n    ",
      "id": "ServerCustomerMappingMappingMessagesGetProvisioningTemplateResponse",
      "properties": {
        "template": {
          "description": "Template used by the batch Provisioning",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerMappingMappingMessagesUpdateCustomTechnicalNameRequest": {
      "description": "\n    Message to update a mapping fields related to an identity provider.\n    ",
      "id": "ServerCustomerMappingMappingMessagesUpdateCustomTechnicalNameRequest",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CustomTechnicalName"
          },
          "type": "array"
        },
        "providerUuid": {
          "description": "The uuid of the identity provider",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerMappingMappingMessagesUpdateMappingFieldsRequest": {
      "description": "\n    Message to update a mapping fields related to an identity provider.\n    ",
      "id": "ServerCustomerMappingMappingMessagesUpdateMappingFieldsRequest",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ProvisioningFieldMapping"
          },
          "type": "array"
        },
        "providerUuid": {
          "description": "The uuid of the identity provider",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerCustomerMappingMappingMessagesUpdateProvisioningTemplateRequest": {
      "description": "\n    Message to update a mapping fields related to an identity provider.\n    ",
      "id": "ServerCustomerMappingMappingMessagesUpdateProvisioningTemplateRequest",
      "properties": {
        "providerUuid": {
          "description": "The uuid of the identity provider",
          "type": "string"
        },
        "template": {
          "description": "New template to use with the API provisioning",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListRequest": {
      "description": "\n    Resource for a DirectoryEntry list request\n    ",
      "id": "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "combinedMetadata": {
          "description": "\n    The list of metadata lists.\n    ",
          "items": {
            "$ref": "ServerCommonEndpointMessagesMetadataClauses"
          },
          "type": "array"
        },
        "currentInstance": {
          "description": "The ID of the current instance.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "directory": {
          "description": "\n        The list of directories used to filter the list.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "displaySortMandatory": {
          "default": "True",
          "description": "Whether the list must be sorted. (Default: true)",
          "type": "boolean"
        },
        "excludeIds": {
          "description": "The list of IDs to exclude from the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalKey": {
          "description": "The external key to link a content, directory entry or other.",
          "type": "string"
        },
        "ids": {
          "description": "The list of IDs used to filter the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "includeUserEntries": {
          "default": "True",
          "description": "Whether the list includes user specific entries. (Default: true)",
          "type": "boolean"
        },
        "instance": {
          "description": "The ID of the instance.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isMandatory": {
          "description": "\n        Whether the entries are mandatory. (Default: true)\n        ",
          "type": "boolean"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "metadata": {
          "description": "The list of metadata required for a model to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "orMetadata": {
          "description": "The list of metadata in which a model needs to have at least one of them to be part of the result.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "queryType": {
          "description": "The type of query.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "description": "\n    The status of the element.<br>\n    Acceptable values are:<br>\n     - \"DRAFT\": The model is a draft.<br>\n     - \"REFUSED\": The model has been rejected.<br>\n     - \"TO_VALIDATE\": The model is pending validation.<br>\n     - \"LIVE\": The model is validated.<br>\n     - \"ARCHIVE\": The model is archived.<br>\n     - \"DELETED\": The model is deleted.\n    ",
          "enum": [
            "DRAFT",
            "REFUSED",
            "TO_VALIDATE",
            "LIVE",
            "ARCHIVE",
            "DELETED",
            "PENDING"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "tags": {
          "description": "The list of tags used to filter the list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "userFavoritesOnly": {
          "description": "Limit the response to the entries that the user has marked as favorite.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListResponse": {
      "description": "\n    Resource for a DirectoryEntry list response\n    ",
      "id": "ServerDirectoryDirectoryEntryDirectoryEntryMessagesDirectoryEntryListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "DirectoryEntry"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDirectoryDirectoryMessagesDirectoryListResponse": {
      "description": "\n    Resource for a Directory list response\n    ",
      "id": "ServerDirectoryDirectoryMessagesDirectoryListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Directory"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesCategoryProperties": {
      "description": "\n    Properties for a category\n    ",
      "id": "ServerDocumentDocumentMessagesCategoryProperties",
      "properties": {
        "author": {
          "description": "The author of documents in this category",
          "type": "string"
        },
        "model": {
          "description": "'File' if the category only contains files, 'Folder' if the category only contains folders",
          "type": "string"
        },
        "recursive": {
          "description": "True if this category lists files recursively",
          "type": "boolean"
        },
        "shared": {
          "description": "True if the files in this category are shared",
          "type": "boolean"
        },
        "sharedWithMe": {
          "description": "True if the files in this category are shared with me",
          "type": "boolean"
        },
        "starred": {
          "description": "True if the files in this category are starred",
          "type": "boolean"
        },
        "trashed": {
          "description": "True if the files in this category are trashed",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesCreateFolderRequest": {
      "description": "\n    Request to create a folder\n    ",
      "id": "ServerDocumentDocumentMessagesCreateFolderRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "description": {
          "description": "The description of the folder to create(lumdrive)",
          "type": "string"
        },
        "name": {
          "description": "The name of the folder to create",
          "type": "string"
        },
        "parentPath": {
          "description": "Where to create the folder",
          "type": "string"
        },
        "serializedProperties": {
          "description": "The serialized properties of the category. Will be used in lumdrive if the parameter shared is absent, to determine whether the folder is shared",
          "type": "string"
        },
        "shared": {
          "description": "True if the folder is shared (lumdrive)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentActionRequest": {
      "description": "\n    Request message to perform an action(get/trash/restore) on a Document\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentActionRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "docPath": {
          "description": "The docPath of the document",
          "type": "string"
        },
        "searchParameters": {
          "$ref": "ServerDocumentDocumentMessagesCategoryProperties",
          "description": "The search parameters"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentGetMultiRequest": {
      "description": "\n    Request message for document/getMulti\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentGetMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "docPaths": {
          "description": "The list of docPaths",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentList": {
      "description": "\n    Response message for document/list\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentList",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentListRequest": {
      "description": "\n    Request message for document/list\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentListRequest",
      "properties": {
        "asApplication": {
          "description": "True if use the application to use application to list file",
          "type": "boolean"
        },
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "docPath": {
          "description": "The docPath of the item. It can be a provider, a site, a drive, or a resource (file or folder)",
          "type": "string"
        },
        "lang": {
          "description": "The language used for search purposes.",
          "type": "string"
        },
        "maxResults": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "searchInFolder": {
          "description": "True if list files in current folder",
          "type": "boolean"
        },
        "searchParameters": {
          "$ref": "ServerDocumentDocumentMessagesCategoryProperties",
          "description": "The search parameters"
        },
        "searchTags": {
          "description": "The document tags to search for",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "searchText": {
          "description": "The text to search for",
          "type": "string"
        },
        "searchTypes": {
          "description": "The document type within the provider, (possible: FOLDER, OTHER, IMAGE)",
          "items": {
            "enum": [
              "IMAGE",
              "OTHER",
              "FOLDER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "serializedProperties": {
          "description": "The serialized properties to use for search purposes. Will only be used if searchParameters is absent from the request.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentListResponse": {
      "description": "\n    Response message for document/list\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "unavailable": {
          "description": "True if user IDP doesn't match the media provider",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentMoveRequest": {
      "description": "\n    Request message to move a Document\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentMoveRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "destinationPath": {
          "description": "The docPath of the location where to move to the Document",
          "type": "string"
        },
        "sourcePath": {
          "description": "The docPath of the document to move",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentMyFilesUploadResponse": {
      "description": "\n    Response for a request to upload a Lumdrive file in \"My files\"\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentMyFilesUploadResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "uploadUrl": {
          "description": "The url where to upload the file chunks. The request must be a HTTP POST, with content-type 'multipart/form-data', and the binary data must be transmitted in the field named 'file'.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentPreviewResponse": {
      "description": "\n    Request message for document/list\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentPreviewResponse",
      "properties": {
        "previewUrl": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentSearchRequest": {
      "description": "\n    Request message for document/list\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentSearchRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "lang": {
          "description": "The language used for search purposes.",
          "type": "string"
        },
        "maxResults": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "mediaProvider": {
          "description": "A document provider (possible: drive, haussmann_media, local, onedrive)",
          "type": "string"
        },
        "searchRules": {
          "description": "The rules to condition the search",
          "type": "string"
        },
        "searchText": {
          "description": "The text to search for",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentSearchResponse": {
      "description": "\n    Response message for document/search\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentSearchResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Media"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentUploadRequest": {
      "description": "\n    Request a file upload\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentUploadRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "fileName": {
          "description": "The name of the file to upload",
          "type": "string"
        },
        "lang": {
          "description": "The language of the uploaded file(Lumdrive only)",
          "type": "string"
        },
        "parentPath": {
          "description": "Where to upload the file",
          "type": "string"
        },
        "serializedProperties": {
          "description": "The serialized properties of the category. Will be used in lumdrive if the parameter shared is absent, to determine whether the file is shared",
          "type": "string"
        },
        "shared": {
          "description": "True if the file is shared (lumdrive)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentUploadResponse": {
      "description": "\n    Response for a start upload request\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentUploadResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "formDataField": {
          "description": "The name of the formdata field where the file is written, or None if the request do not use the formdata protocol",
          "type": "string"
        },
        "headers": {
          "description": "The headers to use when sending the file",
          "type": "string"
        },
        "httpMethod": {
          "description": "The http method to use when sending the file, (possible: PUT, POST, GET)",
          "enum": [
            "PUT",
            "POST",
            "GET"
          ],
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "mediaId": {
          "description": "The Media ID",
          "type": "string"
        },
        "uploadUrl": {
          "description": "The url where to upload the file chunks",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesDocumentUserPermissionResponse": {
      "description": "\n    A request that specifies if user has the right to write.\n    ",
      "id": "ServerDocumentDocumentMessagesDocumentUserPermissionResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "isWriter": {
          "description": "The boolean according to user rights on a specific document",
          "type": "boolean"
        },
        "unavailable": {
          "description": "True if user permission can't be retrieved",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesEmptyResponse": {
      "description": "\n    Response containing only the callId.\n    ",
      "id": "ServerDocumentDocumentMessagesEmptyResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesEmptyTrashRequest": {
      "description": "\n    Request message for emptying the trash\n    ",
      "id": "ServerDocumentDocumentMessagesEmptyTrashRequest",
      "properties": {
        "docPath": {
          "description": "The docPath of the trash",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesProvider": {
      "description": "\n    Provider message\n    ",
      "id": "ServerDocumentDocumentMessagesProvider",
      "properties": {
        "categories": {
          "description": "The categories for this provider",
          "items": {
            "$ref": "ServerDocumentDocumentMessagesProviderCategory"
          },
          "type": "array"
        },
        "driveResourceAuthorized": {
          "description": "The list of actions which can be used to create documents for this provider",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "The provider id",
          "type": "string"
        },
        "sortableFields": {
          "description": "The list of fields which can be used for sorting documents for this provider",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesProviderCategory": {
      "description": "\n    Provider category message\n    ",
      "id": "ServerDocumentDocumentMessagesProviderCategory",
      "properties": {
        "canManage": {
          "description": "True if the user has permission to manage this category",
          "type": "boolean"
        },
        "canPick": {
          "description": "True if the user has permission to pick documents from this category",
          "type": "boolean"
        },
        "id": {
          "description": "The provider category id",
          "type": "string"
        },
        "properties": {
          "$ref": "ServerDocumentDocumentMessagesCategoryProperties",
          "description": "The properties for this category"
        },
        "rootPath": {
          "description": "The root path for the documents in this category",
          "type": "string"
        },
        "searchTypes": {
          "description": "The document type within the provider, (possible: FOLDER, OTHER, IMAGE)",
          "items": {
            "enum": [
              "IMAGE",
              "OTHER",
              "FOLDER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "serializedProperties": {
          "description": "The serialized properties for this category",
          "type": "string"
        },
        "sortOrder": {
          "description": "The sort order for this category",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentDocumentMessagesProviderListResponse": {
      "description": "\n    Response containing the providers and their categories for the user\n    ",
      "id": "ServerDocumentDocumentMessagesProviderListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "providers": {
          "description": "The providers for the user",
          "items": {
            "$ref": "ServerDocumentDocumentMessagesProvider"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerDocumentOnedriveMessagesOneDriveSite": {
      "description": "\n    Message describing a one drive group\n    ",
      "id": "ServerDocumentOnedriveMessagesOneDriveSite",
      "properties": {
        "createdDateTime": {
          "description": "The site createdDateTime.",
          "type": "string"
        },
        "description": {
          "description": "The site description.",
          "type": "string"
        },
        "displayName": {
          "description": "The site displayName.",
          "type": "string"
        },
        "lastModifiedDateTime": {
          "description": "The site lastModifiedDateTime.",
          "type": "string"
        },
        "name": {
          "description": "The site name.",
          "type": "string"
        },
        "type": {
          "description": "The kind of the object (\"ONEDRIVE_SITE\")",
          "type": "string"
        },
        "uid": {
          "description": "The site id.",
          "type": "string"
        },
        "webUrl": {
          "description": "The site webUrl.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDocumentOnedriveMessagesOneDriveSiteListResponse": {
      "description": "\n    Message describing a onedrive.site.list response\n    ",
      "id": "ServerDocumentOnedriveMessagesOneDriveSiteListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The one drive sites.",
          "items": {
            "$ref": "ServerDocumentOnedriveMessagesOneDriveSite"
          },
          "type": "array"
        },
        "maxResults": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "format": "int64",
          "type": "string"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveCopyFileRequest": {
      "id": "ServerDriveDriveMessagesDriveCopyFileRequest",
      "properties": {
        "fileId": {
          "description": "The ID of the file to copy.",
          "type": "string"
        },
        "folder": {
          "description": "The ID of the folder to copy the file in.",
          "type": "string"
        },
        "title": {
          "description": "The title of the file.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveFileIdRequest": {
      "id": "ServerDriveDriveMessagesDriveFileIdRequest",
      "properties": {
        "fileId": {
          "description": "The ID of the file.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of Drive file",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveFileResource": {
      "description": "\n    Resource for a Drive file\n    ",
      "id": "ServerDriveDriveMessagesDriveFileResource",
      "properties": {
        "embedLink": {
          "description": "A link for embedding the file (Not yet implemented).",
          "type": "string"
        },
        "fileSize": {
          "description": "The size of the file in bytes.\n                                                    This field is only populated for files with content stored in Drive;\n                                                    it is not populated for Google Docs or shortcut files\n                                                    (Not yet implemented).",
          "type": "string"
        },
        "id": {
          "description": "The ID of the file.",
          "type": "string"
        },
        "isFolder": {
          "description": "Whether the file is a folder.",
          "type": "boolean"
        },
        "lastModifyingUserName": {
          "description": "Name of the last user to modify this file.",
          "type": "string"
        },
        "lastUpdate": {
          "description": "Last time this file was modified by anyone (formatted RFC 3339 timestamp). ",
          "type": "string"
        },
        "link": {
          "description": "A link for opening the file in a relevant Google editor or viewer.",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of the file.",
          "type": "string"
        },
        "ownersName": {
          "description": "The owner(s) name of this file.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "role": {
          "description": "The role for the authenticated user on this file.",
          "type": "string"
        },
        "thumbnailLink": {
          "description": "A short-lived link to the file's thumbnail.\n                             Typically lasts on the order of hours (Not yet implemented).",
          "type": "string"
        },
        "title": {
          "description": "The title of the file.",
          "type": "string"
        },
        "videoMediaMetadata": {
          "description": "The metadata about video media (only for video files).",
          "type": "string"
        },
        "webContentLink": {
          "description": "A link for downloading the content of the file\n                              in a browser using cookie based authentication.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveInsertRequest": {
      "id": "ServerDriveDriveMessagesDriveInsertRequest",
      "properties": {
        "kind": {
          "description": "Kind of Drive file",
          "type": "string"
        },
        "mimeType": {
          "description": "The MIME type of the file.",
          "type": "string"
        },
        "parentId": {
          "description": "The ID of the folder to create the file in.",
          "type": "string"
        },
        "title": {
          "description": "The title of the file.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveListResponse": {
      "description": "\n    Resource for a response of a Drive list response\n    ",
      "id": "ServerDriveDriveMessagesDriveListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerDriveDriveMessagesDriveFileResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveMoveFileRequest": {
      "id": "ServerDriveDriveMessagesDriveMoveFileRequest",
      "properties": {
        "fileId": {
          "description": "The ID of the file to move.",
          "type": "string"
        },
        "keepOriginFolder": {
          "description": "Whether to let the file in the source folder. (Default: false)",
          "type": "boolean"
        },
        "target": {
          "description": "The ID of the folder to move the file in.",
          "type": "string"
        },
        "title": {
          "description": "The title of the file.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesDriveUpdateFileRequest": {
      "id": "ServerDriveDriveMessagesDriveUpdateFileRequest",
      "properties": {
        "description": {
          "description": "A short description of the file.",
          "type": "string"
        },
        "fileId": {
          "description": "The ID of the file.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of Drive file",
          "type": "string"
        },
        "parentId": {
          "description": "The ID of the folder to create the file in.",
          "type": "string"
        },
        "title": {
          "description": "The title of the file.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerDriveDriveMessagesTokenResponse": {
      "description": "\n    Message for a user token response.\n    ",
      "id": "ServerDriveDriveMessagesTokenResponse",
      "properties": {
        "accessToken": {
          "description": "The token that can be sent to the Google Drive API.",
          "type": "string"
        },
        "expiresIn": {
          "description": "The number of seconds left in the lifetime of the token.",
          "type": "string"
        },
        "tokenType": {
          "description": "This is always Bearer.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerEmailEmailMessagesEmailSendRequest": {
      "description": "\n    Details about email to send.\n    ",
      "id": "ServerEmailEmailMessagesEmailSendRequest",
      "properties": {
        "body": {
          "description": "The body of the email.",
          "type": "string"
        },
        "captcha": {
          "description": "The captcha result. (Required is the call is anonymous)",
          "type": "string"
        },
        "contentId": {
          "description": "The id of the content containing the widget.",
          "type": "string"
        },
        "subject": {
          "description": "The subject of the email.",
          "type": "string"
        },
        "widgetId": {
          "description": "The widget used to send the email.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerFavoriteFavoriteMessagesFavoriteListRequest": {
      "id": "ServerFavoriteFavoriteMessagesFavoriteListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "owners": {
          "description": "The owners of the favorite. Can be a User or a Feed. (Default: the current user)",
          "items": {
            "$ref": "ServerCommonEndpointMessagesCompleteDatastoreKey"
          },
          "type": "array"
        },
        "targetKind": {
          "description": "The target entity kind. Can be a DirectoryEntry or an Instance.",
          "enum": [
            "DirectoryEntry",
            "Instance"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerFavoriteFavoriteMessagesFavoriteListResponse": {
      "id": "ServerFavoriteFavoriteMessagesFavoriteListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerCommonEndpointMessagesCompleteDatastoreKey"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerFavoriteFavoriteMessagesMarkAsFavoriteRequest": {
      "id": "ServerFavoriteFavoriteMessagesMarkAsFavoriteRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "deletable": {
          "description": "Whether the favorite will be deletable.",
          "type": "boolean"
        },
        "owners": {
          "description": "The owners of the favorite. Can be a User or a Feed. (Default: the current user)",
          "items": {
            "$ref": "ServerCommonEndpointMessagesCompleteDatastoreKey"
          },
          "type": "array"
        },
        "target": {
          "$ref": "ServerCommonEndpointMessagesCompleteDatastoreKey",
          "description": "The target entity. Can be a DirectoryEntry or an Instance."
        }
      },
      "type": "object"
    },
    "ServerFavoriteFavoriteMessagesRehydratedFavoriteListResponse": {
      "id": "ServerFavoriteFavoriteMessagesRehydratedFavoriteListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "directoryEntries": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "DirectoryEntry"
          },
          "type": "array"
        },
        "instances": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Instance"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlag": {
      "id": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlag",
      "properties": {
        "customerValue": {
          "description": "Customer value, one of [default, active, inactive]",
          "type": "string"
        },
        "defaultValue": {
          "description": "Default value of the feature, one of [active, inactive]",
          "type": "string"
        },
        "description": {
          "description": "Description of the feature (i18n token)",
          "type": "string"
        },
        "name": {
          "description": "Feature Token",
          "type": "string"
        },
        "status": {
          "description": "Status of the feature (internal, public, ...)",
          "type": "string"
        },
        "title": {
          "description": "Title of the feature (i18n token)",
          "type": "string"
        },
        "warningMessage": {
          "description": "Warning to display on status update of the feature (i18n token)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagCustomerValue": {
      "id": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagCustomerValue",
      "properties": {
        "customerValue": {
          "description": "Customer value, one of [default, active, inactive]",
          "type": "string"
        },
        "name": {
          "description": "Feature flag identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagListResponse": {
      "description": "\n     Response message for featureFlags/list\n    ",
      "id": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagListResponse",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlag"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagSaveRequest": {
      "description": "\n    Feature Flags Set request\n    ",
      "id": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagSaveRequest",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerFeatureFlagsFeatureFlagsMessagesFeatureFlagCustomerValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerFeedFeedMessagesFeedListRequest": {
      "description": "\n    Resource for a a Feed list request\n    ",
      "id": "ServerFeedFeedMessagesFeedListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "exceptFeeds": {
          "description": "A list of Feed ID to exclude from results.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "hasGroup": {
          "description": "Whether to list feeds synchronized with Google Group.",
          "type": "boolean"
        },
        "herited": {
          "default": "True",
          "description": "Whether to list feeds from a parent instance.",
          "type": "boolean"
        },
        "instance": {
          "description": "The ID of the instance.",
          "type": "string"
        },
        "maxResults": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "restrictToFeeds": {
          "description": "Restrict results within a list of Feed ID.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "The type of the feeds to list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerFeedFeedMessagesFeedListResponse": {
      "description": "\n    Resource for a response of a Feed list request\n    ",
      "id": "ServerFeedFeedMessagesFeedListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Feed"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerFeedFeedMessagesFeedSubscribersRequest": {
      "description": "\n    Resource for a feed subscribers edition.\n    ",
      "id": "ServerFeedFeedMessagesFeedSubscribersRequest",
      "properties": {
        "addedUsers": {
          "description": "A list of users email or ID to add to the feed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "experimental": {
          "description": "*alpha* enable experimental fast user subscription, only support emails in that mode.",
          "type": "boolean"
        },
        "feed": {
          "description": "The ID of the feed to add or remove users from.",
          "type": "string"
        },
        "removedUsers": {
          "description": "A list of users email or ID to add to the feed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerFeedFeedtypeMessagesFeedTypeListResponse": {
      "description": "\n    Resource for a response of a Feed list request\n    ",
      "id": "ServerFeedFeedtypeMessagesFeedTypeListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "FeedType"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerGmailGmailMessagesGmailListResponse": {
      "description": "\n    Resource for a response of a Gmail's list request\n    ",
      "id": "ServerGmailGmailMessagesGmailListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerGmailGmailMessagesGmailResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerGmailGmailMessagesGmailResource": {
      "description": "\n    Resource for a Gmail's file\n    ",
      "id": "ServerGmailGmailMessagesGmailResource",
      "properties": {
        "id": {
          "description": "The ID of the email.",
          "type": "string"
        },
        "sender": {
          "description": "The sender of the email.",
          "type": "string"
        },
        "snippet": {
          "description": "The snippet of the email.",
          "type": "string"
        },
        "title": {
          "description": "The title of the email.",
          "type": "string"
        },
        "webLink": {
          "description": "The link to the email.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGetAllApplicationsResponse": {
      "description": "\n    Resource for the response of a group application \"get all\" request\n    ",
      "id": "ServerGroupsGroupsMessagesGetAllApplicationsResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of the group's applications.",
          "items": {
            "$ref": "ServerGroupsGroupsMessagesGroupApplicationResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGetAllUsersResponse": {
      "description": "\n    Resource for the response of a group user \"get all\" request\n    ",
      "id": "ServerGroupsGroupsMessagesGetAllUsersResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of the group's users emails.",
          "items": {
            "$ref": "ServerGroupsGroupsMessagesGroupUserResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGetResponse": {
      "description": "\n    Resource for the response of a group get request\n    ",
      "id": "ServerGroupsGroupsMessagesGetResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "description": {
          "description": "The group description.",
          "type": "string"
        },
        "email": {
          "description": "The group email.",
          "type": "string"
        },
        "id": {
          "description": "The group ID",
          "type": "string"
        },
        "name": {
          "description": "The group name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGroupApplicationResource": {
      "description": "\n    Resource for a group application\n    ",
      "id": "ServerGroupsGroupsMessagesGroupApplicationResource",
      "properties": {
        "name": {
          "description": "The group application ID.",
          "type": "string"
        },
        "url": {
          "description": "The group application URL.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGroupResource": {
      "description": "\n    Resource for a group user\n    ",
      "id": "ServerGroupsGroupsMessagesGroupResource",
      "properties": {
        "description": {
          "description": "The group description.",
          "type": "string"
        },
        "email": {
          "description": "The group email.",
          "type": "string"
        },
        "id": {
          "description": "The group ID",
          "type": "string"
        },
        "name": {
          "description": "The group name.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesGroupUserResource": {
      "description": "\n    Resource for a group user\n    ",
      "id": "ServerGroupsGroupsMessagesGroupUserResource",
      "properties": {
        "email": {
          "description": "The group user email.",
          "type": "string"
        },
        "groupUserType": {
          "description": "The group users type. It can be owners or members. Only relevant for Microsoft.",
          "type": "string"
        },
        "id": {
          "description": "The group user ID",
          "type": "string"
        },
        "userId": {
          "description": "The lumapps user ID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerGroupsGroupsMessagesListResponse": {
      "description": "\n    Resource for the response of a groups list request\n    ",
      "id": "ServerGroupsGroupsMessagesListResponse",
      "properties": {
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "groups": {
          "description": "The list of groups.",
          "items": {
            "$ref": "ServerGroupsGroupsMessagesGroupResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesExtensionProviderUpsertRequest": {
      "description": "\n    Request to upsert an Extension provider\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesExtensionProviderUpsertRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "extensionProviderUuid": {
          "description": "The UUID of the Extension provider",
          "type": "string"
        },
        "name": {
          "description": "The Extension provider's name",
          "type": "string"
        },
        "order": {
          "description": "The Extension provider's order",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesFeedIdMessage": {
      "id": "ServerHaussmannProvisioningProvisioningMessagesFeedIdMessage",
      "properties": {
        "id": {
          "description": "The created/get feed id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesGroupsCreationRequest": {
      "description": "\n    List request to get users\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesGroupsCreationRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "groupId": {
          "description": "LumApps feed ID",
          "format": "int64",
          "type": "string"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "operationId": {
          "description": "*deprecated* The operation ID provisioning service side, for update the status of what happen here",
          "type": "string"
        },
        "providerGroupId": {
          "description": "Remote provider's group ID",
          "type": "string"
        },
        "scimUuid": {
          "description": "SCIM Provider UUID",
          "type": "string"
        },
        "usersToAdd": {
          "description": "\n        *deprecated* User's unifiedProfileId to add in the targeted feed\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usersToRemove": {
          "description": "\n        *deprecated* User's unifiedProfileId to remove from the targeted feed\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesGroupsRenameRequest": {
      "description": "\n    List request to rename a group\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesGroupsRenameRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "groupId": {
          "description": "LumApps feed ID",
          "format": "int64",
          "type": "string"
        },
        "groupName": {
          "description": "Group name",
          "type": "string"
        },
        "operationId": {
          "description": "*deprecated* The operation ID provisioning service side, for update the status of what happen here",
          "type": "string"
        },
        "providerGroupId": {
          "description": "Remote provider's group ID",
          "type": "string"
        },
        "scimUuid": {
          "description": "SCIM Provider UUID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileDataMessage": {
      "id": "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileDataMessage",
      "properties": {
        "operationId": {
          "description": "The operation ID provisioning service side, for update the status of what happen here",
          "type": "string"
        },
        "unifiedProfileId": {
          "description": "\n        The unique identifier of the unified profile coming from the provisioning service.\n        It is used to ensure the unicity of users on the monolith.\n        ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileRequest": {
      "id": "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "data": {
          "description": "The user's data with unified profile id and operation id'",
          "items": {
            "$ref": "ServerHaussmannProvisioningProvisioningMessagesUnifiedProfileDataMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesUserGroupMembershipsRequest": {
      "description": "\n    Request containing the link between a User and a Feed\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesUserGroupMembershipsRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "forceReplace": {
          "description": "Flag to defined if the process should replace every group's membership (except manual group)",
          "type": "boolean"
        },
        "userGroupsData": {
          "description": "The owners of the favorite. Can be a User or a Feed. (Default: the current user)",
          "items": {
            "$ref": "ServerHaussmannProvisioningProvisioningMessagesUserGroupsDataMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesUserGroupsDataMessage": {
      "description": "\n    Sub-message of UserGroupMembershipsRequest.userGroupsData\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesUserGroupsDataMessage",
      "properties": {
        "groupIds": {
          "description": "List of Group ids (a.k.a Feed.id) to subscribes the user",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "operationId": {
          "description": "The operation ID provisioning service side, for update the status of what happen here",
          "type": "string"
        },
        "unifiedProfileId": {
          "description": "\n        The unique identifier of the unified profile coming from the provisioning service.\n        It is used to ensure the unicity of users on the monolith.\n        ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerHaussmannProvisioningProvisioningMessagesUsersCreationRequest": {
      "description": "\n    List request to get users\n    ",
      "id": "ServerHaussmannProvisioningProvisioningMessagesUsersCreationRequest",
      "properties": {
        "customerId": {
          "description": "The customer id",
          "format": "int64",
          "type": "string"
        },
        "useFederationValue": {
          "description": "*deprecated* Get existing Lumapps user, using the federationValue attribute",
          "type": "boolean"
        },
        "usersData": {
          "description": "\n        The users data retrieved from the provider and the related idp uuid.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerHeaderHeaderMessagesHeaderListResponse": {
      "description": "\n    Resource for a response of a Header's list request\n    ",
      "id": "ServerHeaderHeaderMessagesHeaderListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Header"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesGenerateUrlResponse": {
      "description": "\n    Resource for an upload url generation response\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesGenerateUrlResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "uploadUrl": {
          "description": "Url to use for file upload. Use it in form-data html form.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesJsonSchemaResponse": {
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesJsonSchemaResponse",
      "properties": {
        "schema": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningPreviewUserResponse": {
      "description": "\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningPreviewUserResponse",
      "properties": {
        "errors": {
          "description": "",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isValid": {
          "description": "",
          "type": "boolean"
        },
        "userProfile": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUserRequest": {
      "description": "\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUserRequest",
      "properties": {
        "providerUuid": {
          "description": "The uuid of the identity provider",
          "type": "string"
        },
        "user": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersRequest": {
      "description": "\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersRequest",
      "properties": {
        "callbackUrl": {
          "description": "",
          "type": "string"
        },
        "providerUuid": {
          "description": "The uuid of the identity provider",
          "type": "string"
        },
        "users": {
          "description": "",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersResponse": {
      "description": "\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesProvisioningUsersResponse",
      "properties": {
        "reportId": {
          "description": "",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesSchemaValidationResponse": {
      "description": "\n    ",
      "id": "ServerIdentityProviderExternalProvisioningExternalProvisioningMessagesSchemaValidationResponse",
      "properties": {
        "errors": {
          "description": "",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isValid": {
          "description": "",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesInsightDocumentMessage": {
      "description": "\n    An insight document model\n    ",
      "id": "ServerInsightInsightMessagesInsightDocumentMessage",
      "properties": {
        "id": {
          "description": "The id of the insight document",
          "type": "string"
        },
        "lastShared": {
          "$ref": "ServerInsightInsightMessagesResourceSharedMessage",
          "description": "The shared information of the insight document"
        },
        "lastUsed": {
          "$ref": "ServerInsightInsightMessagesResourceUsedMessage",
          "description": "The used information of the insight document"
        },
        "reference": {
          "$ref": "ServerInsightInsightMessagesResourceReferenceMessage",
          "description": "The resource reference of the insight document"
        },
        "visualization": {
          "$ref": "ServerInsightInsightMessagesResourceVisualizationMessage",
          "description": "The resource visualization of the insight document"
        },
        "weight": {
          "description": "The weight of the insight document",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesInsightDocumentsListResponse": {
      "description": "\n    Response message for documents/trending/list\n    ",
      "id": "ServerInsightInsightMessagesInsightDocumentsListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerInsightInsightMessagesInsightDocumentMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesInsightPeopleListResponse": {
      "description": "\n    Response message for people/list\n    ",
      "id": "ServerInsightInsightMessagesInsightPeopleListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerInsightInsightMessagesInsightPeopleMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesInsightPeopleMessage": {
      "description": "\n    An insight people model\n    ",
      "id": "ServerInsightInsightMessagesInsightPeopleMessage",
      "properties": {
        "company": {
          "description": "The company of the insight people",
          "type": "string"
        },
        "department": {
          "description": "The department of the insight people",
          "type": "string"
        },
        "emails": {
          "description": "The emails of the insight people",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firstName": {
          "description": "The first name of the insight people",
          "type": "string"
        },
        "fullName": {
          "description": "The full name of the insight people",
          "type": "string"
        },
        "id": {
          "description": "The id of the insight people",
          "type": "string"
        },
        "imAddress": {
          "description": "The instant messenging address of the insight people",
          "type": "string"
        },
        "jobTitle": {
          "description": "The user principal name of the insight people",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the insight people",
          "type": "string"
        },
        "officeLocation": {
          "description": "The office location of the insight people",
          "type": "string"
        },
        "personSubType": {
          "description": "The sub type of the insight people",
          "type": "string"
        },
        "personType": {
          "description": "The main type of the insight people",
          "type": "string"
        },
        "phones": {
          "description": "The phone numbers of the insight people",
          "items": {
            "$ref": "ServerInsightInsightMessagesPhoneMessage"
          },
          "type": "array"
        },
        "pictureUrl": {
          "description": "The picture url of the insight people",
          "type": "string"
        },
        "upn": {
          "description": "The user principal name of the insight people",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesPhoneMessage": {
      "description": "\n    A phone information\n    ",
      "id": "ServerInsightInsightMessagesPhoneMessage",
      "properties": {
        "number": {
          "description": "The phone number",
          "type": "string"
        },
        "phoneType": {
          "description": "The type of the phone number",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesResourceReferenceMessage": {
      "description": "\n    A resource reference model\n    ",
      "id": "ServerInsightInsightMessagesResourceReferenceMessage",
      "properties": {
        "graphType": {
          "description": "The graph type of the source reference",
          "type": "string"
        },
        "id": {
          "description": "The id of the source reference",
          "type": "string"
        },
        "webUrl": {
          "description": "The web URL of the source reference",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesResourceSharedMessage": {
      "description": "\n    A resource used model\n    ",
      "id": "ServerInsightInsightMessagesResourceSharedMessage",
      "properties": {
        "shared": {
          "description": "The shared date time of the resource",
          "type": "string"
        },
        "sharedBy": {
          "$ref": "ServerInsightInsightMessagesUserMessage",
          "description": "The shared by of the resource"
        },
        "sharingReference": {
          "$ref": "ServerInsightInsightMessagesResourceReferenceMessage",
          "description": "The sharing reference of the resource"
        },
        "sharingSubject": {
          "description": "The sharing subject of the resource",
          "type": "string"
        },
        "sharingType": {
          "description": "The sharing type of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesResourceUsedMessage": {
      "description": "\n    A resource used model\n    ",
      "id": "ServerInsightInsightMessagesResourceUsedMessage",
      "properties": {
        "lastAccessed": {
          "description": "The last accessed date time of the resource",
          "type": "string"
        },
        "lastModified": {
          "description": "The last modified date time of the resource",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesResourceVisualizationMessage": {
      "description": "\n    A resource visualisation model\n    ",
      "id": "ServerInsightInsightMessagesResourceVisualizationMessage",
      "properties": {
        "containerDisplayName": {
          "description": "The container Display Name of the resource visualization",
          "type": "string"
        },
        "containerType": {
          "description": "The container type of the resource visualization",
          "type": "string"
        },
        "containerWebUrl": {
          "description": "The container Web URL of the resource visualization",
          "type": "string"
        },
        "mediaType": {
          "description": "The media type of the resource visualization",
          "type": "string"
        },
        "previewImageUrl": {
          "description": "The preview image URL of the resource visualization",
          "type": "string"
        },
        "previewText": {
          "description": "The preview text of the resource visualization",
          "type": "string"
        },
        "resourceType": {
          "description": "The resource type of the resource visualization",
          "type": "string"
        },
        "title": {
          "description": "The title of the resource visualization",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInsightInsightMessagesUserMessage": {
      "description": "\n    A user message model\n    ",
      "id": "ServerInsightInsightMessagesUserMessage",
      "properties": {
        "displayName": {
          "description": "The user's display name",
          "type": "string"
        },
        "email": {
          "description": "The user's email address",
          "type": "string"
        },
        "id": {
          "description": "The user's id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceAdminListResponse": {
      "description": "\n    Resource for a response of a Instance's list request\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceAdminListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceAdminRequest": {
      "description": "\n    Resource for a Instance's admin add/remove request\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceAdminRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "email": {
          "description": "The email of the instance's administrator.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceListMetadataRequest": {
      "description": "\n    Resource for an instance metadata list request.\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceListMetadataRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "instance": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "rootOnly": {
          "description": "If true, return root metadata only. (Default: false)",
          "type": "boolean"
        },
        "withInheritance": {
          "description": "Retrieve metadata from parent instance and plateform.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceListMetadataResponse": {
      "description": "\n    Response from an instance metadata list request.\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceListMetadataResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceListRequest": {
      "description": "\n    Resource for a a Instance's list request\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "combinedMetadata": {
          "description": "The list of metadata lists.",
          "items": {
            "$ref": "ServerCommonEndpointMessagesMetadataClauses"
          },
          "type": "array"
        },
        "considerUserIdentity": {
          "default": "True",
          "description": "Whether we should take into account the user identity to compute instance fields (like deletableFromFavorites). (Default: true)",
          "type": "boolean"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "emptyParent": {
          "description": "Whether the instance has no parent. (Default: false)",
          "type": "boolean"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "ids": {
          "description": "The list of instance IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "name": {
          "description": "The name of the instance.",
          "type": "string"
        },
        "parent": {
          "description": "The parent of the instance.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the element.<br>\n    Acceptable values are:<br>\n     - \"DRAFT\": The model is a draft.<br>\n     - \"REFUSED\": The model has been rejected.<br>\n     - \"TO_VALIDATE\": The model is pending validation.<br>\n     - \"LIVE\": The model is validated.<br>\n     - \"ARCHIVE\": The model is archived.<br>\n     - \"DELETED\": The model is deleted.\n    ",
          "enum": [
            "DRAFT",
            "REFUSED",
            "TO_VALIDATE",
            "LIVE",
            "ARCHIVE",
            "DELETED",
            "PENDING"
          ],
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string"
        },
        "userFavoritesOnly": {
          "description": "Limit the response to the instances that the user has marked as favorite.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceListResponse": {
      "description": "\n    Resource for a response of a Instance's list request\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Instance"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerInstanceInstanceMessagesInstanceSiblingsListResponse": {
      "description": "\n    Resource for a siblings instance list request.\n    ",
      "id": "ServerInstanceInstanceMessagesInstanceSiblingsListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Instance"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerIntegrationIntegrationMessagesIntegrationSearchResponse": {
      "description": "\n    Generic integration message to search resources.\n    ",
      "id": "ServerIntegrationIntegrationMessagesIntegrationSearchResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerIntegrationZendeskZendeskMessagesZendeskFilters": {
      "description": "\n    Inner field for ZendeskSearchRequest\n    ",
      "id": "ServerIntegrationZendeskZendeskMessagesZendeskFilters",
      "properties": {
        "assignee": {
          "description": "The Zendesk ticket assignees, i.e. a user name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "brand": {
          "description": "The brands associated to a Zendesk article.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "description": "The Zendesk ticket statuses, e.g. open or pending.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "tags": {
          "description": "The Zendesk ticket tags.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ticket_type": {
          "description": "The Zendesk ticket types, e.g. problem or question.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "The Zendesk resource type, e.g. ticket or article.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "updatedAfterDate": {
          "description": "The date after which Zendesk tickets have been updated.",
          "type": "string"
        },
        "updatedBeforeDate": {
          "description": "The date before which Zendesk tickets have been updated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerIntegrationZendeskZendeskMessagesZendeskSearchRequest": {
      "description": "\n    Response to a Zendesk search request.\n    ",
      "id": "ServerIntegrationZendeskZendeskMessagesZendeskSearchRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "filters": {
          "$ref": "ServerIntegrationZendeskZendeskMessagesZendeskFilters",
          "description": "The Zendesk filters."
        },
        "query": {
          "description": "The text to be searched.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerMetadataMetadataMessagesErrorReason": {
      "description": "\n    Error and its relative object\n    ",
      "id": "ServerMetadataMetadataMessagesErrorReason",
      "properties": {
        "reason": {
          "description": "The error description.",
          "type": "string"
        },
        "target": {
          "$ref": "Metadata",
          "description": "The invalid metadata."
        }
      },
      "type": "object"
    },
    "ServerMetadataMetadataMessagesMetadataListResponse": {
      "description": "\n    Resource for a response of a Metadata's list request\n    ",
      "id": "ServerMetadataMetadataMessagesMetadataListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "errors": {
          "description": "The list of errors and their relative target.",
          "items": {
            "$ref": "ServerMetadataMetadataMessagesErrorReason"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerMetadataMetadataMessagesSaveMetadataMultiRequest": {
      "description": "\n    Resource for a list of metadata to save\n    ",
      "id": "ServerMetadataMetadataMessagesSaveMetadataMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Metadata"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerMiscMiscMessagesUrlinfoResponse": {
      "description": "\n    Resource for a UrlInfo response\n    ",
      "id": "ServerMiscMiscMessagesUrlinfoResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "code": {
          "description": "The http response code.",
          "format": "int64",
          "type": "string"
        },
        "description": {
          "description": "The description of the website.",
          "type": "string"
        },
        "images": {
          "description": "The list of images found on the website.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "The title of the website.",
          "type": "string"
        },
        "url": {
          "description": "The website url.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNewsletterNewsletterMessagesNewsletterListResponse": {
      "description": "\n    Resource for a response of a newsletter's list request\n    ",
      "id": "ServerNewsletterNewsletterMessagesNewsletterListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Newsletter"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerNewsletterNewsletterMessagesSendNewsletterRequest": {
      "description": "\n    Resource to send a newsletter request\n    ",
      "id": "ServerNewsletterNewsletterMessagesSendNewsletterRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "html": {
          "description": "The HTML content to send.",
          "type": "string"
        },
        "lang": {
          "description": "The language. (Format: xx)<br>\n    Acceptable values are:<br>\n     - \"cn\": Chinese<br>\n     - \"en\": English<br>\n     - \"es\": Spanish<br>\n     - \"fr\": French<br>\n     - \"it\": Italian<br>\n     - \"nl\": Dutch<br>\n     - \"pl\": Polish<br>\n     - \"pt\": Portuguese<br>\n     - \"tr\": Turkish<br>\n     - \"cs\": Czech<br>\n     - \"sv\": Swedish<br>\n     - \"de\": German<br>\n     - \"ru\": Russian<br>\n     - \"ja\": Japanese<br>\n     - \"pt_br\": Brazilian Portuguese\n    ",
          "type": "string"
        },
        "newsletterId": {
          "description": "The ID of the newsletter to send.",
          "type": "string"
        },
        "toTesters": {
          "description": "Whether to send to newsletter to testers.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerNewsletterNewsletterMessagesSendNewsletterResponse": {
      "description": "\n    Resource for a newsletter who has sent\n    ",
      "id": "ServerNewsletterNewsletterMessagesSendNewsletterResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "sent": {
          "description": "Whether the newsletter has been sent.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesCheckLastNotificationResponse": {
      "description": "\n    Gets the ID of the last notification\n    ",
      "id": "ServerNotificationNotificationMessagesCheckLastNotificationResponse",
      "properties": {
        "retryIn": {
          "description": "The minimum time (in seconds) a client should wait before polling this response again.",
          "format": "int64",
          "type": "string"
        },
        "uid": {
          "description": "The identifier of the last notification received by the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesCountUnreadNotificationsResponse": {
      "description": "\n    Count the unread notifications of a user\n    ",
      "id": "ServerNotificationNotificationMessagesCountUnreadNotificationsResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "unreadNotificationsCount": {
          "description": "The number of unread notifications for the user. If the user has more than 30 unread notifications, 31 is returned",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesNotificationGroupResource": {
      "description": "\n    Notification group (notification + its actions)\n    ",
      "id": "ServerNotificationNotificationMessagesNotificationGroupResource",
      "properties": {
        "actions": {
          "description": "The list of notification actions.",
          "items": {
            "$ref": "NotificationAction"
          },
          "type": "array"
        },
        "digest": {
          "description": "The notification group hash.",
          "type": "string"
        },
        "notification": {
          "$ref": "Notification",
          "description": "The user notification."
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesNotificationIdsResource": {
      "description": "\n    List of notification ids\n    ",
      "id": "ServerNotificationNotificationMessagesNotificationIdsResource",
      "properties": {
        "notificationIds": {
          "description": "The notification ids.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "unreadNotificationCount": {
          "description": "The number of total of unread notifications.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesNotificationListRequest": {
      "description": "\n    Notification list request\n    ",
      "id": "ServerNotificationNotificationMessagesNotificationListRequest",
      "properties": {
        "functionalInnerId": {
          "description": "A code to describe the object.",
          "type": "string"
        },
        "instanceIds": {
          "description": "The list of instance identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isRead": {
          "description": "Whether the notification have already been read.",
          "type": "boolean"
        },
        "parentId": {
          "description": "The notifications parentId.",
          "type": "string"
        },
        "sortOrder": {
          "description": "\"\n        The sortOrder of the list. (Format: (-)attribute) <br>\n        The only accepted attribute right now is 'priority'.\n    ",
          "type": "string"
        },
        "userId": {
          "description": "The ID of the user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesNotificationListResponse": {
      "id": "ServerNotificationNotificationMessagesNotificationListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerNotificationNotificationMessagesNotificationGroupResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "unreadNotificationsCount": {
          "description": "The unread notifications number",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesNotificationResponse": {
      "id": "ServerNotificationNotificationMessagesNotificationResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerNotificationNotificationMessagesNotificationGroupResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesSendNotificationRequest": {
      "description": "\n    Create a new notification\n    ",
      "id": "ServerNotificationNotificationMessagesSendNotificationRequest",
      "properties": {
        "customType": {
          "description": "\n        The custom type of the notification.<br>\n        This is only applicable if type is custom.\n        ",
          "type": "string"
        },
        "description": {
          "description": "The description of the notification. (Format: JSON object)",
          "type": "string"
        },
        "externalKeyId": {
          "description": "The external key to link a content, directory entry or other.",
          "type": "string"
        },
        "externalKeyKind": {
          "description": "The external key kind.",
          "type": "string"
        },
        "feedKeys": {
          "description": "The list of feed IDs.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "functionalInnerId": {
          "description": "A code to describe the object.",
          "type": "string"
        },
        "group": {
          "description": "\n        Whether the notifications of a same type and having the same linked object are group together.\n        (Default: false)\n        ",
          "type": "boolean"
        },
        "groupDescription": {
          "description": "\n        The description of the notification group. (Format: JSON object)<br>\n        This is only applicable if group is true.\n        ",
          "type": "string"
        },
        "groupName": {
          "description": "\n        The name of the notification group. (Format: JSON object)<br>\n        This is only applicable if group is true.\n        ",
          "type": "string"
        },
        "instanceId": {
          "description": "The ID of the instance.",
          "type": "string"
        },
        "isReadOnClick": {
          "default": "True",
          "description": "\n        Whether the notification has been read. (Default: false)\n        ",
          "type": "boolean"
        },
        "link": {
          "description": "The external url of the notification. (Format: JSON object)",
          "type": "string"
        },
        "notifyAuthor": {
          "description": "\n        Whether the author has to be notified for any change. (Default: false)\n        ",
          "type": "boolean"
        },
        "properties": {
          "description": "The properties of the notification. (Format: JSON object)",
          "type": "string"
        },
        "recipientEmail": {
          "description": "The email of the recipient.",
          "type": "string"
        },
        "recipientId": {
          "description": "The ID of the recipient.",
          "type": "string"
        },
        "recipientIds": {
          "description": "The IDs of the recipients.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "senderEmail": {
          "description": "The email of the user who sent the notification.",
          "type": "string"
        },
        "senderId": {
          "description": "The ID of the user who sent the notification.",
          "type": "string"
        },
        "startDate": {
          "description": "The notification start date.",
          "type": "string"
        },
        "title": {
          "description": "The title of the notification. (Format: JSON object)",
          "type": "string"
        },
        "type": {
          "description": "The type of notification.",
          "type": "string"
        },
        "url": {
          "description": "The url of the notification. (Format: JSON object)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesSetAllNotificationsReadRequest": {
      "description": "\n    Mark all notifications of an instance as read\n    ",
      "id": "ServerNotificationNotificationMessagesSetAllNotificationsReadRequest",
      "properties": {
        "externalKey": {
          "description": "The external key to link a content, directory entry or other.",
          "type": "string"
        },
        "externalKeyKind": {
          "description": "The external key kind.",
          "type": "string"
        },
        "instanceIds": {
          "description": "The list of instance identifiers.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerNotificationNotificationMessagesSetNotificationReadRequest": {
      "description": "\n    Mark a notification as read.\n    ",
      "id": "ServerNotificationNotificationMessagesSetNotificationReadRequest",
      "properties": {
        "functionalInnerId": {
          "description": "A code to describe the object.",
          "type": "string"
        },
        "uid": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "userId": {
          "description": "The user for which the notification needs to be marked as read.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesIdentityProviderMessage": {
      "id": "ServerOrganizationOrganizationMessagesIdentityProviderMessage",
      "properties": {
        "checkEmailOnLogin": {
          "description": "Email needs to be check instead of UPN",
          "type": "boolean"
        },
        "config": {
          "description": "The identity provider additional configuration.",
          "type": "string"
        },
        "domain": {
          "description": "The identity provider domain",
          "type": "string"
        },
        "domainHint": {
          "description": "The domain used as hint for the identity provider login page",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "jitEnabled": {
          "description": "Is JIT user creation is enabled",
          "type": "boolean"
        },
        "loginVisibility": {
          "description": "The identity provider visibility type (web, mobile, web and mobile)",
          "type": "string"
        },
        "name": {
          "description": "The identity provider name",
          "type": "string"
        },
        "oauthClientId": {
          "description": "The identity provider oauth client id (Okta only)",
          "type": "string"
        },
        "oauthClientSecret": {
          "description": "The identity provider oauth client secret (Okta only)",
          "type": "string"
        },
        "organizationId": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "ssoEnabled": {
          "description": "Is SSO activated on this provider",
          "type": "boolean"
        },
        "type": {
          "description": "The identity provider type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesOrganizationListResponse": {
      "id": "ServerOrganizationOrganizationMessagesOrganizationListResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "ServerOrganizationOrganizationMessagesOrganizationMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesOrganizationMessage": {
      "id": "ServerOrganizationOrganizationMessagesOrganizationMessage",
      "properties": {
        "cellUrl": {
          "description": "The organization cell URL",
          "type": "string"
        },
        "domain": {
          "description": "The organization domain",
          "type": "string"
        },
        "hosts": {
          "description": "The hostname(s) used to access LumSites",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "identityProviders": {
          "description": "The organization identity providers",
          "items": {
            "$ref": "ServerOrganizationOrganizationMessagesIdentityProviderMessage"
          },
          "type": "array"
        },
        "name": {
          "description": "The organization name",
          "type": "string"
        },
        "slug": {
          "description": "The organization slug",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesUserIdentityProviderMessage": {
      "id": "ServerOrganizationOrganizationMessagesUserIdentityProviderMessage",
      "properties": {
        "id": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "providerUserId": {
          "description": "The user provider id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesUserListResponse": {
      "id": "ServerOrganizationOrganizationMessagesUserListResponse",
      "properties": {
        "items": {
          "items": {
            "$ref": "ServerOrganizationOrganizationMessagesUserMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerOrganizationOrganizationMessagesUserMessage": {
      "id": "ServerOrganizationOrganizationMessagesUserMessage",
      "properties": {
        "email": {
          "description": "The user email",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "identityProviders": {
          "items": {
            "$ref": "ServerOrganizationOrganizationMessagesUserIdentityProviderMessage"
          },
          "type": "array"
        },
        "isLumAppsAdmin": {
          "description": "Whether the user is a LumApps administrator, authorized to perform maintenance operations",
          "type": "boolean"
        },
        "isOrgAdmin": {
          "description": "Whether the user is an organization administrator",
          "type": "boolean"
        },
        "organizationId": {
          "description": "The unique identifier.",
          "type": "string"
        },
        "password": {
          "description": "The user password",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerResellerResellerMessagesResellerCustomerListResponse": {
      "id": "ServerResellerResellerMessagesResellerCustomerListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CustomerProtoIdUidNameDomainAccountStatusCustomerIdSlugSynchronizedHostsGoogleCustomerNbUsersLicenseNumberLicenseExpirationDateResellerIsResellerResellerDataThemesConfigurationsOverridesSsoEnabledHttpsOnlyLicenseTypeTrustedTesterFeaturesGcsIdentitySourceExcludedFeaturesCreatedAtMobileInstanceKeysMobileCustomizationMobileLoginConfigurationMobileGoogleAnalyticsIDMobileSearchInstanceKeysContactFirstNameContactLastNameContactEmailContactPhoneCountrySizeIdentityProvidersLoginProviderOnlyEnabledFeaturesViaEmailFeaturePackages"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerResellerResellerMessagesResellerListResponse": {
      "id": "ServerResellerResellerMessagesResellerListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "CustomerProtoIdUidName"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerRoleRoleMessagesRoleCheckRequest": {
      "id": "ServerRoleRoleMessagesRoleCheckRequest",
      "properties": {
        "actions": {
          "description": "The list of actions to check.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "feeds": {
          "description": "The list of feeds concerned by the actions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "instance": {
          "description": "The ID of the instance.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerRoleRoleMessagesRoleCheckResponse": {
      "id": "ServerRoleRoleMessagesRoleCheckResponse",
      "properties": {
        "allowed": {
          "description": "\n        Whether the user is authorized to do an action\n        ",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerRoleRoleMessagesRoleListResponse": {
      "description": "\n    Resource for a response of a Role's list request\n    ",
      "id": "ServerRoleRoleMessagesRoleListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Role"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerRpcRpcMessagesRpcRequest": {
      "id": "ServerRpcRpcMessagesRpcRequest",
      "properties": {
        "function": {
          "type": "string"
        },
        "initKwargs": {
          "type": "string"
        },
        "klass": {
          "type": "string"
        },
        "kwargs": {
          "type": "string"
        },
        "module": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerRpcRpcMessagesRpcResponse": {
      "id": "ServerRpcRpcMessagesRpcResponse",
      "properties": {
        "error": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "status": {
          "default": "OK",
          "type": "string"
        },
        "traceback": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSearchCloudsearchCloudsearchMessagesCloudSearchDataSourceListMessage": {
      "id": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchDataSourceListMessage",
      "properties": {
        "callId": {
          "description": "*beta* The ID of the call.",
          "type": "string"
        },
        "customerId": {
          "description": "*beta* The ID of the customer.",
          "type": "string"
        },
        "fields": {
          "description": "*beta* The list of fields that will be returned with the response.",
          "type": "string"
        },
        "items": {
          "description": "*beta* The list of returned items.",
          "items": {
            "$ref": "ServerSearchCloudsearchCloudsearchMessagesDataSourceDescription"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceCustomFieldsResponse": {
      "description": "\n    The response to list all the custom fields for a given source.\n    ",
      "id": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceCustomFieldsResponse",
      "properties": {
        "callId": {
          "description": "*beta* The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "*beta* The custom fields for the given source",
          "items": {
            "$ref": "ServerSearchCloudsearchCloudsearchMessagesCustomField"
          },
          "type": "array"
        },
        "source": {
          "description": "*beta* The source to which the custom fields are related.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceIdRequest": {
      "description": "\n    The request to list all the custom fields for a given source.\n    ",
      "id": "ServerSearchCloudsearchCloudsearchMessagesCloudSearchSourceIdRequest",
      "properties": {
        "callId": {
          "description": "*beta* The ID of the call.",
          "type": "string"
        },
        "source": {
          "description": "*beta* The source to ask custom fields for.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSearchCloudsearchCloudsearchMessagesCustomField": {
      "id": "ServerSearchCloudsearchCloudsearchMessagesCustomField",
      "properties": {
        "enabled": {
          "description": "*beta* Whether this field has been enabled by the administrator.",
          "type": "boolean"
        },
        "icon": {
          "description": "*beta* The icon associated to the source.",
          "type": "string"
        },
        "layout": {
          "description": "*beta* The layout of the field (OneColumn, TwoColumn).",
          "type": "string"
        },
        "localizedName": {
          "description": "*beta* The localized human-readable name of the field.",
          "type": "string"
        },
        "name": {
          "description": "*beta* The name of this field.",
          "type": "string"
        },
        "order": {
          "description": "*beta* The order of the field.",
          "type": "string"
        },
        "path": {
          "description": "*beta* The path of the field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSearchCloudsearchCloudsearchMessagesDataSourceDescription": {
      "description": "\n    A datasource description that allows our frontend to display a well-looking localized interface.\n\n    See Also:\n        https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources#DataSource\n    ",
      "id": "ServerSearchCloudsearchCloudsearchMessagesDataSourceDescription",
      "properties": {
        "connectorId": {
          "description": "The connector id which is optionnal used with custom tabs",
          "type": "string"
        },
        "customFields": {
          "description": "*beta* The custom fields for this source.",
          "items": {
            "$ref": "ServerSearchCloudsearchCloudsearchMessagesCustomField"
          },
          "type": "array"
        },
        "docPath": {
          "description": "*secret option* The drive that shall be used to restrain the search feature (applies to SharePoint and Google Drive)",
          "type": "string"
        },
        "enabled": {
          "description": "*beta* Whether this datasource has been enabled by the administrator.",
          "type": "boolean"
        },
        "extensionId": {
          "description": "The extension id which is mandatory if the source is a custom tab",
          "type": "string"
        },
        "height": {
          "description": "*beta* The height of the iframe custom tab.",
          "type": "string"
        },
        "icon": {
          "description": "*beta* The icon associated to the source.",
          "type": "string"
        },
        "isMetadataVisible": {
          "description": "*beta* Whether the metadata will be visible for this source results.",
          "type": "boolean"
        },
        "isSnippetVisible": {
          "description": "*beta* Whether the snippet will be visible for this source results.",
          "type": "boolean"
        },
        "kind": {
          "description": "*beta* The kind of the source.",
          "type": "string"
        },
        "localizeKey": {
          "description": "The lokalizeKey that should be used to translate the tab if localizedName is empty",
          "type": "string"
        },
        "localizedName": {
          "description": "*beta* The localized human-readable name of the source.",
          "type": "string"
        },
        "order": {
          "description": "*beta* The order of the source.",
          "type": "string"
        },
        "resultsCount": {
          "description": "*beta* The number of results for this tab.",
          "type": "string"
        },
        "sendUserIdentity": {
          "description": "*beta* send user identity in the form of a jwt token",
          "type": "boolean"
        },
        "template": {
          "description": "*beta* The template of the source.",
          "type": "string"
        },
        "totalResultsCount": {
          "description": "The total number of results for this tab.",
          "type": "string"
        },
        "type": {
          "description": "*beta* The type of the custom tab.",
          "type": "string"
        },
        "uid": {
          "description": "*beta* The uid of the source.",
          "type": "string"
        },
        "url": {
          "description": "*beta* The url of the custom tab.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSheetsSheetsMessagesSheetsChartsImageResponse": {
      "description": "\n    Response message for chart image\n    ",
      "id": "ServerSheetsSheetsMessagesSheetsChartsImageResponse",
      "properties": {
        "content": {
          "description": "Chart image base64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSheetsSheetsMessagesSheetsChartsListResponse": {
      "description": "\n    Response message for charts list\n    ",
      "id": "ServerSheetsSheetsMessagesSheetsChartsListResponse",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerSheetsSheetsMessagesSheetsListResponse": {
      "description": "\n    Response message for sheets list\n    ",
      "id": "ServerSheetsSheetsMessagesSheetsListResponse",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerSocialActivityActivityMessagesActivityGroupListResponse": {
      "description": "\n    Message for activity group list\n    ",
      "id": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
      "properties": {
        "count": {
          "description": "Total number of items, might be more than the number of items.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Activity"
          },
          "type": "array"
        },
        "usersCount": {
          "description": "Total number of unique users who made the action.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSocialActivityActivityMessagesActivityGroupRequest": {
      "description": "\n    Message for activities group list request\n    ",
      "id": "ServerSocialActivityActivityMessagesActivityGroupRequest",
      "properties": {
        "actions": {
          "description": "Filter results with this list of actions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentTypes": {
          "description": "Filter results with this list of contentTypes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "instanceId": {
          "description": "The ID of the instance.",
          "type": "string"
        },
        "userId": {
          "description": "Fetch only the activities from this user.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerSocialActivityActivityMessagesActivityGroupResponseResource": {
      "description": "\n    Message for activities list response\n    ",
      "id": "ServerSocialActivityActivityMessagesActivityGroupResponseResource",
      "properties": {
        "comment": {
          "$ref": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
          "description": "The comment activities in the group."
        },
        "contentDetails": {
          "description": "The group content details.",
          "type": "string"
        },
        "create": {
          "$ref": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
          "description": "The create activities in the group."
        },
        "id": {
          "description": "Unique group identifier.",
          "type": "string"
        },
        "like": {
          "$ref": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
          "description": "The like activities in the group."
        },
        "profile": {
          "$ref": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
          "description": "The profile update activities in the group."
        },
        "update": {
          "$ref": "ServerSocialActivityActivityMessagesActivityGroupListResponse",
          "description": "The update activities in the group."
        }
      },
      "type": "object"
    },
    "ServerSocialActivityActivityMessagesActivityGroupsResponse": {
      "description": "\n    Message for activities list response\n    ",
      "id": "ServerSocialActivityActivityMessagesActivityGroupsResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerSocialActivityActivityMessagesActivityGroupResponseResource"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerSocialSubscriptionSubscriptionMessagesSubscriptionContentsListResponse": {
      "description": "\n    List of contents included in subscriptions\n    ",
      "id": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionContentsListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Content"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerSocialSubscriptionSubscriptionMessagesSubscriptionListResponse": {
      "description": "\n    Subscription list response message\n    ",
      "id": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Subscription"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerSocialSubscriptionSubscriptionMessagesSubscriptionUsersListResponse": {
      "description": "\n    List of users included in subscriptions\n    ",
      "id": "ServerSocialSubscriptionSubscriptionMessagesSubscriptionUsersListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerStreamChatStreamTokenMessagesStreamChatTokenResponse": {
      "description": "\n    Resource for a response of a stream token request\n    ",
      "id": "ServerStreamChatStreamTokenMessagesStreamChatTokenResponse",
      "properties": {
        "expirationDate": {
          "description": "Expiration of the given token",
          "type": "string"
        },
        "token": {
          "description": "Token to use with stream",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesConfigurationDeleteMultiRequest": {
      "description": "\n    Request message for stream/configuration/deleteMulti\n    ",
      "id": "ServerStreamStreamMessagesConfigurationDeleteMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "configurationIds": {
          "description": "An array of stream configuration IDs.",
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesConfigurationListRequest": {
      "description": "\n    Request message for stream/configuration/list\n    ",
      "id": "ServerStreamStreamMessagesConfigurationListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "configurationIds": {
          "description": "An array of stream configuration IDs.",
          "items": {
            "format": "int64",
            "type": "string"
          },
          "type": "array"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesConfigurationListResponse": {
      "description": "\n    Response message for stream/configuration/list\n    ",
      "id": "ServerStreamStreamMessagesConfigurationListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "StreamConf"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesConfigurationMessage": {
      "description": "\n    Generic message containing a call ID and a list of stream configurations.\n    ",
      "id": "ServerStreamStreamMessagesConfigurationMessage",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "configurations": {
          "description": "An array of stream configurations.",
          "items": {
            "$ref": "StreamConf"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesContentListRequest": {
      "description": "\n    Request message for stream/content/list\n    ",
      "id": "ServerStreamStreamMessagesContentListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "configurationId": {
          "description": "The ID of the stream configuration.",
          "format": "int64",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesContentListResponse": {
      "description": "\n    Response message for stream/content/list\n    ",
      "id": "ServerStreamStreamMessagesContentListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Content"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesListRequest": {
      "description": "\n    Request message for stream/list\n    ",
      "id": "ServerStreamStreamMessagesListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesListResponse": {
      "description": "\n    Reponse message for stream/list\n    ",
      "id": "ServerStreamStreamMessagesListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerStreamStreamMessagesStreamMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerStreamStreamMessagesStreamMessage": {
      "description": "\n    Message containing a stream configuration and its top contents. To be used in StreamResponse\n    ",
      "id": "ServerStreamStreamMessagesStreamMessage",
      "properties": {
        "configuration": {
          "$ref": "StreamConf",
          "description": "The stream configuration."
        },
        "contents": {
          "description": "An array of top contents.",
          "items": {
            "$ref": "Content"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerStyleStyleMessagesStyleByInstanceResponse": {
      "id": "ServerStyleStyleMessagesStyleByInstanceResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "style": {
          "$ref": "Style",
          "description": "The style of the instance"
        }
      },
      "type": "object"
    },
    "ServerStyleStyleMessagesStyleListResponse": {
      "id": "ServerStyleStyleMessagesStyleListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Style"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerStyleStyleMessagesStyleSheetSaveRequest": {
      "id": "ServerStyleStyleMessagesStyleSheetSaveRequest",
      "properties": {
        "content": {
          "description": "The content of the stylesheet.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the stylesheet.",
          "type": "string"
        },
        "styleId": {
          "description": "The ID of the style.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTagsTagsMessagesTagListResponse": {
      "description": "\n    Resource for a response of a tag's list request\n    ",
      "id": "ServerTagsTagsMessagesTagListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Tag"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskCategoryListRequest": {
      "description": "\n    Request message for categories list\n    ",
      "id": "ServerTaskTaskMessagesTaskCategoryListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "folderId": {
          "description": "Folder Id (Plan Id for Planner, or Parent Folder Id in Outlook",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskCategoryListResponse": {
      "description": "\n    Response message for categories list\n    ",
      "id": "ServerTaskTaskMessagesTaskCategoryListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "TaskCategoryMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskFromFolderListRequest": {
      "description": "\n    Request message for tasks list\n    ",
      "id": "ServerTaskTaskMessagesTaskFromFolderListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "folderId": {
          "description": "Folder Id (Plan Id for Planner, or Parent Folder Id in Outlook",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskFromFolderListResponse": {
      "description": "\n    Response message for tasks list\n    ",
      "id": "ServerTaskTaskMessagesTaskFromFolderListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "TaskMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskGroupFolderListRequest": {
      "description": "\n    Request message for group's folders list\n    ",
      "id": "ServerTaskTaskMessagesTaskGroupFolderListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "groupId": {
          "description": "Group's Id",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskGroupFolderListResponse": {
      "description": "\n    Response message for group's folders list\n    ",
      "id": "ServerTaskTaskMessagesTaskGroupFolderListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "TaskFolderMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskListRequest": {
      "description": "\n    Request message for tasks list\n    ",
      "id": "ServerTaskTaskMessagesTaskListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskListResponse": {
      "description": "\n    Response message for tasks list\n    ",
      "id": "ServerTaskTaskMessagesTaskListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "TaskMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskUpdateRequest": {
      "description": "\n    Request message for task's update\n    ",
      "id": "ServerTaskTaskMessagesTaskUpdateRequest",
      "properties": {
        "etag": {
          "description": "Task's etag (must match with the latest etag)",
          "type": "string"
        },
        "properties": {
          "$ref": "TaskUpdateMessage",
          "description": "Properties to update"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        },
        "taskId": {
          "description": "Task Id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskUpdateResponse": {
      "description": "\n    Response message for task's update\n    ",
      "id": "ServerTaskTaskMessagesTaskUpdateResponse",
      "properties": {
        "item": {
          "$ref": "TaskMessage",
          "description": "The list of returned items."
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskUserFolderListRequest": {
      "description": "\n    Request message for user's folders list\n    ",
      "id": "ServerTaskTaskMessagesTaskUserFolderListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "fields": {
          "description": "The list of fields that will be returned with the response.",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "page": {
          "default": "1",
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTaskTaskMessagesTaskUserFolderListResponse": {
      "description": "\n    Response message for folders list\n    ",
      "id": "ServerTaskTaskMessagesTaskUserFolderListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "TaskFolderMessage"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        },
        "page": {
          "description": "Page number",
          "type": "string"
        },
        "provider": {
          "description": "A task provider (possible: outlook, planner)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTemplateTemplateMessagesErrorReason": {
      "description": "\n    Error and its relative object\n    ",
      "id": "ServerTemplateTemplateMessagesErrorReason",
      "properties": {
        "reason": {
          "description": "The error description.",
          "type": "string"
        },
        "target": {
          "$ref": "Template",
          "description": "The invalid template."
        }
      },
      "type": "object"
    },
    "ServerTemplateTemplateMessagesSaveTemplateMultiRequest": {
      "description": "\n    Resource for a list of templates to save\n    ",
      "id": "ServerTemplateTemplateMessagesSaveTemplateMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Template"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerTemplateTemplateMessagesTemplateListResponse": {
      "description": "\n    Resource for a response of a Template's list request\n    ",
      "id": "ServerTemplateTemplateMessagesTemplateListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "errors": {
          "description": "The list of errors and their relative target.",
          "items": {
            "$ref": "ServerTemplateTemplateMessagesErrorReason"
          },
          "type": "array"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Template"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerTermsAndConditionsTermsAndConditionsMessagesTermsAndConditionsGetResponse": {
      "description": "\n    Resource for a Terms and conditions's get response\n    ",
      "id": "ServerTermsAndConditionsTermsAndConditionsMessagesTermsAndConditionsGetResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "termsAndConditions": {
          "$ref": "TermsAndConditions",
          "description": "The platform's terms and conditions"
        }
      },
      "type": "object"
    },
    "ServerTranslateTranslateMessagesTranslateRequest": {
      "description": "\n    Resource to get a translation\n    ",
      "id": "ServerTranslateTranslateMessagesTranslateRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "contentText": {
          "description": "The text to translate.",
          "type": "string"
        },
        "sourceFormat": {
          "description": "The format of the source (html or plain text).",
          "type": "string"
        },
        "sourceLang": {
          "description": "The text language (Format ISO639-1 Code).",
          "type": "string"
        },
        "targetLang": {
          "description": "The language for the result (Format ISO639-1 Code).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTranslateTranslateMessagesTranslateResponse": {
      "description": "\n    Resource to send back the translation\n    ",
      "id": "ServerTranslateTranslateMessagesTranslateResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "contentText": {
          "description": "The translated text.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerTutorialTutorialMessagesTutorialListResponse": {
      "description": "\n    Resource for a response of a tutorial list request\n    ",
      "id": "ServerTutorialTutorialMessagesTutorialListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Tutorial"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldResource": {
      "description": "\n    Resource for a Calendar's file\n    ",
      "id": "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldResource",
      "properties": {
        "fieldName": {
          "description": "The user directory field name.",
          "type": "string"
        },
        "fieldUuid": {
          "description": "The user directory field uuid.",
          "type": "string"
        },
        "isMetadata": {
          "description": "Is the field is a metadata.",
          "type": "boolean"
        },
        "metadata": {
          "description": "The metadata available values for related field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldsResource": {
      "id": "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldsResource",
      "properties": {
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "ServerUserDirectoryUserDirectoryMessageUserDirectoryFieldResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerUserOrganizationChartOrganizationChartMessagesOrganizationChartResponse": {
      "id": "ServerUserOrganizationChartOrganizationChartMessagesOrganizationChartResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "manager": {
          "$ref": "User",
          "description": "The profile of the manager of the user."
        },
        "sameLevel": {
          "description": "The profiles of the users with the same manager as the user.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "subLevel": {
          "description": "The profiles of the users with the user as their manager.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesTokenResponse": {
      "description": "\n    Response the token.\n    ",
      "id": "ServerUserUserMessagesTokenResponse",
      "properties": {
        "accessToken": {
          "description": "The access token to call the LumApps API.",
          "type": "string"
        },
        "expiresAt": {
          "description": "The expiration date of the token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesUserCloudAccessTokenRequest": {
      "id": "ServerUserUserMessagesUserCloudAccessTokenRequest",
      "properties": {
        "api": {
          "description": "The API that the token is used for. Applied for fetching the Google Access Token.",
          "type": "string"
        },
        "scopes": {
          "description": "The scopes for the given token. Applied for fetching the Google Access Token.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "description": "The version of the API the token is used for. Applied for fetching the Google Access Token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesUserCloudAccessTokenResponse": {
      "id": "ServerUserUserMessagesUserCloudAccessTokenResponse",
      "properties": {
        "access_token": {
          "description": "The access token for the given provider type.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesUserDeleteMultiRequest": {
      "description": "\n    Request message for user/deleteMulti\n    ",
      "id": "ServerUserUserMessagesUserDeleteMultiRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "uid": {
          "description": "\n        A list of ids of users to delete.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesUserDirectoryListRequest": {
      "description": "\n    Message used to list users according to a user directory.\n    ",
      "id": "ServerUserUserMessagesUserDirectoryListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "contentId": {
          "description": "The ID of the content for which users are contributors.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "customerId": {
          "description": "The ID of the customer.",
          "type": "string"
        },
        "feeds": {
          "description": "\n        The list of user groups used to filter the search result.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "firstName": {
          "description": "The first name of the user.",
          "type": "string"
        },
        "instanceId": {
          "description": "The ID of the current instance.",
          "type": "string"
        },
        "lastName": {
          "description": "The last name of the user.",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "primaryEmail": {
          "description": "The primary email of the user.",
          "type": "string"
        },
        "profileCriteria": {
          "description": "A search criteria. (Format: JSON object)",
          "type": "string"
        },
        "query": {
          "description": "The query used to filter the result.",
          "type": "string"
        },
        "registeredSince": {
          "description": "The number of days since the user is registered.",
          "type": "string"
        },
        "showHidden": {
          "description": "\n        Whether hidden user should be displayed. (Default: false)\n        ",
          "type": "boolean"
        },
        "sortOrder": {
          "description": "\n    The sort order defined by the property name used to sort.<br>\n    Descending sort order is denoted by a hyphen (-) preceding the property name;\n    omitting the hyphen specifies ascending order by default.\n    ",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the user.<br>\n    Acceptable values are:<br>\n     - \"ENABLED\": The user account is still live. (default)<br>\n     - \"DISABLED\": The user account has been deactivated.\n    ",
          "type": "string"
        },
        "types": {
          "description": "\n        The list of user account types used to filter the search result.<br>\n        Acceptable values are:<br>\n         - \"EXTERNAL\": External account.<br>\n         - \"GOOGLE\": Google account.\n        ",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerUserUserMessagesUserListResponse": {
      "description": "\n    Resource for a User list response\n    ",
      "id": "ServerUserUserMessagesUserListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "User"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerWeatherWeatherMessagesWeatherResponse": {
      "description": "\n    Resource for a weather\n    ",
      "id": "ServerWeatherWeatherMessagesWeatherResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "city": {
          "description": "The city for which we have fetched the weather.",
          "type": "string"
        },
        "forecast": {
          "description": "The result of the weather.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerWebhookWebhookMessagesWebhookActivateRequest": {
      "id": "ServerWebhookWebhookMessagesWebhookActivateRequest",
      "properties": {
        "token": {
          "description": "Token to be matched to avoid webhook activation",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerWebhookWebhookMessagesWebhookListRequest": {
      "id": "ServerWebhookWebhookMessagesWebhookListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "customerId": {
          "description": "The ID of the customer.",
          "type": "string"
        },
        "maxResults": {
          "default": "30",
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "status": {
          "description": "\n    The status of the webhook.<br>\n    Acceptable values are:<br>\n    - \"LIVE\": the webhook is up and the handshake was successful.<br>\n    - \"ARCHIVE\" the webhook has been disabled.<br>\n    - \"DELETED\": the webhook has been deleted.<br>\n    - \"PENDING\": the webhook has been saved but no handshake have been tried yet.<br>\n    - \"REFUSED\": the webhook has been saved but the handshake has been refused.\n    ",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerWebhookWebhookMessagesWebhookListResponse": {
      "id": "ServerWebhookWebhookMessagesWebhookListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Webhook"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerWebhookWebhookMessagesWebhookPreferenceResponse": {
      "id": "ServerWebhookWebhookMessagesWebhookPreferenceResponse",
      "properties": {
        "hook": {
          "description": "Webhook id.",
          "type": "string"
        },
        "notify": {
          "description": "Whether the user will be notified or not.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerWidgetFilesFilesMessagesWidgetFilesListRequest": {
      "description": "\n    Resource for a Widget's files list request\n    ",
      "id": "ServerWidgetFilesFilesMessagesWidgetFilesListRequest",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "contentId": {
          "description": "The contentId.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "docPath": {
          "description": "The docPath of the document",
          "type": "string"
        },
        "lang": {
          "description": "The language used for search purposes.",
          "type": "string"
        },
        "maxResults": {
          "description": "Maximum results returned. Acceptable values are 1 to MAX_INT, inclusive. (Default: 30)",
          "type": "string"
        },
        "widgetId": {
          "description": "The widgetId.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerWidgetWidgetMessagesWidgetListResponse": {
      "description": "\n    Resource for a response of a Widget's list request\n    ",
      "id": "ServerWidgetWidgetMessagesWidgetListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "cursor": {
          "description": "\n    The cursor for continuing a previous request on the next page.\n    This should be set to the value of 'cursor' from the previous response.\n    ",
          "type": "string"
        },
        "items": {
          "description": "The list of returned items.",
          "items": {
            "$ref": "Widget"
          },
          "type": "array"
        },
        "more": {
          "description": "Whether there are more results.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServerWidgetWidgetMessagesWidgetTypeListResponse": {
      "description": "\n    Resource for a Widget types list request\n    ",
      "id": "ServerWidgetWidgetMessagesWidgetTypeListResponse",
      "properties": {
        "callId": {
          "description": "The ID of the call.",
          "type": "string"
        },
        "items": {
          "description": "The widget type list.",
          "items": {
            "$ref": "ServerWidgetWidgetMessagesWidgetTypeResource"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ServerWidgetWidgetMessagesWidgetTypeResource": {
      "description": "\n    Resource for a WidgetType\n    ",
      "id": "ServerWidgetWidgetMessagesWidgetTypeResource",
      "properties": {
        "name": {
          "description": "The widget type name.",
          "type": "string"
        },
        "value": {
          "description": "The widget type value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ServerWorkspaceWorkspaceMessagesChatResponse": {
      "description": "\n    Resource for a workspace chat response\n    ",
      "id": "ServerWorkspaceWorkspaceMessagesChatResponse",
      "properties": {
        "apiId": {
          "description": "The ID of the chat space",
          "type": "string"
        },
        "chanId": {
          "description": "The ID of the chat channel",
          "type": "string"
        },
        "provider": {
          "description": "The chat's provider name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Share": {
      "id": "Share",
      "properties": {
        "maxCommentLength": {
          "format": "int32",
          "type": "integer"
        },
        "supported": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Slide": {
      "id": "Slide",
      "properties": {
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "position": {
          "format": "int64",
          "type": "string"
        },
        "servingUrl": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SocialNetworkAccess": {
      "id": "SocialNetworkAccess",
      "properties": {
        "authorizationRefreshRequired": {
          "type": "boolean"
        },
        "profilePictureUrl": {
          "type": "string"
        },
        "socialNetworkId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SocialNetworkCapability": {
      "id": "SocialNetworkCapability",
      "properties": {
        "share": {
          "$ref": "Share"
        },
        "socialNetworkId": {
          "type": "string"
        },
        "stats": {
          "$ref": "Stats"
        }
      },
      "type": "object"
    },
    "SocialNetworkSetting": {
      "id": "SocialNetworkSetting",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "clientId": {
          "type": "string"
        },
        "socialNetworkId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Stats": {
      "id": "Stats",
      "properties": {
        "comment": {
          "type": "boolean"
        },
        "reaction": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "StockExchange": {
      "id": "StockExchange",
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "StreamConf": {
      "id": "StreamConf",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "feedIds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "filterFields": {
          "$ref": "FilterFields"
        },
        "id": {
          "type": "string"
        },
        "isViewLocked": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "limit": {
          "default": "3",
          "format": "int32",
          "type": "integer"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "type": "string"
        },
        "viewMode": {
          "default": "LIST",
          "enum": [
            "LIST",
            "SPOTLIGHT"
          ],
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Style": {
      "id": "Style",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "stylesheets": {
          "items": {
            "$ref": "ResourceFile"
          },
          "type": "array"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Subscription": {
      "id": "Subscription",
      "properties": {
        "customerKey": {
          "type": "string"
        },
        "followerFeedKey": {
          "type": "string"
        },
        "followerUserDetails": {
          "type": "string"
        },
        "followerUserKey": {
          "type": "string"
        },
        "followingContentDetails": {
          "type": "string"
        },
        "followingContentKey": {
          "type": "string"
        },
        "followingContentType": {
          "type": "string"
        },
        "followingSearchQuery": {
          "type": "string"
        },
        "followingUserDetails": {
          "type": "string"
        },
        "followingUserKey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instanceKey": {
          "type": "string"
        },
        "notify": {
          "type": "boolean"
        },
        "properties": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemInfo": {
      "id": "SystemInfo",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "creatorId": {
          "type": "string"
        },
        "lastUpdaterId": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "statusChangedAt": {
          "type": "string"
        },
        "statusChangedAuthorId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Tag": {
      "id": "Tag",
      "properties": {
        "customer": {
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Tagz": {
      "id": "Tagz",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "tag_by": {
          "type": "string"
        },
        "tag_date": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskCategoryMessage": {
      "id": "TaskCategoryMessage",
      "properties": {
        "folderId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "order": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskFolderMessage": {
      "id": "TaskFolderMessage",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskMessage": {
      "id": "TaskMessage",
      "properties": {
        "assignedTo": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "completedDateTime": {
          "type": "string"
        },
        "createdDateTime": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dueDateTime": {
          "type": "string"
        },
        "endDateTime": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "folderId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "importance": {
          "type": "string"
        },
        "order": {
          "type": "string"
        },
        "reminder": {
          "type": "boolean"
        },
        "startDateTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "taskUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaskUpdateMessage": {
      "id": "TaskUpdateMessage",
      "properties": {
        "description": {
          "type": "string"
        },
        "importance": {
          "type": "string"
        },
        "order": {
          "type": "string"
        },
        "reminder": {
          "type": "boolean"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Template": {
      "id": "Template",
      "properties": {
        "basicMode": {
          "type": "boolean"
        },
        "components": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customContentType": {
          "type": "string"
        },
        "customContentTypeTags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "featuredFeedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fixedLayout": {
          "type": "boolean"
        },
        "fixedWidgets": {
          "type": "boolean"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "header": {
          "type": "string"
        },
        "heritable": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isV2Compatible": {
          "type": "boolean"
        },
        "metadata": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "usableBy": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "visibilityInheritedOnly": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TermsAndConditions": {
      "id": "TermsAndConditions",
      "properties": {
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TermsAndConditionsProtoDescriptionRedirectUrlStatus": {
      "id": "TermsAndConditionsProtoDescriptionRedirectUrlStatus",
      "properties": {
        "description": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimeSlot": {
      "id": "TimeSlot",
      "properties": {
        "endAt": {
          "type": "string"
        },
        "startAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Tutorial": {
      "id": "Tutorial",
      "properties": {
        "displayAgain": {
          "type": "boolean"
        },
        "displayAgainTime": {
          "type": "string"
        },
        "endAt": {
          "type": "string"
        },
        "feeds": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "slides": {
          "items": {
            "$ref": "Slide"
          },
          "type": "array"
        },
        "startAt": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "User": {
      "id": "User",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "alternateEmail": {
          "type": "string"
        },
        "apiProfile": {
          "type": "string"
        },
        "canAccessSA": {
          "type": "boolean"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "customProfile": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "directoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "type": "string"
        },
        "emailNotifications": {
          "$ref": "UserEmailNotification"
        },
        "employeeId": {
          "type": "string"
        },
        "experimental": {
          "type": "boolean"
        },
        "expirationDate": {
          "type": "string"
        },
        "federationValue": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "hiddenDirectoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "instancesSuperAdmin": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isDesigner": {
          "type": "boolean"
        },
        "isGod": {
          "type": "boolean"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastName": {
          "type": "string"
        },
        "lastSynchronization": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        },
        "loginProvider": {
          "type": "string"
        },
        "profileId": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "profilePictureUrl": {
          "type": "string"
        },
        "profileStatus": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "settings": {
          "$ref": "UserSettings"
        },
        "socialAdvocacyPermissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "socialNetworkAccesses": {
          "items": {
            "$ref": "SocialNetworkAccess"
          },
          "type": "array"
        },
        "status": {
          "default": "enabled",
          "type": "string"
        },
        "subscriptions": {
          "items": {
            "$ref": "UserSubscription"
          },
          "type": "array"
        },
        "synchronized": {
          "type": "boolean"
        },
        "tutorials": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "unifiedProfileId": {
          "type": "string"
        },
        "unreadNotificationCount": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserContent": {
      "id": "UserContent",
      "properties": {
        "content": {
          "type": "string"
        },
        "functionalInnerId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserEmailNotification": {
      "id": "UserEmailNotification",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "delay": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserNotificationsStatus": {
      "id": "UserNotificationsStatus",
      "properties": {
        "comment": {
          "default": "True",
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "like": {
          "default": "True",
          "type": "boolean"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordContentId": {
      "id": "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordContentId",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "alternateEmail": {
          "type": "string"
        },
        "apiProfile": {
          "type": "string"
        },
        "canAccessSA": {
          "type": "boolean"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean"
        },
        "contentId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "customProfile": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "directoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "type": "string"
        },
        "emailNotifications": {
          "$ref": "UserEmailNotification"
        },
        "employeeId": {
          "type": "string"
        },
        "experimental": {
          "type": "boolean"
        },
        "expirationDate": {
          "type": "string"
        },
        "federationValue": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "hiddenDirectoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "instancesSuperAdmin": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isDesigner": {
          "type": "boolean"
        },
        "isGod": {
          "type": "boolean"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastName": {
          "type": "string"
        },
        "lastSynchronization": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        },
        "loginProvider": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "profileId": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "profilePictureUrl": {
          "type": "string"
        },
        "profileStatus": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "settings": {
          "$ref": "UserSettings"
        },
        "socialAdvocacyPermissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "socialNetworkAccesses": {
          "items": {
            "$ref": "SocialNetworkAccess"
          },
          "type": "array"
        },
        "status": {
          "default": "enabled",
          "type": "string"
        },
        "subscriptions": {
          "items": {
            "$ref": "UserSubscription"
          },
          "type": "array"
        },
        "synchronized": {
          "type": "boolean"
        },
        "tutorials": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "unifiedProfileId": {
          "type": "string"
        },
        "unreadNotificationCount": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordRePasswordIdentityProviderExperimental": {
      "id": "UserProtoIdUidUrlProfileIdLoginIdEmailFirstNameLastNameLangLangsPropertiesSubscriptionsIsSuperAdminApiProfileCustomerEmployeeIdSynchronizedChangePasswordAtNextLoginStatusAccountTypeInstancesSuperAdminIdentityProviderDirectoryFavoritesHiddenDirectoryFavoritesCreatedAtUpdatedAtCustomProfileEmailNotificationsProfilePictureIsHiddenAlternateEmailLastSynchronizationExpirationDateProfileStatusSettingsUnreadNotificationCountProfilePictureUrlTutorialsFullNameIsGodIsDesignerLoginProviderSocialAdvocacyPermissionsSocialNetworkAccessesCanAccessSAExperimentalFederationValueUnifiedProfileIdPasswordRePasswordIdentityProviderExperimental",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "alternateEmail": {
          "type": "string"
        },
        "apiProfile": {
          "type": "string"
        },
        "canAccessSA": {
          "type": "boolean"
        },
        "changePasswordAtNextLogin": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string"
        },
        "customProfile": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "directoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "type": "string"
        },
        "emailNotifications": {
          "$ref": "UserEmailNotification"
        },
        "employeeId": {
          "type": "string"
        },
        "experimental": {
          "type": "boolean"
        },
        "expirationDate": {
          "type": "string"
        },
        "federationValue": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "hiddenDirectoryFavorites": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "instancesSuperAdmin": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "isDesigner": {
          "type": "boolean"
        },
        "isGod": {
          "type": "boolean"
        },
        "isHidden": {
          "type": "boolean"
        },
        "isSuperAdmin": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "lastName": {
          "type": "string"
        },
        "lastSynchronization": {
          "type": "string"
        },
        "loginId": {
          "type": "string"
        },
        "loginProvider": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "profileId": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "profilePictureUrl": {
          "type": "string"
        },
        "profileStatus": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "rePassword": {
          "type": "string"
        },
        "settings": {
          "$ref": "UserSettings"
        },
        "socialAdvocacyPermissions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "socialNetworkAccesses": {
          "items": {
            "$ref": "SocialNetworkAccess"
          },
          "type": "array"
        },
        "status": {
          "default": "enabled",
          "type": "string"
        },
        "subscriptions": {
          "items": {
            "$ref": "UserSubscription"
          },
          "type": "array"
        },
        "synchronized": {
          "type": "boolean"
        },
        "tutorials": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "unifiedProfileId": {
          "type": "string"
        },
        "unreadNotificationCount": {
          "format": "int32",
          "type": "integer"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettings": {
      "id": "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettings",
      "properties": {
        "alternateEmail": {
          "type": "string"
        },
        "currentPassword": {
          "type": "string"
        },
        "emailNotifications": {
          "$ref": "UserEmailNotification"
        },
        "lang": {
          "type": "string"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "properties": {
          "type": "string"
        },
        "rePassword": {
          "type": "string"
        },
        "settings": {
          "$ref": "UserSettings"
        },
        "showTutorial": {
          "type": "boolean"
        },
        "tutorials": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettingsPassword": {
      "id": "UserProtoLangLangsPropertiesShowTutorialTutorialsEmailNotificationsRePasswordCurrentPasswordAlternateEmailSettingsPassword",
      "properties": {
        "alternateEmail": {
          "type": "string"
        },
        "currentPassword": {
          "type": "string"
        },
        "emailNotifications": {
          "$ref": "UserEmailNotification"
        },
        "lang": {
          "type": "string"
        },
        "langs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "password": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "rePassword": {
          "type": "string"
        },
        "settings": {
          "$ref": "UserSettings"
        },
        "showTutorial": {
          "type": "boolean"
        },
        "tutorials": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserProtoProfileStatus": {
      "id": "UserProtoProfileStatus",
      "properties": {
        "profileStatus": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserSettings": {
      "id": "UserSettings",
      "properties": {
        "cookiesBannerReadAt": {
          "type": "string"
        },
        "hasAcceptedCookies": {
          "type": "boolean"
        },
        "hasAcceptedTerms": {
          "type": "boolean"
        },
        "notificationPreferences": {
          "$ref": "NotificationPreferences"
        },
        "notifications": {
          "$ref": "UserNotificationsStatus"
        },
        "social": {
          "$ref": "UserSocialSettings"
        },
        "termsReadAt": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserSocialSettings": {
      "id": "UserSocialSettings",
      "properties": {
        "isActivityVisible": {
          "default": "True",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserSubscription": {
      "id": "UserSubscription",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "feed": {
          "type": "string"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "prefer": {
          "type": "boolean"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserSyncException": {
      "id": "UserSyncException",
      "properties": {
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "valueType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Webhook": {
      "id": "Webhook",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "family": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatus": {
      "id": "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatus",
      "properties": {
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "family": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatusCreatedAtUpdatedAtSecurityToken": {
      "id": "WebhookProtoCustomerNameFamilyUrlDescriptionIdUidStatusCreatedAtUpdatedAtSecurityToken",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "family": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityToken": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WebhookProtoUid": {
      "id": "WebhookProtoUid",
      "properties": {
        "uid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Widget": {
      "id": "Widget",
      "properties": {
        "customer": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "feedKeys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        },
        "isGlobal": {
          "type": "boolean"
        },
        "isMainWidget": {
          "type": "boolean"
        },
        "isOverride": {
          "type": "boolean"
        },
        "placeholder": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        },
        "widgetType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Workspace": {
      "id": "Workspace",
      "properties": {
        "calendar": {
          "$ref": "Calendar"
        },
        "chat": {
          "$ref": "Chat"
        },
        "createdAt": {
          "type": "string"
        },
        "customer": {
          "type": "string"
        },
        "drive": {
          "$ref": "Drive"
        },
        "feed": {
          "type": "string"
        },
        "group": {
          "$ref": "Group"
        },
        "hasModelVersion": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "modelVersion": {
          "type": "string"
        },
        "status": {
          "default": "LIVE",
          "type": "string"
        },
        "systemInfo": {
          "$ref": "SystemInfo"
        },
        "uid": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "visibility": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "lumsites/v1/",
  "version": "v1"
}