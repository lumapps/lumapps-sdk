# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CommunityInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "community_id": "str",
        "name": "str",
        "slug": "str",
        "has_secure_storage": "bool",
        "storage_doc_path": "str",
    }

    attribute_map = {
        "community_id": "communityId",
        "name": "name",
        "slug": "slug",
        "has_secure_storage": "hasSecureStorage",
        "storage_doc_path": "storageDocPath",
    }

    def __init__(
        self,
        community_id=None,
        name=None,
        slug=None,
        has_secure_storage=None,
        storage_doc_path=None,
    ):  # noqa: E501
        """CommunityInfo - a model defined in Swagger"""  # noqa: E501
        self._community_id = None
        self._name = None
        self._slug = None
        self._has_secure_storage = None
        self._storage_doc_path = None
        self.discriminator = None
        self.community_id = community_id
        self.name = name
        self.slug = slug
        self.has_secure_storage = has_secure_storage
        if storage_doc_path is not None:
            self.storage_doc_path = storage_doc_path

    @property
    def community_id(self):
        """Gets the community_id of this CommunityInfo.  # noqa: E501

        The community's id.  # noqa: E501

        :return: The community_id of this CommunityInfo.  # noqa: E501
        :rtype: str
        """
        return self._community_id

    @community_id.setter
    def community_id(self, community_id):
        """Sets the community_id of this CommunityInfo.

        The community's id.  # noqa: E501

        :param community_id: The community_id of this CommunityInfo.  # noqa: E501
        :type: str
        """
        if community_id is None:
            raise ValueError(
                "Invalid value for `community_id`, must not be `None`"
            )  # noqa: E501

        self._community_id = community_id

    @property
    def name(self):
        """Gets the name of this CommunityInfo.  # noqa: E501

        The community's name.  # noqa: E501

        :return: The name of this CommunityInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommunityInfo.

        The community's name.  # noqa: E501

        :param name: The name of this CommunityInfo.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this CommunityInfo.  # noqa: E501

        The community's slug.  # noqa: E501

        :return: The slug of this CommunityInfo.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CommunityInfo.

        The community's slug.  # noqa: E501

        :param slug: The slug of this CommunityInfo.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError(
                "Invalid value for `slug`, must not be `None`"
            )  # noqa: E501

        self._slug = slug

    @property
    def has_secure_storage(self):
        """Gets the has_secure_storage of this CommunityInfo.  # noqa: E501

        Whether the community uses secured storage.  # noqa: E501

        :return: The has_secure_storage of this CommunityInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_secure_storage

    @has_secure_storage.setter
    def has_secure_storage(self, has_secure_storage):
        """Sets the has_secure_storage of this CommunityInfo.

        Whether the community uses secured storage.  # noqa: E501

        :param has_secure_storage: The has_secure_storage of this CommunityInfo.  # noqa: E501
        :type: bool
        """
        if has_secure_storage is None:
            raise ValueError(
                "Invalid value for `has_secure_storage`, must not be `None`"
            )  # noqa: E501

        self._has_secure_storage = has_secure_storage

    @property
    def storage_doc_path(self):
        """Gets the storage_doc_path of this CommunityInfo.  # noqa: E501

        The docpath identifying the community's storage container, if any.  # noqa: E501

        :return: The storage_doc_path of this CommunityInfo.  # noqa: E501
        :rtype: str
        """
        return self._storage_doc_path

    @storage_doc_path.setter
    def storage_doc_path(self, storage_doc_path):
        """Sets the storage_doc_path of this CommunityInfo.

        The docpath identifying the community's storage container, if any.  # noqa: E501

        :param storage_doc_path: The storage_doc_path of this CommunityInfo.  # noqa: E501
        :type: str
        """

        self._storage_doc_path = storage_doc_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommunityInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunityInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
