# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from .base_block import BaseBlock  # noqa: F401,E501


class BlockUser(BaseBlock):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "user_id": "str",
        "first_name": "str",
        "last_name": "str",
        "full_name": "str",
        "email": "str",
        "picture": "str",
        "variant": "str",
        "profile_primary_field_values": "UserProfilePrimaryFieldValues",
    }
    if hasattr(BaseBlock, "swagger_types"):
        swagger_types.update(BaseBlock.swagger_types)

    attribute_map = {
        "user_id": "userId",
        "first_name": "firstName",
        "last_name": "lastName",
        "full_name": "fullName",
        "email": "email",
        "picture": "picture",
        "variant": "variant",
        "profile_primary_field_values": "profilePrimaryFieldValues",
    }
    if hasattr(BaseBlock, "attribute_map"):
        attribute_map.update(BaseBlock.attribute_map)

    def __init__(
        self,
        user_id=None,
        first_name=None,
        last_name=None,
        full_name=None,
        email=None,
        picture=None,
        variant=None,
        profile_primary_field_values=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """BlockUser - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._full_name = None
        self._email = None
        self._picture = None
        self._variant = None
        self._profile_primary_field_values = None
        self.discriminator = None
        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        if full_name is not None:
            self.full_name = full_name
        self.email = email
        if picture is not None:
            self.picture = picture
        self.variant = variant
        if profile_primary_field_values is not None:
            self.profile_primary_field_values = profile_primary_field_values
        BaseBlock.__init__(self, *args, **kwargs)

    @property
    def user_id(self):
        """Gets the user_id of this BlockUser.  # noqa: E501

        The user's id.  # noqa: E501

        :return: The user_id of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BlockUser.

        The user's id.  # noqa: E501

        :param user_id: The user_id of this BlockUser.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError(
                "Invalid value for `user_id`, must not be `None`"
            )  # noqa: E501

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this BlockUser.  # noqa: E501

        The user's first name.  # noqa: E501

        :return: The first_name of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this BlockUser.

        The user's first name.  # noqa: E501

        :param first_name: The first_name of this BlockUser.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError(
                "Invalid value for `first_name`, must not be `None`"
            )  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this BlockUser.  # noqa: E501

        The user's last name.  # noqa: E501

        :return: The last_name of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this BlockUser.

        The user's last name.  # noqa: E501

        :param last_name: The last_name of this BlockUser.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError(
                "Invalid value for `last_name`, must not be `None`"
            )  # noqa: E501

        self._last_name = last_name

    @property
    def full_name(self):
        """Gets the full_name of this BlockUser.  # noqa: E501

        The user's full name.  # noqa: E501

        :return: The full_name of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this BlockUser.

        The user's full name.  # noqa: E501

        :param full_name: The full_name of this BlockUser.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def email(self):
        """Gets the email of this BlockUser.  # noqa: E501

        Deprecated, use profilePrimaryFieldValues instead.  # noqa: E501

        :return: The email of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BlockUser.

        Deprecated, use profilePrimaryFieldValues instead.  # noqa: E501

        :param email: The email of this BlockUser.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError(
                "Invalid value for `email`, must not be `None`"
            )  # noqa: E501

        self._email = email

    @property
    def picture(self):
        """Gets the picture of this BlockUser.  # noqa: E501

        The url of the user's picture.  # noqa: E501

        :return: The picture of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this BlockUser.

        The url of the user's picture.  # noqa: E501

        :param picture: The picture of this BlockUser.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def variant(self):
        """Gets the variant of this BlockUser.  # noqa: E501


        :return: The variant of this BlockUser.  # noqa: E501
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this BlockUser.


        :param variant: The variant of this BlockUser.  # noqa: E501
        :type: str
        """
        if variant is None:
            raise ValueError(
                "Invalid value for `variant`, must not be `None`"
            )  # noqa: E501
        allowed_values = ["REGULAR", "PICTURE_ONLY"]  # noqa: E501
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}".format(  # noqa: E501
                    variant, allowed_values
                )
            )

        self._variant = variant

    @property
    def profile_primary_field_values(self):
        """Gets the profile_primary_field_values of this BlockUser.  # noqa: E501


        :return: The profile_primary_field_values of this BlockUser.  # noqa: E501
        :rtype: UserProfilePrimaryFieldValues
        """
        return self._profile_primary_field_values

    @profile_primary_field_values.setter
    def profile_primary_field_values(self, profile_primary_field_values):
        """Sets the profile_primary_field_values of this BlockUser.


        :param profile_primary_field_values: The profile_primary_field_values of this BlockUser.  # noqa: E501
        :type: UserProfilePrimaryFieldValues
        """

        self._profile_primary_field_values = profile_primary_field_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BlockUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
