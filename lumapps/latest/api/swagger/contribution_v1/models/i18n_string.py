# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class I18nString(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "value": "str",
        "lang": "AllOfI18nStringLang",
        "translations": "dict(str, str)",
    }

    attribute_map = {"value": "value", "lang": "lang", "translations": "translations"}

    def __init__(self, value=None, lang=None, translations=None):  # noqa: E501
        """I18nString - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._lang = None
        self._translations = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if lang is not None:
            self.lang = lang
        if translations is not None:
            self.translations = translations

    @property
    def value(self):
        """Gets the value of this I18nString.  # noqa: E501


        :return: The value of this I18nString.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this I18nString.


        :param value: The value of this I18nString.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def lang(self):
        """Gets the lang of this I18nString.  # noqa: E501


        :return: The lang of this I18nString.  # noqa: E501
        :rtype: AllOfI18nStringLang
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this I18nString.


        :param lang: The lang of this I18nString.  # noqa: E501
        :type: AllOfI18nStringLang
        """

        self._lang = lang

    @property
    def translations(self):
        """Gets the translations of this I18nString.  # noqa: E501


        :return: The translations of this I18nString.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this I18nString.


        :param translations: The translations of this I18nString.  # noqa: E501
        :type: dict(str, str)
        """

        self._translations = translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(I18nString, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, I18nString):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
