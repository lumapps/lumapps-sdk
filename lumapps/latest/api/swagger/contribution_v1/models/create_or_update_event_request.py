# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateOrUpdateEventRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "template_id": "str",
        "structured_content_id": "str",
        "starts_at": "datetime",
        "ends_at": "datetime",
        "organizers": "OrganizerIds",
        "location": "str",
        "external_url": "str",
        "external_url_label": "OneOfCreateOrUpdateEventRequestExternalUrlLabel",
    }

    attribute_map = {
        "template_id": "templateId",
        "structured_content_id": "structuredContentId",
        "starts_at": "startsAt",
        "ends_at": "endsAt",
        "organizers": "organizers",
        "location": "location",
        "external_url": "externalUrl",
        "external_url_label": "externalUrlLabel",
    }

    def __init__(
        self,
        template_id=None,
        structured_content_id=None,
        starts_at=None,
        ends_at=None,
        organizers=None,
        location=None,
        external_url=None,
        external_url_label=None,
    ):  # noqa: E501
        """CreateOrUpdateEventRequest - a model defined in Swagger"""  # noqa: E501
        self._template_id = None
        self._structured_content_id = None
        self._starts_at = None
        self._ends_at = None
        self._organizers = None
        self._location = None
        self._external_url = None
        self._external_url_label = None
        self.discriminator = None
        self.template_id = template_id
        self.structured_content_id = structured_content_id
        self.starts_at = starts_at
        self.ends_at = ends_at
        if organizers is not None:
            self.organizers = organizers
        if location is not None:
            self.location = location
        if external_url is not None:
            self.external_url = external_url
        if external_url_label is not None:
            self.external_url_label = external_url_label

    @property
    def template_id(self):
        """Gets the template_id of this CreateOrUpdateEventRequest.  # noqa: E501

        The id of the template used to display the event  # noqa: E501

        :return: The template_id of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateOrUpdateEventRequest.

        The id of the template used to display the event  # noqa: E501

        :param template_id: The template_id of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: str
        """
        if template_id is None:
            raise ValueError(
                "Invalid value for `template_id`, must not be `None`"
            )  # noqa: E501

        self._template_id = template_id

    @property
    def structured_content_id(self):
        """Gets the structured_content_id of this CreateOrUpdateEventRequest.  # noqa: E501

        The id of the structured content entity to display in the event  # noqa: E501

        :return: The structured_content_id of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._structured_content_id

    @structured_content_id.setter
    def structured_content_id(self, structured_content_id):
        """Sets the structured_content_id of this CreateOrUpdateEventRequest.

        The id of the structured content entity to display in the event  # noqa: E501

        :param structured_content_id: The structured_content_id of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: str
        """
        if structured_content_id is None:
            raise ValueError(
                "Invalid value for `structured_content_id`, must not be `None`"
            )  # noqa: E501

        self._structured_content_id = structured_content_id

    @property
    def starts_at(self):
        """Gets the starts_at of this CreateOrUpdateEventRequest.  # noqa: E501

        The event's start date and time  # noqa: E501

        :return: The starts_at of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this CreateOrUpdateEventRequest.

        The event's start date and time  # noqa: E501

        :param starts_at: The starts_at of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: datetime
        """
        if starts_at is None:
            raise ValueError(
                "Invalid value for `starts_at`, must not be `None`"
            )  # noqa: E501

        self._starts_at = starts_at

    @property
    def ends_at(self):
        """Gets the ends_at of this CreateOrUpdateEventRequest.  # noqa: E501

        The event's end date and time  # noqa: E501

        :return: The ends_at of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this CreateOrUpdateEventRequest.

        The event's end date and time  # noqa: E501

        :param ends_at: The ends_at of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: datetime
        """
        if ends_at is None:
            raise ValueError(
                "Invalid value for `ends_at`, must not be `None`"
            )  # noqa: E501

        self._ends_at = ends_at

    @property
    def organizers(self):
        """Gets the organizers of this CreateOrUpdateEventRequest.  # noqa: E501


        :return: The organizers of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: OrganizerIds
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this CreateOrUpdateEventRequest.


        :param organizers: The organizers of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: OrganizerIds
        """

        self._organizers = organizers

    @property
    def location(self):
        """Gets the location of this CreateOrUpdateEventRequest.  # noqa: E501

        The event's location, e.g. Yellow Meeting Room. Not to be confused with a localization. Not translatable either.   # noqa: E501

        :return: The location of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CreateOrUpdateEventRequest.

        The event's location, e.g. Yellow Meeting Room. Not to be confused with a localization. Not translatable either.   # noqa: E501

        :param location: The location of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def external_url(self):
        """Gets the external_url of this CreateOrUpdateEventRequest.  # noqa: E501

        The url used to access an online event  # noqa: E501

        :return: The external_url of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this CreateOrUpdateEventRequest.

        The url used to access an online event  # noqa: E501

        :param external_url: The external_url of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def external_url_label(self):
        """Gets the external_url_label of this CreateOrUpdateEventRequest.  # noqa: E501


        :return: The external_url_label of this CreateOrUpdateEventRequest.  # noqa: E501
        :rtype: OneOfCreateOrUpdateEventRequestExternalUrlLabel
        """
        return self._external_url_label

    @external_url_label.setter
    def external_url_label(self, external_url_label):
        """Sets the external_url_label of this CreateOrUpdateEventRequest.


        :param external_url_label: The external_url_label of this CreateOrUpdateEventRequest.  # noqa: E501
        :type: OneOfCreateOrUpdateEventRequestExternalUrlLabel
        """

        self._external_url_label = external_url_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CreateOrUpdateEventRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrUpdateEventRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
