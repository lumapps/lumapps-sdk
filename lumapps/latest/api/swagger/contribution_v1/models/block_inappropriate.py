# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from .base_block import BaseBlock  # noqa: F401,E501


class BlockInappropriate(BaseBlock):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "report_count": "int",
        "last_reported_at": "datetime",
        "is_reported_by_me": "bool",
    }
    if hasattr(BaseBlock, "swagger_types"):
        swagger_types.update(BaseBlock.swagger_types)

    attribute_map = {
        "report_count": "reportCount",
        "last_reported_at": "lastReportedAt",
        "is_reported_by_me": "isReportedByMe",
    }
    if hasattr(BaseBlock, "attribute_map"):
        attribute_map.update(BaseBlock.attribute_map)

    def __init__(
        self,
        report_count=None,
        last_reported_at=None,
        is_reported_by_me=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """BlockInappropriate - a model defined in Swagger"""  # noqa: E501
        self._report_count = None
        self._last_reported_at = None
        self._is_reported_by_me = None
        self.discriminator = None
        self.report_count = report_count
        self.last_reported_at = last_reported_at
        self.is_reported_by_me = is_reported_by_me
        BaseBlock.__init__(self, *args, **kwargs)

    @property
    def report_count(self):
        """Gets the report_count of this BlockInappropriate.  # noqa: E501

        The number of reports received for the associated resource.  # noqa: E501

        :return: The report_count of this BlockInappropriate.  # noqa: E501
        :rtype: int
        """
        return self._report_count

    @report_count.setter
    def report_count(self, report_count):
        """Sets the report_count of this BlockInappropriate.

        The number of reports received for the associated resource.  # noqa: E501

        :param report_count: The report_count of this BlockInappropriate.  # noqa: E501
        :type: int
        """
        if report_count is None:
            raise ValueError(
                "Invalid value for `report_count`, must not be `None`"
            )  # noqa: E501

        self._report_count = report_count

    @property
    def last_reported_at(self):
        """Gets the last_reported_at of this BlockInappropriate.  # noqa: E501

        The date and time when the associated resource got reported.  # noqa: E501

        :return: The last_reported_at of this BlockInappropriate.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reported_at

    @last_reported_at.setter
    def last_reported_at(self, last_reported_at):
        """Sets the last_reported_at of this BlockInappropriate.

        The date and time when the associated resource got reported.  # noqa: E501

        :param last_reported_at: The last_reported_at of this BlockInappropriate.  # noqa: E501
        :type: datetime
        """
        if last_reported_at is None:
            raise ValueError(
                "Invalid value for `last_reported_at`, must not be `None`"
            )  # noqa: E501

        self._last_reported_at = last_reported_at

    @property
    def is_reported_by_me(self):
        """Gets the is_reported_by_me of this BlockInappropriate.  # noqa: E501

        Whether the current user has reported the assicated resource.  # noqa: E501

        :return: The is_reported_by_me of this BlockInappropriate.  # noqa: E501
        :rtype: bool
        """
        return self._is_reported_by_me

    @is_reported_by_me.setter
    def is_reported_by_me(self, is_reported_by_me):
        """Sets the is_reported_by_me of this BlockInappropriate.

        Whether the current user has reported the assicated resource.  # noqa: E501

        :param is_reported_by_me: The is_reported_by_me of this BlockInappropriate.  # noqa: E501
        :type: bool
        """
        if is_reported_by_me is None:
            raise ValueError(
                "Invalid value for `is_reported_by_me`, must not be `None`"
            )  # noqa: E501

        self._is_reported_by_me = is_reported_by_me

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BlockInappropriate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockInappropriate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
