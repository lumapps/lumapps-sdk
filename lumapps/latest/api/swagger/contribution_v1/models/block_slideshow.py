# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from .base_block import BaseBlock  # noqa: F401,E501


class BlockSlideshow(BaseBlock):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "variant": "SlideshowVariant",
        "is_autoplay_enabled": "bool",
        "autoplay_delay": "int",
        "is_navigation_visible": "bool",
        "visible_items": "int",
        "items": "list[object]",
    }
    if hasattr(BaseBlock, "swagger_types"):
        swagger_types.update(BaseBlock.swagger_types)

    attribute_map = {
        "variant": "variant",
        "is_autoplay_enabled": "isAutoplayEnabled",
        "autoplay_delay": "autoplayDelay",
        "is_navigation_visible": "isNavigationVisible",
        "visible_items": "visibleItems",
        "items": "items",
    }
    if hasattr(BaseBlock, "attribute_map"):
        attribute_map.update(BaseBlock.attribute_map)

    def __init__(
        self,
        variant=None,
        is_autoplay_enabled=None,
        autoplay_delay=None,
        is_navigation_visible=None,
        visible_items=None,
        items=None,
        *args,
        **kwargs
    ):  # noqa: E501
        """BlockSlideshow - a model defined in Swagger"""  # noqa: E501
        self._variant = None
        self._is_autoplay_enabled = None
        self._autoplay_delay = None
        self._is_navigation_visible = None
        self._visible_items = None
        self._items = None
        self.discriminator = None
        self.variant = variant
        self.is_autoplay_enabled = is_autoplay_enabled
        if autoplay_delay is not None:
            self.autoplay_delay = autoplay_delay
        self.is_navigation_visible = is_navigation_visible
        if visible_items is not None:
            self.visible_items = visible_items
        self.items = items
        BaseBlock.__init__(self, *args, **kwargs)

    @property
    def variant(self):
        """Gets the variant of this BlockSlideshow.  # noqa: E501


        :return: The variant of this BlockSlideshow.  # noqa: E501
        :rtype: SlideshowVariant
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this BlockSlideshow.


        :param variant: The variant of this BlockSlideshow.  # noqa: E501
        :type: SlideshowVariant
        """
        if variant is None:
            raise ValueError(
                "Invalid value for `variant`, must not be `None`"
            )  # noqa: E501

        self._variant = variant

    @property
    def is_autoplay_enabled(self):
        """Gets the is_autoplay_enabled of this BlockSlideshow.  # noqa: E501

        Whether the slideshow should play automatically.  # noqa: E501

        :return: The is_autoplay_enabled of this BlockSlideshow.  # noqa: E501
        :rtype: bool
        """
        return self._is_autoplay_enabled

    @is_autoplay_enabled.setter
    def is_autoplay_enabled(self, is_autoplay_enabled):
        """Sets the is_autoplay_enabled of this BlockSlideshow.

        Whether the slideshow should play automatically.  # noqa: E501

        :param is_autoplay_enabled: The is_autoplay_enabled of this BlockSlideshow.  # noqa: E501
        :type: bool
        """
        if is_autoplay_enabled is None:
            raise ValueError(
                "Invalid value for `is_autoplay_enabled`, must not be `None`"
            )  # noqa: E501

        self._is_autoplay_enabled = is_autoplay_enabled

    @property
    def autoplay_delay(self):
        """Gets the autoplay_delay of this BlockSlideshow.  # noqa: E501

        The delay in seconds before navigating automatically to the next page.  # noqa: E501

        :return: The autoplay_delay of this BlockSlideshow.  # noqa: E501
        :rtype: int
        """
        return self._autoplay_delay

    @autoplay_delay.setter
    def autoplay_delay(self, autoplay_delay):
        """Sets the autoplay_delay of this BlockSlideshow.

        The delay in seconds before navigating automatically to the next page.  # noqa: E501

        :param autoplay_delay: The autoplay_delay of this BlockSlideshow.  # noqa: E501
        :type: int
        """

        self._autoplay_delay = autoplay_delay

    @property
    def is_navigation_visible(self):
        """Gets the is_navigation_visible of this BlockSlideshow.  # noqa: E501

        Whether navigation controls should be displayed.  # noqa: E501

        :return: The is_navigation_visible of this BlockSlideshow.  # noqa: E501
        :rtype: bool
        """
        return self._is_navigation_visible

    @is_navigation_visible.setter
    def is_navigation_visible(self, is_navigation_visible):
        """Sets the is_navigation_visible of this BlockSlideshow.

        Whether navigation controls should be displayed.  # noqa: E501

        :param is_navigation_visible: The is_navigation_visible of this BlockSlideshow.  # noqa: E501
        :type: bool
        """
        if is_navigation_visible is None:
            raise ValueError(
                "Invalid value for `is_navigation_visible`, must not be `None`"
            )  # noqa: E501

        self._is_navigation_visible = is_navigation_visible

    @property
    def visible_items(self):
        """Gets the visible_items of this BlockSlideshow.  # noqa: E501

        The number of items that should be visible at any one time.  # noqa: E501

        :return: The visible_items of this BlockSlideshow.  # noqa: E501
        :rtype: int
        """
        return self._visible_items

    @visible_items.setter
    def visible_items(self, visible_items):
        """Sets the visible_items of this BlockSlideshow.

        The number of items that should be visible at any one time.  # noqa: E501

        :param visible_items: The visible_items of this BlockSlideshow.  # noqa: E501
        :type: int
        """

        self._visible_items = visible_items

    @property
    def items(self):
        """Gets the items of this BlockSlideshow.  # noqa: E501

        The slideshow's items.  # noqa: E501

        :return: The items of this BlockSlideshow.  # noqa: E501
        :rtype: list[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BlockSlideshow.

        The slideshow's items.  # noqa: E501

        :param items: The items of this BlockSlideshow.  # noqa: E501
        :type: list[object]
        """
        if items is None:
            raise ValueError(
                "Invalid value for `items`, must not be `None`"
            )  # noqa: E501

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(BlockSlideshow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockSlideshow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
