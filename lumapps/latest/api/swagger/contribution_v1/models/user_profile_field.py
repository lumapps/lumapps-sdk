# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UserProfileField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "definition_id": "str",
        "name": "str",
        "type": "UserProfileFieldType",
        "icon_class": "str",
        "values": "list[str]",
    }

    attribute_map = {
        "definition_id": "definition_id",
        "name": "name",
        "type": "type",
        "icon_class": "iconClass",
        "values": "values",
    }

    def __init__(
        self, definition_id=None, name=None, type=None, icon_class=None, values=None
    ):  # noqa: E501
        """UserProfileField - a model defined in Swagger"""  # noqa: E501
        self._definition_id = None
        self._name = None
        self._type = None
        self._icon_class = None
        self._values = None
        self.discriminator = None
        self.definition_id = definition_id
        self.name = name
        self.type = type
        self.icon_class = icon_class
        self.values = values

    @property
    def definition_id(self):
        """Gets the definition_id of this UserProfileField.  # noqa: E501

        The field's definition id.  # noqa: E501

        :return: The definition_id of this UserProfileField.  # noqa: E501
        :rtype: str
        """
        return self._definition_id

    @definition_id.setter
    def definition_id(self, definition_id):
        """Sets the definition_id of this UserProfileField.

        The field's definition id.  # noqa: E501

        :param definition_id: The definition_id of this UserProfileField.  # noqa: E501
        :type: str
        """
        if definition_id is None:
            raise ValueError(
                "Invalid value for `definition_id`, must not be `None`"
            )  # noqa: E501

        self._definition_id = definition_id

    @property
    def name(self):
        """Gets the name of this UserProfileField.  # noqa: E501

        the translated field name.  # noqa: E501

        :return: The name of this UserProfileField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserProfileField.

        the translated field name.  # noqa: E501

        :param name: The name of this UserProfileField.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this UserProfileField.  # noqa: E501


        :return: The type of this UserProfileField.  # noqa: E501
        :rtype: UserProfileFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserProfileField.


        :param type: The type of this UserProfileField.  # noqa: E501
        :type: UserProfileFieldType
        """
        if type is None:
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501

        self._type = type

    @property
    def icon_class(self):
        """Gets the icon_class of this UserProfileField.  # noqa: E501

        the field's icon CSS class.  # noqa: E501

        :return: The icon_class of this UserProfileField.  # noqa: E501
        :rtype: str
        """
        return self._icon_class

    @icon_class.setter
    def icon_class(self, icon_class):
        """Sets the icon_class of this UserProfileField.

        the field's icon CSS class.  # noqa: E501

        :param icon_class: The icon_class of this UserProfileField.  # noqa: E501
        :type: str
        """
        if icon_class is None:
            raise ValueError(
                "Invalid value for `icon_class`, must not be `None`"
            )  # noqa: E501

        self._icon_class = icon_class

    @property
    def values(self):
        """Gets the values of this UserProfileField.  # noqa: E501

        The field's value(s).  # noqa: E501

        :return: The values of this UserProfileField.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this UserProfileField.

        The field's value(s).  # noqa: E501

        :param values: The values of this UserProfileField.  # noqa: E501
        :type: list[str]
        """
        if values is None:
            raise ValueError(
                "Invalid value for `values`, must not be `None`"
            )  # noqa: E501

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserProfileField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
