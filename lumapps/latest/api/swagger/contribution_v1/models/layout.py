# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Layout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "is_v2_compatible": "bool",
        "revision_number": "int",
        "components": "list[object]",
        "widgets": "list[WidgetResponse]",
    }

    attribute_map = {
        "id": "id",
        "is_v2_compatible": "isV2Compatible",
        "revision_number": "revisionNumber",
        "components": "components",
        "widgets": "widgets",
    }

    def __init__(
        self,
        id=None,
        is_v2_compatible=None,
        revision_number=None,
        components=None,
        widgets=None,
    ):  # noqa: E501
        """Layout - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_v2_compatible = None
        self._revision_number = None
        self._components = None
        self._widgets = None
        self.discriminator = None
        self.id = id
        if is_v2_compatible is not None:
            self.is_v2_compatible = is_v2_compatible
        if revision_number is not None:
            self.revision_number = revision_number
        self.components = components
        if widgets is not None:
            self.widgets = widgets

    @property
    def id(self):
        """Gets the id of this Layout.  # noqa: E501


        :return: The id of this Layout.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Layout.


        :param id: The id of this Layout.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_v2_compatible(self):
        """Gets the is_v2_compatible of this Layout.  # noqa: E501

        Whether all widgets presents in the layout are compatible with api v2  # noqa: E501

        :return: The is_v2_compatible of this Layout.  # noqa: E501
        :rtype: bool
        """
        return self._is_v2_compatible

    @is_v2_compatible.setter
    def is_v2_compatible(self, is_v2_compatible):
        """Sets the is_v2_compatible of this Layout.

        Whether all widgets presents in the layout are compatible with api v2  # noqa: E501

        :param is_v2_compatible: The is_v2_compatible of this Layout.  # noqa: E501
        :type: bool
        """

        self._is_v2_compatible = is_v2_compatible

    @property
    def revision_number(self):
        """Gets the revision_number of this Layout.  # noqa: E501


        :return: The revision_number of this Layout.  # noqa: E501
        :rtype: int
        """
        return self._revision_number

    @revision_number.setter
    def revision_number(self, revision_number):
        """Sets the revision_number of this Layout.


        :param revision_number: The revision_number of this Layout.  # noqa: E501
        :type: int
        """

        self._revision_number = revision_number

    @property
    def components(self):
        """Gets the components of this Layout.  # noqa: E501

        The layout components, which define the page structure.  # noqa: E501

        :return: The components of this Layout.  # noqa: E501
        :rtype: list[object]
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this Layout.

        The layout components, which define the page structure.  # noqa: E501

        :param components: The components of this Layout.  # noqa: E501
        :type: list[object]
        """
        if components is None:
            raise ValueError(
                "Invalid value for `components`, must not be `None`"
            )  # noqa: E501

        self._components = components

    @property
    def widgets(self):
        """Gets the widgets of this Layout.  # noqa: E501

        The pre-loaded display blocks for the widgets present in the layout.  # noqa: E501

        :return: The widgets of this Layout.  # noqa: E501
        :rtype: list[WidgetResponse]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this Layout.

        The pre-loaded display blocks for the widgets present in the layout.  # noqa: E501

        :param widgets: The widgets of this Layout.  # noqa: E501
        :type: list[WidgetResponse]
        """

        self._widgets = widgets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Layout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Layout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
