# coding: utf-8

"""
    CMS Contribution API

    The CMS Contribution API allows access and modification of Lumapps contents.   # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MetadataReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "metadata_id": "str",
        "name": "str",
        "root_id": "str",
        "root_name": "str",
    }

    attribute_map = {
        "metadata_id": "metadataId",
        "name": "name",
        "root_id": "rootId",
        "root_name": "rootName",
    }

    def __init__(
        self, metadata_id=None, name=None, root_id=None, root_name=None
    ):  # noqa: E501
        """MetadataReference - a model defined in Swagger"""  # noqa: E501
        self._metadata_id = None
        self._name = None
        self._root_id = None
        self._root_name = None
        self.discriminator = None
        self.metadata_id = metadata_id
        self.name = name
        if root_id is not None:
            self.root_id = root_id
        if root_name is not None:
            self.root_name = root_name

    @property
    def metadata_id(self):
        """Gets the metadata_id of this MetadataReference.  # noqa: E501

        The metadata's id.  # noqa: E501

        :return: The metadata_id of this MetadataReference.  # noqa: E501
        :rtype: str
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this MetadataReference.

        The metadata's id.  # noqa: E501

        :param metadata_id: The metadata_id of this MetadataReference.  # noqa: E501
        :type: str
        """
        if metadata_id is None:
            raise ValueError(
                "Invalid value for `metadata_id`, must not be `None`"
            )  # noqa: E501

        self._metadata_id = metadata_id

    @property
    def name(self):
        """Gets the name of this MetadataReference.  # noqa: E501

        The metadata's name.  # noqa: E501

        :return: The name of this MetadataReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataReference.

        The metadata's name.  # noqa: E501

        :param name: The name of this MetadataReference.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def root_id(self):
        """Gets the root_id of this MetadataReference.  # noqa: E501

        The id of the metadata's tree root.  # noqa: E501

        :return: The root_id of this MetadataReference.  # noqa: E501
        :rtype: str
        """
        return self._root_id

    @root_id.setter
    def root_id(self, root_id):
        """Sets the root_id of this MetadataReference.

        The id of the metadata's tree root.  # noqa: E501

        :param root_id: The root_id of this MetadataReference.  # noqa: E501
        :type: str
        """

        self._root_id = root_id

    @property
    def root_name(self):
        """Gets the root_name of this MetadataReference.  # noqa: E501

        The name of the metadata's tree root.  # noqa: E501

        :return: The root_name of this MetadataReference.  # noqa: E501
        :rtype: str
        """
        return self._root_name

    @root_name.setter
    def root_name(self, root_name):
        """Sets the root_name of this MetadataReference.

        The name of the metadata's tree root.  # noqa: E501

        :param root_name: The root_name of this MetadataReference.  # noqa: E501
        :type: str
        """

        self._root_name = root_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(MetadataReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
